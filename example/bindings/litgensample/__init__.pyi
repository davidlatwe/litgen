import numpy
from enum import Enum

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# <autogen:pyi> // Autogenerated code below! Do not edit!

# <namespace LiterateGeneratorExample>    # example_library/litgensample.h:18


def add_c_array2(    # example_library/litgensample.h:46
    values:  std::array<int, 2>
    ): -> int
    """Tests with Boxed Numbers"""
    pass


def log_c_array2(    # example_library/litgensample.h:47
    values:  std::array<int, 2>
    ): -> None
    pass


def change_c_array2(    # example_library/litgensample.h:48
    values_0: BoxedUnsignedLong ,
    values_1: BoxedUnsignedLong 
    ): -> None
    pass


def GetPoints(    # example_library/litgensample.h:58
    out_0: Point2 ,
    out_1: Point2 
    ): -> None
    pass


def add_inside_array(    # example_library/litgensample.h:65
    array: int ,
    array_size: int,
    number_to_add: int
    ): -> None
    """Modify an array by adding a value to its elements (non template function)"""
    pass


def mul_inside_array(    # example_library/litgensample.h:71
    array: T ,
    array_size: int,
    factor: float
    ): -> template < typename T
    """Modify an array by multiplying its elements (template function!)"""
    pass


def c_string_list_total_size(    # example_library/litgensample.h:81
    items:  list[str] ,
    output_0: BoxedInt ,
    output_1: BoxedInt 
    ): -> int
    pass


def add(    # example_library/litgensample.h:93
    a: int,
    b: int
    ): -> int
    """Adds two numbers"""
    pass


def add(    # example_library/litgensample.h:96
    a: int,
    b: int,
    c: int
    ): -> int
    """Adds three numbers, with a surprise"""
    pass


def sub(    # example_library/litgensample.h:99
    a: int,
    b: int
    ): -> int
    pass


def mul(    # example_library/litgensample.h:101
    a: int,
    b: int
    ): -> int
    pass


def FooInstance(    # example_library/litgensample.h:135
    
    ): -> Foo 
    """return_value_policy::reference"""
    pass

# </namespace LiterateGeneratorExample>

# </autogen:pyi>
