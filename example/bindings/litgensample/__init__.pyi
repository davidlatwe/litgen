from typing import List
from typing import (
    Literal,  # for enums annotations, when some enum values depend on other values of the same enum
)
import numpy
from enum import Enum

# Disable black formatter
# fmt: off
"""
TODO:
 * Remove these decls, they will be autogenerated later
 * Reactivate the two overloads of add and see how to deal with them
        // Adds two numbers
        MY_API inline int add(int a, int b) { return a + b; }
        // Adds three numbers, with a surprise
        // MY_API inline int add(int a, int b, int c) { return a + b + c + 4; }
"""

# class BoxedUnsignedLong:
#     value: float = 0
#
#     def __init___(self, value = 0.):
#         self.value = value
#     def __repr__(self):
#         return f"BoxedUnsignedLong({self.value})"
# class BoxedInt:
#     value: int = 0
#
#     def __init___(self, value = 0.):
#         self.value = value
#     def __repr__(self):
#         return f"BoxedInt({self.value})"

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# <autogen:pyi> // Autogenerated code below! Do not edit!
# </autogen:pyi>

# fmt: on
