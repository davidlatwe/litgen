from typing import List
from typing import (
    Literal,  # for enums annotations, when some enum values depend on other values of the same enum
)
import numpy as np
from enum import Enum

# Disable black formatter
# fmt: off
"""
TODO:
 * Remove these decls, they will be autogenerated later
 * Reactivate the two overloads of add and see how to deal with them
        // Adds two numbers
        MY_API inline int add(int a, int b) { return a + b; }
        // Adds three numbers, with a surprise
        // MY_API inline int add(int a, int b, int c) { return a + b + c + 4; }
"""

# class BoxedUnsignedLong:
#     value: float = 0
#
#     def __init___(self, value = 0.):
#         self.value = value
#     def __repr__(self):
#         return f"BoxedUnsignedLong({self.value})"
# class BoxedInt:
#     value: int = 0
#
#     def __init___(self, value = 0.):
#         self.value = value
#     def __repr__(self):
#         return f"BoxedInt({self.value})"

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# <autogen:pyi> // Autogenerated code below! Do not edit!



class BoxedUnsignedLong:    # example_library/litgensample.h:19
    value:int    # example_library/litgensample.h:21

class BoxedInt:    # example_library/litgensample.h:26
    value:int    # example_library/litgensample.h:28

# <Namespace LiterateGeneratorExample>

class MyEnum(Enum):    # example_library/litgensample.h:38
    """ A super nice enum
     for demo purposes ( bool val = False )
    """
    a = 1    # This is value a
    aa = 2   # this is value aa
    aaa = 3  # this is value aaa

    # Lonely comment

    # This is value b
    b = 4

    # This is c
    # with doc on several lines
    c = Literal[MyEnum.a] | Literal[MyEnum.b]


#
# C Style array tests
#

# Tests with Boxed Numbers
def add_c_array2(values: List[int]) -> int:    # example_library/litgensample.h:61
    pass
def log_c_array2(values: List[int]) -> None:    # example_library/litgensample.h:62
    pass
def change_c_array2(    # example_library/litgensample.h:63
    values_0: BoxedUnsignedLong,
    values_1: BoxedUnsignedLong
    ) -> None:
    pass
class Point2:    # example_library/litgensample.h:69
    """ Test with C array containing user defined struct (which will not be boxed)"""
    x:int    # example_library/litgensample.h:71
    y:int    # example_library/litgensample.h:71
def get_points(out_0: Point2, out_1: Point2) -> None:    # example_library/litgensample.h:73
    pass

#
# C Style buffer to np.ndarray tests
#

def add_inside_buffer(buffer: np.ndarray, number_to_add: int) -> None:    # example_library/litgensample.h:80
    """ Modifies a buffer by adding a value to its elements"""
    pass
def buffer_sum(buffer: np.ndarray, stride: int = -1) -> int:    # example_library/litgensample.h:86
    """ Returns the sum of a  buffer"""
    pass
def add_inside_two_buffers(    # example_library/litgensample.h:94
    buffer_1: np.ndarray,
    buffer_2: np.ndarray,
    number_to_add: int
    ) -> None:
    """ Modifies two buffers"""
    pass


def mul_inside_buffer(buffer: np.ndarray, factor: float) -> None:    # example_library/litgensample.h:105
    """ Modify an array by multiplying its elements (template function!)"""
    pass

#
# C String lists tests
#

def c_string_list_total_size(    # example_library/litgensample.h:115
    items: List[str],
    output_0: BoxedInt,
    output_1: BoxedInt
    ) -> int:
    pass


def add(a: int, b: int) -> int:    # example_library/litgensample.h:127
    """ Adds two numbers"""
    pass

# Adds three numbers, with a surprise
# MY_API inline int add(int a, int b, int c) { return a + b + c + 4; }


def sub(a: int, b: int) -> int:    # example_library/litgensample.h:133
    pass

def mul(a: int, b: int) -> int:    # example_library/litgensample.h:135
    pass

class Foo:    # example_library/litgensample.h:138
    """ A superb struct"""
    def __init__(self) -> None:       # example_library/litgensample.h:140
        pass

    #
    # These are our parameters
    #

    #
    # Test with numeric arrays which should be converted to np.ndarray
    #
    values:np.ndarray                 # ndarray[type=int, size=2] default:{0, 1}    # example_library/litgensample.h:150
    flags:np.ndarray                  # ndarray[type=bool, size=3] default:{False, True, False}    # example_library/litgensample.h:151


    # Multiplication factor
    factor:int = 10                   # example_library/litgensample.h:157

    # addition factor
    delta:int                         # example_library/litgensample.h:160

    #
    # And these are our calculations
    #

    def calc(self, x: int) -> int:    # example_library/litgensample.h:167
        """ Do some math"""
        pass


def foo_instance() -> Foo:    # example_library/litgensample.h:172
    """ return_value_policy::reference"""
    pass

#    MY_API None ToggleBool(bool v) {
#        printf("ToggleBool ptr=%p value=%s\n", v, (v) ? "True" : "False");
#        v = !(v);
#    }
#
#    MY_API None ToggleBool2(std::shared_ptr<bool> v) {
#        bool b = v.get();
#        printf("ToggleBool2 ptr=%p value=%s\n", b, (b) ? "True" : "False");
#        b = !(b);
#    }
#
# </Namespace LiterateGeneratorExample>

# </autogen:pyi>

# fmt: on
