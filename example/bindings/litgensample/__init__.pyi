import numpy
from enum import Enum

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# <autogen:pyi> // Autogenerated code below! Do not edit!

# <namespace LiterateGeneratorExample>    # example_library/litgensample.h:18


def add_c_array2(values: List[int, 2]) -> int:    # example_library/litgensample.h:46
    """Tests with Boxed Numbers"""
    pass


def log_c_array2(values: List[int, 2]) -> None:    # example_library/litgensample.h:47
    pass


def change_c_array2(    # example_library/litgensample.h:48
    values_0: BoxedUnsignedLong,
    values_1: BoxedUnsignedLong
    ) -> None:
    pass


def GetPoints(out_0: Point2, out_1: Point2) -> None:    # example_library/litgensample.h:58
    pass


def add_inside_array(array: int, array_size: int, number_to_add: int) -> None:    # example_library/litgensample.h:65
    """Modify an array by adding a value to its elements (non template function)"""
    pass


def mul_inside_array(    # example_library/litgensample.h:71
    array: numpy.ndarray,
    array_size: int,
    factor: float
    ) -> None:
    """Modify an array by multiplying its elements (template function!)"""
    pass


def c_string_list_total_size(    # example_library/litgensample.h:81
    items: List[str],
    output_0: BoxedInt,
    output_1: BoxedInt
    ) -> int:
    pass


def add(a: int, b: int) -> int:    # example_library/litgensample.h:93
    """Adds two numbers"""
    pass


def add(a: int, b: int, c: int) -> int:    # example_library/litgensample.h:96
    """Adds three numbers, with a surprise"""
    pass


def sub(a: int, b: int) -> int:    # example_library/litgensample.h:99
    pass


def mul(a: int, b: int) -> int:    # example_library/litgensample.h:101
    pass


def FooInstance() -> Foo:    # example_library/litgensample.h:135
    """return_value_policy::reference"""
    pass

# </namespace LiterateGeneratorExample>

# </autogen:pyi>
