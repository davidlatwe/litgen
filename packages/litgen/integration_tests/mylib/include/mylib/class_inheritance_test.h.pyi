# ============================================================================
# This file was autogenerated
# It is presented side to side with its source: class_inheritance_test.h
#    (see integration_tests/bindings/lg_mylib/__init__pyi which contains the full
#     stub code, including this code)
# ============================================================================

# type: ignore
import sys
from typing import Literal, List, Any, Optional, Tuple, Dict
import numpy as np
from enum import Enum
import numpy

# <litgen_stub> // Autogenerated code below! Do not edit!
####################    <generated_from:class_inheritance_test.h>    ####################





def make_dog() -> Animals.Animal:
    """ Test that downcasting works: the return type is Animal, but it should bark!"""
    pass

# <submodule Animals>
class Animals: # Proxy class that introduces typings for the *submodule* Animals
    # (This corresponds to a C++ namespace. All method are static!)
    class Animal:
        def __init__(self, name: str) -> None:
            pass
        name: str


    class Dog(Animals.Animal):
        def __init__(self, name: str) -> None:
            pass
        def bark(self) -> str:
            pass



# </submodule Animals>

# <submodule Home>
class Home: # Proxy class that introduces typings for the *submodule* Home
    # (This corresponds to a C++ namespace. All method are static!)
    class Pet:
        def is_pet(self) -> bool:
            pass

    class PetDog(Animals.Dog, Home.Pet):
        def __init__(self, name: str) -> None:
            pass
        def bark(self) -> str:
            pass



# </submodule Home>
####################    </generated_from:class_inheritance_test.h>    ####################

# </litgen_stub> // Autogenerated code end!
