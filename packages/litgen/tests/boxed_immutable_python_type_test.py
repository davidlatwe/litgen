import pytest

from codemanip import code_utils

import litgen
from litgen.internal.boxed_python_type import BoxedPythonType, generated_code_for_registered_boxed_types
from litgen.internal.adapted_types.litgen_writer_context import LitgenWriterContext


def test_make_boxed_type():
    options = litgen.LitgenOptions()
    lg_writer_context = LitgenWriterContext(options)
    cpp_numeric_type = "unsigned long long"
    boxed_type = BoxedPythonType(lg_writer_context.boxed_types_registry, cpp_numeric_type)

    struct_code = boxed_type.cpp_header_code(LitgenWriterContext(options))
    # logging.warning("\n" + struct_code)
    code_utils.assert_are_codes_equal(
        struct_code,
        """
        struct BoxedUnsignedLongLong
        {
            unsigned long long value;
            BoxedUnsignedLongLong(unsigned long long v = 0) : value(v) {}
            std::string __repr__() const { return std::string("BoxedUnsignedLongLong(") + std::to_string(value) + ")"; }
        };
    """,
    )

    options = litgen.LitgenOptions()
    pydef_code = boxed_type.pydef_code(LitgenWriterContext(options))
    # logging.warning("\n" + pydef_code)
    expected_code = """
        auto pyClassBoxedUnsignedLongLong = py::class_<BoxedUnsignedLongLong>
            (m, "BoxedUnsignedLongLong", "")
            .def_readwrite("value", &BoxedUnsignedLongLong::value, "")
            .def(py::init<unsigned long long>(),
                py::arg("v") = 0)
            .def("__repr__",
                &BoxedUnsignedLongLong::__repr__)
            ;
    """
    code_utils.assert_are_codes_equal(pydef_code, expected_code)

    # Test that we refuse to box a mutable type
    with pytest.raises(TypeError):
        _ = BoxedPythonType(lg_writer_context.boxed_types_registry, "SomeClass")

    # Test generation of boxed structs code and bindings
    # (We instantiated boxing for "unsigned long long" and "int")
    _ = BoxedPythonType(lg_writer_context.boxed_types_registry, "int")
    generated_code = generated_code_for_registered_boxed_types(lg_writer_context)
    assert generated_code is not None
    # logging.warning("\n" + boxed_structs_code)
    code_utils.assert_are_codes_equal(
        generated_code.boxed_types_cpp_declaration,
        """
        // <Autogenerated_Boxed_Types>
        struct BoxedUnsignedLongLong
        {
            unsigned long long value;
            BoxedUnsignedLongLong(unsigned long long v = 0) : value(v) {}
            std::string __repr__() const { return std::string("BoxedUnsignedLongLong(") + std::to_string(value) + ")"; }
        };
        struct BoxedInt
        {
            int value;
            BoxedInt(int v = 0) : value(v) {}
            std::string __repr__() const { return std::string("BoxedInt(") + std::to_string(value) + ")"; }
        };
        // </Autogenerated_Boxed_Types>
        """,
    )

    code_utils.assert_are_codes_equal(
        generated_code.generated_code.pydef_code,
        """
        // <Autogenerated_Boxed_Types>
        auto pyClassBoxedUnsignedLongLong = py::class_<BoxedUnsignedLongLong>
            (m, "BoxedUnsignedLongLong", "")
            .def_readwrite("value", &BoxedUnsignedLongLong::value, "")
            .def(py::init<unsigned long long>(),
                py::arg("v") = 0)
            .def("__repr__",
                &BoxedUnsignedLongLong::__repr__)
            ;
        auto pyClassBoxedInt = py::class_<BoxedInt>
            (m, "BoxedInt", "")
            .def_readwrite("value", &BoxedInt::value, "")
            .def(py::init<int>(),
                py::arg("v") = 0)
            .def("__repr__",
                &BoxedInt::__repr__)
            ;
        // </Autogenerated_Boxed_Types>
        """,
    )

    code_utils.assert_are_codes_equal(
        generated_code.generated_code.stub_code,
        """
        # <Autogenerated_Boxed_Types>
        class BoxedUnsignedLongLong:
            value: int
            def __init__(self, v: int = 0) -> None:
                pass
            def __repr__(self) -> str:
                pass
        class BoxedInt:
            value: int
            def __init__(self, v: int = 0) -> None:
                pass
            def __repr__(self) -> str:
                pass
        # </Autogenerated_Boxed_Types>
        """,
    )
