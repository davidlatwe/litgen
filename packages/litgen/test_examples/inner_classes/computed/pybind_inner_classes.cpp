#include "inner_classes.h"
#include "inner_classes_boxed_types.h"

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/numpy.h>
#include <pybind11/functional.h>

namespace py = pybind11;

void py_init_module_inner_classes(py::module& m)
{
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:BoxedTypes>    ////////////////////
    // <Autogenerated_Boxed_Types>
    auto pyClassBoxedFloat = py::class_<BoxedFloat>
        (m, "BoxedFloat", "")
        .def_readwrite("value", &BoxedFloat::value, "")
        .def(py::init<float>(),
            py::arg("v") = 0.)
        .def("__repr__",
            &BoxedFloat::__repr__)
        ;
    // </Autogenerated_Boxed_Types>
    ////////////////////    </generated_from:BoxedTypes>    ////////////////////
    ////////////////////    <generated_from:inner_classes.h>    ////////////////////
    auto pyClassParent = py::class_<Parent>
        (m, "Parent", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("a", &Parent::a, "")
        .def_readwrite("child", &Parent::child, "")
        ;
    { // inner classes of Parent
        auto pyClassParent_ClassChild = py::class_<Parent::Child>
            (pyClassParent, "Child", "")
            .def(py::init<int>(),
                py::arg("_b") = 0)
            .def_readwrite("b", &Parent::Child::b, "")
            .def("add",
                [](Parent::Child & self, BoxedFloat & values_0, BoxedFloat & values_1, BoxedFloat & values_2) -> float
                {
                    auto add_adapt_fixed_size_c_arrays = [&self](BoxedFloat & values_0, BoxedFloat & values_1, BoxedFloat & values_2) -> float
                    {
                        float values_raw[3];
                        values_raw[0] = values_0.value;
                        values_raw[1] = values_1.value;
                        values_raw[2] = values_2.value;

                        auto r = self.add(values_raw);

                        values_0.value = values_raw[0];
                        values_1.value = values_raw[1];
                        values_2.value = values_raw[2];
                        return r;
                    };

                    return add_adapt_fixed_size_c_arrays(values_0, values_1, values_2);
                },     py::arg("values_0"), py::arg("values_1"), py::arg("values_2"))
            ;
    } // end of inner classes of Parent
    ////////////////////    </generated_from:inner_classes.h>    ////////////////////

    // </litgen_pydef> //
}
