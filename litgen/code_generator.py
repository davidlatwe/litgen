import os
import time

from options import code_style_implot, code_style_immvision
from code_types import *
import code_utils
import function_parser, enum_parser, struct_parser
import function_generator, enum_generator, struct_generator
import find_functions_structs_enums


THIS_DIR = os.path.dirname(__file__)
REPO_DIR = os.path.realpath(THIS_DIR + "/../..")


# @dataclass
# class AutoGeneratedFile_StructInfos:
#     filename: str = ""
#     generator_type: str = ""
#     generator_function:Callable[[StructInfos], str] = None
#
#
# @dataclass
# class AutoGeneratedFile_FunctionsInfos:
#     filename: str = ""
#     generator_type: str = ""
#     generator_function: Callable[[str], str] = None
#

CODE_MARKERS = {
    CppCodeType.STRUCT: "pydef_struct",
    CppCodeType.FUNCTION: "pydef_function",
    CppCodeType.ENUM_CPP_98: "pydef_enum_cpp_98"
}


def code_marker_in(code_type: CppCodeType):
    return f"<autogen:{CODE_MARKERS[code_type]}>"


def code_marker_out(code_type: CppCodeType):
    return f"</autogen:{CODE_MARKERS[code_type]}>"


def remove_generated_code(dst_filename: str, code_type: CppCodeType):
    code_utils.write_code_between_markers(
        dst_filename,
        code_marker_in(code_type),
        code_marker_out(code_type),
        "",
        True
    )


def remove_all_generated_code(dst_filename: str):
    for code_type in CppCodeType:
        remove_generated_code(dst_filename, code_type)


def perform_generation(
        cpp_header_definition_filename: str,
        dst_filename: str,
        code_type: CppCodeType,
        options: CodeStyleOptions
        ):

    assert os.path.isfile(cpp_header_definition_filename)
    assert os.path.isfile(dst_filename)

    fn_infos_extractors = {
        CppCodeType.STRUCT:      struct_parser.parse_struct_pydef,
        CppCodeType.ENUM_CPP_98: enum_parser.parse_enum_cpp_98_pydef,
        CppCodeType.FUNCTION:    function_parser.parse_function_declaration_pydef,
    }

    fn_code_generators = {
        CppCodeType.STRUCT:      struct_generator.generate_pydef_struct_cpp_code,
        CppCodeType.ENUM_CPP_98: enum_generator.generate_pydef_enum_cpp_98,
        CppCodeType.FUNCTION:    function_generator.generate_pydef_function_cpp_code,
    }
    

    whole_header_cpp_code = code_utils.read_text_file(cpp_header_definition_filename)

    pydef_codes = find_functions_structs_enums.find_functions_struct_or_enums(whole_header_cpp_code, code_type, options)

    fn_code_generator = fn_code_generators[code_type]
    fn_infos_extractor = fn_infos_extractors[code_type]

    generated_code = ""
    for pydef_code in pydef_codes:
        infos = fn_infos_extractor(pydef_code, options)
        generated_code += fn_code_generator(infos, options)


    flag_preserve_left_spaces = True
    code_utils.write_code_between_markers(
        dst_filename,
        code_marker_in(code_type),
        code_marker_out(code_type),
        generated_code,
        flag_preserve_left_spaces
    )
