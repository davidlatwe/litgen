#include "litgensample.h"

#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>

//#include <cstdint>
#include <stdint.h>

//#include "imgui_helper.hpp"
//#include "leaked_ptr.hpp"

void foo()
{
    int64_t r;
}

namespace py = pybind11;


void py_init_module_litgensample(py::module& m)
{
    using namespace LiterateGeneratorExample;

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <autogen:pydef_cpp> // Autogenerated code below! Do not edit!

    auto pyClassFoo = py::class_<Foo>
        (m, "Foo", 
        "A superb struct")

        .def(py::init<>()) 
        .def_readwrite("factor", &Foo::factor, "Multiplication factor")
        .def_readwrite("delta", &Foo::delta, "addition factor")

        .def("calc",
            [](Foo& self, int x)
            {
                return self.calc(x);
            },
            py::arg("x"),
            "Do some math"
        )

        ; 


    m.def("add",
        [](int a, int b)
        {
            return add(a, b);
        },
        py::arg("a"),
        py::arg("b"),
        "Adds two numbers"
    );


    m.def("add",
        [](int a, int b, int c)
        {
            return add(a, b, c);
        },
        py::arg("a"),
        py::arg("b"),
        py::arg("c"),
        "Adds three numbers, with a surprise"
    );


    m.def("add_inside_array",
        [](py::array & array, uint8_t number_to_add)
        {
            // convert array (py::array&) to C standard buffer
            uint8_t* array_buffer = (uint8_t*) array.data();
            int array_count = array.shape()[0];
                
            return add_inside_array(array_buffer, array_count, number_to_add);
        },
        py::arg("array"),
        py::arg("number_to_add"),
        "Modify an array by adding a value to its elements"
    );


    m.def("mul_inside_array",
        [](py::array & array, double factor)
        {
            // convert array (py::array&) to C standard buffer
            void* array_buffer = (void*) array.data();
            int array_count = array.shape()[0];

            printf("array.dtype().char_()=%c\n", array.dtype().char_());

            char array_type = array.dtype().char_();
            if (array_type == 'B')
                return mul_inside_array<uint8_t>((uint8_t *)array_buffer, array_count, factor);
            else if (array_type == 'b')
                return mul_inside_array<int8_t>((int8_t *)array_buffer, array_count, factor);
            else if (array_type == 'H')
                return mul_inside_array<uint16_t>((uint16_t *)array_buffer, array_count, factor);
            else if (array_type == 'h')
                return mul_inside_array<int16_t>((int16_t *)array_buffer, array_count, factor);
            else if (array_type == 'I')
                return mul_inside_array<uint32_t>((uint32_t *)array_buffer, array_count, factor);
            else if (array_type == 'i')
                return mul_inside_array<int32_t>((int32_t *)array_buffer, array_count, factor);
            else if (array_type == 'L')
                return mul_inside_array<uint64_t>((uint64_t *)array_buffer, array_count, factor);
            else if (array_type == 'l')
                return mul_inside_array<int64_t>((int64_t *)array_buffer, array_count, factor);
            else if (array_type == 'f')
                return mul_inside_array<float>((float *)array_buffer, array_count, factor);
            else if (array_type == 'd')
                return mul_inside_array<double>((double *)array_buffer, array_count, factor);
            else if (array_type == 'g')
                return mul_inside_array<long double>((long double *)array_buffer, array_count, factor);
            else
                throw std::runtime_error(std::string("mul_inside_array unexpected array type: ") + array_type);
        },
        py::arg("array"),
        py::arg("factor"),
        "Modify an array by adding a value to its elements"
    );


    m.def("sub",
        [](int a, int b)
        {
            return sub(a, b);
        },
        py::arg("a"),
        py::arg("b"),
        ""
    );


    m.def("mul",
        [](int a, int b)
        {
            return mul(a, b);
        },
        py::arg("a"),
        py::arg("b"),
        ""
    );


// </autogen:pydef_cpp> // Autogenerated code below! Do not edit!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

}