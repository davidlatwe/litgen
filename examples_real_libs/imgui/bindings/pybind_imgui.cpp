#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>

#include "imgui.h"
#include "imgui_internal.h"

namespace py = pybind11;


using namespace ImGui;

void py_init_module_imgui(py::module& m)
{

    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <autogen:pydef_cpp> // Autogenerated code below! Do not edit!

    auto pyClassImVec2 = py::class_<ImVec2>
        (m, "ImVec2", "")
        .def_readwrite("x", &ImVec2::x, "")
        .def_readwrite("y", &ImVec2::y, "")
        .def(py::init<>())
        .def(py::init<float, float>(),
            py::arg("_x"),
            py::arg("_y"))
        ; 



    auto pyClassImVec4 = py::class_<ImVec4>
        (m, "ImVec4", "ImVec4: 4D vector used to store clipping rectangles, colors etc. [Compile-time configurable type]")
        .def_readwrite("x", &ImVec4::x, "")
        .def_readwrite("y", &ImVec4::y, "")
        .def_readwrite("z", &ImVec4::z, "")
        .def_readwrite("w", &ImVec4::w, "")
        .def(py::init<>())
        .def(py::init<float, float, float, float>(),
            py::arg("_x"),
            py::arg("_y"),
            py::arg("_z"),
            py::arg("_w"))
        ; 



    // <namespace ImGui>
    m.def("create_context",    // :284
        [](ImFontAtlas * shared_font_atlas = NULL)
        {
            return CreateContext(shared_font_atlas);
        },
        py::arg("shared_font_atlas") = NULL,
        "Context creation and access\n- Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between contexts.\n- DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()\nfor each static/DLL boundary you are calling from. Read \"Context and Memory Allocators\" section of imgui.cpp for details."
    );

    m.def("destroy_context",    // :285
        [](ImGuiContext * ctx = NULL)
        {
            return DestroyContext(ctx);
        },
        py::arg("ctx") = NULL,
        "NULL = destroy current context"
    );

    m.def("get_current_context",    // :286
        []()
        {
            return GetCurrentContext();
        }
    );

    m.def("set_current_context",    // :287
        [](ImGuiContext * ctx)
        {
            return SetCurrentContext(ctx);
        },
        py::arg("ctx")
    );

    m.def("get_io",    // :290
        []()
        {
            return GetIO();
        },
        "access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)"
    );

    m.def("get_style",    // :291
        []()
        {
            return GetStyle();
        },
        "access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame!"
    );

    m.def("new_frame",    // :292
        []()
        {
            return NewFrame();
        },
        "start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame()."
    );

    m.def("end_frame",    // :293
        []()
        {
            return EndFrame();
        },
        "ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!"
    );

    m.def("render",    // :294
        []()
        {
            return Render();
        },
        "ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData()."
    );

    m.def("get_draw_data",    // :295
        []()
        {
            return GetDrawData();
        },
        "valid after Render() and until the next call to NewFrame(). this is what you have to render."
    );

    m.def("show_demo_window",    // :298
        [](bool * p_open = NULL)
        {
            return ShowDemoWindow(p_open);
        },
        py::arg("p_open") = NULL,
        "create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!"
    );

    m.def("show_metrics_window",    // :299
        [](bool * p_open = NULL)
        {
            return ShowMetricsWindow(p_open);
        },
        py::arg("p_open") = NULL,
        "create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc."
    );

    m.def("show_stack_tool_window",    // :300
        [](bool * p_open = NULL)
        {
            return ShowStackToolWindow(p_open);
        },
        py::arg("p_open") = NULL,
        "create Stack Tool window. hover items with mouse to query information about the source of their unique ID."
    );

    m.def("show_about_window",    // :301
        [](bool * p_open = NULL)
        {
            return ShowAboutWindow(p_open);
        },
        py::arg("p_open") = NULL,
        "create About window. display Dear ImGui version, credits and build/system information."
    );

    m.def("show_style_editor",    // :302
        [](ImGuiStyle * ref = NULL)
        {
            return ShowStyleEditor(ref);
        },
        py::arg("ref") = NULL,
        "add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)"
    );

    m.def("show_style_selector",    // :303
        [](const char * label)
        {
            return ShowStyleSelector(label);
        },
        py::arg("label"),
        "add style selector block (not a window), essentially a combo listing the default styles."
    );

    m.def("show_font_selector",    // :304
        [](const char * label)
        {
            return ShowFontSelector(label);
        },
        py::arg("label"),
        "add font selector block (not a window), essentially a combo listing the loaded fonts."
    );

    m.def("show_user_guide",    // :305
        []()
        {
            return ShowUserGuide();
        },
        "add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls)."
    );

    m.def("get_version",    // :306
        []()
        {
            return GetVersion();
        },
        "get the compiled version string e.g. \"1.80 WIP\" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)"
    );

    m.def("style_colors_dark",    // :309
        [](ImGuiStyle * dst = NULL)
        {
            return StyleColorsDark(dst);
        },
        py::arg("dst") = NULL,
        "new, recommended style (default)"
    );

    m.def("style_colors_light",    // :310
        [](ImGuiStyle * dst = NULL)
        {
            return StyleColorsLight(dst);
        },
        py::arg("dst") = NULL,
        "best used with borders and a custom, thicker font"
    );

    m.def("style_colors_classic",    // :311
        [](ImGuiStyle * dst = NULL)
        {
            return StyleColorsClassic(dst);
        },
        py::arg("dst") = NULL,
        "classic imgui style"
    );

    m.def("begin",    // :325
        [](const char * name, bool * p_open = NULL, ImGuiWindowFlags flags = 0)
        {
            return Begin(name, p_open, flags);
        },
        py::arg("name"),
        py::arg("p_open") = NULL,
        py::arg("flags") = 0,
        "Windows\n- Begin() = push window to the stack and start appending to it. End() = pop window from the stack.\n- Passing 'bool p_open != NULL' shows a window-closing widget in the upper-right corner of the window,\nwhich clicking will set the boolean to False when clicked.\n- You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.\nSome information such as 'flags' or 'p_open' will only be considered by the first call to Begin().\n- Begin() return False to indicate the window is collapsed or fully clipped, so you may early out and omit submitting\nanything to the window. Always call a matching End() for each Begin() call, regardless of its return value!\n[Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,\nBeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function\nreturned True. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]\n- Note that the bottom of window stack always contains a window called \"Debug\"."
    );

    m.def("end",    // :326
        []()
        {
            return End();
        }
    );

    m.def("begin_child",    // :336
        [](const char * str_id, const ImVec2 & size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0)
        {
            return BeginChild(str_id, size, border, flags);
        },
        py::arg("str_id"),
        py::arg("size") = ImVec2(0, 0),
        py::arg("border") = false,
        py::arg("flags") = 0,
        "Child Windows\n- Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.\n- For each independent axis of 'size': ==0.0f: use remaining host window size / >0.0f: fixed size / <0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).\n- BeginChild() returns False to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.\nAlways call a matching EndChild() for each BeginChild() call, regardless of its return value.\n[Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,\nBeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function\nreturned True. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]"
    );

    m.def("begin_child",    // :337
        [](ImGuiID id, const ImVec2 & size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0)
        {
            return BeginChild(id, size, border, flags);
        },
        py::arg("id"),
        py::arg("size") = ImVec2(0, 0),
        py::arg("border") = false,
        py::arg("flags") = 0
    );

    m.def("end_child",    // :338
        []()
        {
            return EndChild();
        }
    );

    m.def("is_window_appearing",    // :342
        []()
        {
            return IsWindowAppearing();
        },
        "Windows Utilities\n- 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into."
    );

    m.def("is_window_collapsed",    // :343
        []()
        {
            return IsWindowCollapsed();
        }
    );

    m.def("is_window_focused",    // :344
        [](ImGuiFocusedFlags flags = 0)
        {
            return IsWindowFocused(flags);
        },
        py::arg("flags") = 0,
        "is current window focused? or its root/child, depending on flags. see flags for options."
    );

    m.def("is_window_hovered",    // :345
        [](ImGuiHoveredFlags flags = 0)
        {
            return IsWindowHovered(flags);
        },
        py::arg("flags") = 0,
        "is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!"
    );

    m.def("get_window_draw_list",    // :346
        []()
        {
            return GetWindowDrawList();
        },
        "get draw list associated to the current window, to append your own drawing primitives"
    );

    m.def("get_window_pos",    // :347
        []()
        {
            return GetWindowPos();
        },
        "get current window position in screen space (useful if you want to do your own drawing via the DrawList API)"
    );

    m.def("get_window_size",    // :348
        []()
        {
            return GetWindowSize();
        },
        "get current window size"
    );

    m.def("get_window_width",    // :349
        []()
        {
            return GetWindowWidth();
        },
        "get current window width (shortcut for GetWindowSize().x)"
    );

    m.def("get_window_height",    // :350
        []()
        {
            return GetWindowHeight();
        },
        "get current window height (shortcut for GetWindowSize().y)"
    );

    m.def("set_next_window_pos",    // :354
        [](const ImVec2 & pos, ImGuiCond cond = 0, const ImVec2 & pivot = ImVec2(0, 0))
        {
            return SetNextWindowPos(pos, cond, pivot);
        },
        py::arg("pos"),
        py::arg("cond") = 0,
        py::arg("pivot") = ImVec2(0, 0),
        "set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc."
    );

    m.def("set_next_window_size",    // :355
        [](const ImVec2 & size, ImGuiCond cond = 0)
        {
            return SetNextWindowSize(size, cond);
        },
        py::arg("size"),
        py::arg("cond") = 0,
        "set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()"
    );

    m.def("set_next_window_size_constraints",    // :356
        [](const ImVec2 & size_min, const ImVec2 & size_max, ImGuiSizeCallback custom_callback = NULL, void * custom_callback_data = NULL)
        {
            return SetNextWindowSizeConstraints(size_min, size_max, custom_callback, custom_callback_data);
        },
        py::arg("size_min"),
        py::arg("size_max"),
        py::arg("custom_callback") = NULL,
        py::arg("custom_callback_data") = NULL,
        "set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints."
    );

    m.def("set_next_window_content_size",    // :357
        [](const ImVec2 & size)
        {
            return SetNextWindowContentSize(size);
        },
        py::arg("size"),
        "set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()"
    );

    m.def("set_next_window_collapsed",    // :358
        [](bool collapsed, ImGuiCond cond = 0)
        {
            return SetNextWindowCollapsed(collapsed, cond);
        },
        py::arg("collapsed"),
        py::arg("cond") = 0,
        "set next window collapsed state. call before Begin()"
    );

    m.def("set_next_window_focus",    // :359
        []()
        {
            return SetNextWindowFocus();
        },
        "set next window to be focused / top-most. call before Begin()"
    );

    m.def("set_next_window_bg_alpha",    // :360
        [](float alpha)
        {
            return SetNextWindowBgAlpha(alpha);
        },
        py::arg("alpha"),
        "set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground."
    );

    m.def("set_window_pos",    // :361
        [](const ImVec2 & pos, ImGuiCond cond = 0)
        {
            return SetWindowPos(pos, cond);
        },
        py::arg("pos"),
        py::arg("cond") = 0,
        "(not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects."
    );

    m.def("set_window_size",    // :362
        [](const ImVec2 & size, ImGuiCond cond = 0)
        {
            return SetWindowSize(size, cond);
        },
        py::arg("size"),
        py::arg("cond") = 0,
        "(not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects."
    );

    m.def("set_window_collapsed",    // :363
        [](bool collapsed, ImGuiCond cond = 0)
        {
            return SetWindowCollapsed(collapsed, cond);
        },
        py::arg("collapsed"),
        py::arg("cond") = 0,
        "(not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed()."
    );

    m.def("set_window_focus",    // :364
        []()
        {
            return SetWindowFocus();
        },
        "(not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus()."
    );

    m.def("set_window_font_scale",    // :365
        [](float scale)
        {
            return SetWindowFontScale(scale);
        },
        py::arg("scale"),
        "[OBSOLETE] set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes()."
    );

    m.def("set_window_pos",    // :366
        [](const char * name, const ImVec2 & pos, ImGuiCond cond = 0)
        {
            return SetWindowPos(name, pos, cond);
        },
        py::arg("name"),
        py::arg("pos"),
        py::arg("cond") = 0,
        "set named window position."
    );

    m.def("set_window_size",    // :367
        [](const char * name, const ImVec2 & size, ImGuiCond cond = 0)
        {
            return SetWindowSize(name, size, cond);
        },
        py::arg("name"),
        py::arg("size"),
        py::arg("cond") = 0,
        "set named window size. set axis to 0.0f to force an auto-fit on this axis."
    );

    m.def("set_window_collapsed",    // :368
        [](const char * name, bool collapsed, ImGuiCond cond = 0)
        {
            return SetWindowCollapsed(name, collapsed, cond);
        },
        py::arg("name"),
        py::arg("collapsed"),
        py::arg("cond") = 0,
        "set named window collapsed state"
    );

    m.def("set_window_focus",    // :369
        [](const char * name)
        {
            return SetWindowFocus(name);
        },
        py::arg("name"),
        "set named window to be focused / top-most. use NULL to remove focus."
    );

    m.def("get_content_region_avail",    // :374
        []()
        {
            return GetContentRegionAvail();
        },
        "== GetContentRegionMax() - GetCursorPos()"
    );

    m.def("get_content_region_max",    // :375
        []()
        {
            return GetContentRegionMax();
        },
        "current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates"
    );

    m.def("get_window_content_region_min",    // :376
        []()
        {
            return GetWindowContentRegionMin();
        },
        "content boundaries min for the full window (roughly (0,0)-Scroll), in window coordinates"
    );

    m.def("get_window_content_region_max",    // :377
        []()
        {
            return GetWindowContentRegionMax();
        },
        "content boundaries max for the full window (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates"
    );

    m.def("get_scroll_x",    // :380
        []()
        {
            return GetScrollX();
        },
        "get scrolling amount [0 .. GetScrollMaxX()]"
    );

    m.def("get_scroll_y",    // :381
        []()
        {
            return GetScrollY();
        },
        "get scrolling amount [0 .. GetScrollMaxY()]"
    );

    m.def("set_scroll_x",    // :382
        [](float scroll_x)
        {
            return SetScrollX(scroll_x);
        },
        py::arg("scroll_x"),
        "set scrolling amount [0 .. GetScrollMaxX()]"
    );

    m.def("set_scroll_y",    // :383
        [](float scroll_y)
        {
            return SetScrollY(scroll_y);
        },
        py::arg("scroll_y"),
        "set scrolling amount [0 .. GetScrollMaxY()]"
    );

    m.def("get_scroll_max_x",    // :384
        []()
        {
            return GetScrollMaxX();
        },
        "get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x"
    );

    m.def("get_scroll_max_y",    // :385
        []()
        {
            return GetScrollMaxY();
        },
        "get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y"
    );

    m.def("set_scroll_here_x",    // :386
        [](float center_x_ratio = 0.5f)
        {
            return SetScrollHereX(center_x_ratio);
        },
        py::arg("center_x_ratio") = 0.5f,
        "adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead."
    );

    m.def("set_scroll_here_y",    // :387
        [](float center_y_ratio = 0.5f)
        {
            return SetScrollHereY(center_y_ratio);
        },
        py::arg("center_y_ratio") = 0.5f,
        "adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead."
    );

    m.def("set_scroll_from_pos_x",    // :388
        [](float local_x, float center_x_ratio = 0.5f)
        {
            return SetScrollFromPosX(local_x, center_x_ratio);
        },
        py::arg("local_x"),
        py::arg("center_x_ratio") = 0.5f,
        "adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position."
    );

    m.def("set_scroll_from_pos_y",    // :389
        [](float local_y, float center_y_ratio = 0.5f)
        {
            return SetScrollFromPosY(local_y, center_y_ratio);
        },
        py::arg("local_y"),
        py::arg("center_y_ratio") = 0.5f,
        "adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position."
    );

    m.def("push_font",    // :392
        [](ImFont * font)
        {
            return PushFont(font);
        },
        py::arg("font"),
        "use NULL as a shortcut to push default font"
    );

    m.def("pop_font",    // :393
        []()
        {
            return PopFont();
        }
    );

    m.def("push_style_color",    // :394
        [](ImGuiCol idx, ImU32 col)
        {
            return PushStyleColor(idx, col);
        },
        py::arg("idx"),
        py::arg("col"),
        "modify a style color. always use this if you modify the style after NewFrame()."
    );

    m.def("push_style_color",    // :395
        [](ImGuiCol idx, const ImVec4 & col)
        {
            return PushStyleColor(idx, col);
        },
        py::arg("idx"),
        py::arg("col")
    );

    m.def("pop_style_color",    // :396
        [](int count = 1)
        {
            return PopStyleColor(count);
        },
        py::arg("count") = 1
    );

    m.def("push_style_var",    // :397
        [](ImGuiStyleVar idx, float val)
        {
            return PushStyleVar(idx, val);
        },
        py::arg("idx"),
        py::arg("val"),
        "modify a style float variable. always use this if you modify the style after NewFrame()."
    );

    m.def("push_style_var",    // :398
        [](ImGuiStyleVar idx, const ImVec2 & val)
        {
            return PushStyleVar(idx, val);
        },
        py::arg("idx"),
        py::arg("val"),
        "modify a style ImVec2 variable. always use this if you modify the style after NewFrame()."
    );

    m.def("pop_style_var",    // :399
        [](int count = 1)
        {
            return PopStyleVar(count);
        },
        py::arg("count") = 1
    );

    m.def("push_allow_keyboard_focus",    // :400
        [](bool allow_keyboard_focus)
        {
            return PushAllowKeyboardFocus(allow_keyboard_focus);
        },
        py::arg("allow_keyboard_focus"),
        "== tab stop enable. Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets"
    );

    m.def("pop_allow_keyboard_focus",    // :401
        []()
        {
            return PopAllowKeyboardFocus();
        }
    );

    m.def("push_button_repeat",    // :402
        [](bool repeat)
        {
            return PushButtonRepeat(repeat);
        },
        py::arg("repeat"),
        "in 'repeat' mode, Button() functions return repeated True in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame."
    );

    m.def("pop_button_repeat",    // :403
        []()
        {
            return PopButtonRepeat();
        }
    );

    m.def("push_item_width",    // :406
        [](float item_width)
        {
            return PushItemWidth(item_width);
        },
        py::arg("item_width"),
        "push width of items for common large \"item+label\" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)."
    );

    m.def("pop_item_width",    // :407
        []()
        {
            return PopItemWidth();
        }
    );

    m.def("set_next_item_width",    // :408
        [](float item_width)
        {
            return SetNextItemWidth(item_width);
        },
        py::arg("item_width"),
        "set width of the _next_ common large \"item+label\" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)"
    );

    m.def("calc_item_width",    // :409
        []()
        {
            return CalcItemWidth();
        },
        "width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions."
    );

    m.def("push_text_wrap_pos",    // :410
        [](float wrap_local_pos_x = 0.0f)
        {
            return PushTextWrapPos(wrap_local_pos_x);
        },
        py::arg("wrap_local_pos_x") = 0.0f,
        "push word-wrapping position for Text() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space"
    );

    m.def("pop_text_wrap_pos",    // :411
        []()
        {
            return PopTextWrapPos();
        }
    );

    m.def("get_font",    // :415
        []()
        {
            return GetFont();
        },
        "get current font"
    );

    m.def("get_font_size",    // :416
        []()
        {
            return GetFontSize();
        },
        "get current font size (= height in pixels) of current font with current scale applied"
    );

    m.def("get_font_tex_uv_white_pixel",    // :417
        []()
        {
            return GetFontTexUvWhitePixel();
        },
        "get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API"
    );

    m.def("get_color_u32",    // :418
        [](ImGuiCol idx, float alpha_mul = 1.0f)
        {
            return GetColorU32(idx, alpha_mul);
        },
        py::arg("idx"),
        py::arg("alpha_mul") = 1.0f,
        "retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList"
    );

    m.def("get_color_u32",    // :419
        [](const ImVec4 & col)
        {
            return GetColorU32(col);
        },
        py::arg("col"),
        "retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList"
    );

    m.def("get_color_u32",    // :420
        [](ImU32 col)
        {
            return GetColorU32(col);
        },
        py::arg("col"),
        "retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList"
    );

    m.def("get_style_color_vec4",    // :421
        [](ImGuiCol idx)
        {
            return GetStyleColorVec4(idx);
        },
        py::arg("idx"),
        "retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in."
    );

    m.def("separator",    // :430
        []()
        {
            return Separator();
        },
        "separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator."
    );

    m.def("same_line",    // :431
        [](float offset_from_start_x = 0.0f, float spacing = -1.0f)
        {
            return SameLine(offset_from_start_x, spacing);
        },
        py::arg("offset_from_start_x") = 0.0f,
        py::arg("spacing") = -1.0f,
        "call between widgets or groups to layout them horizontally. X position given in window coordinates."
    );

    m.def("new_line",    // :432
        []()
        {
            return NewLine();
        },
        "undo a SameLine() or force a new line when in an horizontal-layout context."
    );

    m.def("spacing",    // :433
        []()
        {
            return Spacing();
        },
        "add vertical spacing."
    );

    m.def("dummy",    // :434
        [](const ImVec2 & size)
        {
            return Dummy(size);
        },
        py::arg("size"),
        "add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into."
    );

    m.def("indent",    // :435
        [](float indent_w = 0.0f)
        {
            return Indent(indent_w);
        },
        py::arg("indent_w") = 0.0f,
        "move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0"
    );

    m.def("unindent",    // :436
        [](float indent_w = 0.0f)
        {
            return Unindent(indent_w);
        },
        py::arg("indent_w") = 0.0f,
        "move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0"
    );

    m.def("begin_group",    // :437
        []()
        {
            return BeginGroup();
        },
        "lock horizontal starting position"
    );

    m.def("end_group",    // :438
        []()
        {
            return EndGroup();
        },
        "unlock horizontal starting position + capture the whole group bounding box into one \"item\" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)"
    );

    m.def("get_cursor_pos",    // :439
        []()
        {
            return GetCursorPos();
        },
        "cursor position in window coordinates (relative to window position)"
    );

    m.def("get_cursor_pos_x",    // :440
        []()
        {
            return GetCursorPosX();
        },
        "  (some functions are using window-relative coordinates, such as: GetCursorPos, GetCursorStartPos, GetContentRegionMax, GetWindowContentRegion etc."
    );

    m.def("get_cursor_pos_y",    // :441
        []()
        {
            return GetCursorPosY();
        },
        "   other functions such as GetCursorScreenPos or everything in ImDrawList::"
    );

    m.def("set_cursor_pos",    // :442
        [](const ImVec2 & local_pos)
        {
            return SetCursorPos(local_pos);
        },
        py::arg("local_pos"),
        "   are using the main, absolute coordinate system."
    );

    m.def("set_cursor_pos_x",    // :443
        [](float local_x)
        {
            return SetCursorPosX(local_x);
        },
        py::arg("local_x"),
        "   GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)"
    );

    m.def("set_cursor_pos_y",    // :444
        [](float local_y)
        {
            return SetCursorPosY(local_y);
        },
        py::arg("local_y")
    );

    m.def("get_cursor_start_pos",    // :445
        []()
        {
            return GetCursorStartPos();
        },
        "initial cursor position in window coordinates"
    );

    m.def("get_cursor_screen_pos",    // :446
        []()
        {
            return GetCursorScreenPos();
        },
        "cursor position in absolute coordinates (useful to work with ImDrawList API). generally top-left == GetMainViewport()->Pos == (0,0) in single viewport mode, and bottom-right == GetMainViewport()->Pos+Size == io.DisplaySize in single-viewport mode."
    );

    m.def("set_cursor_screen_pos",    // :447
        [](const ImVec2 & pos)
        {
            return SetCursorScreenPos(pos);
        },
        py::arg("pos"),
        "cursor position in absolute coordinates"
    );

    m.def("align_text_to_frame_padding",    // :448
        []()
        {
            return AlignTextToFramePadding();
        },
        "vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)"
    );

    m.def("get_text_line_height",    // :449
        []()
        {
            return GetTextLineHeight();
        },
        "~ FontSize"
    );

    m.def("get_text_line_height_with_spacing",    // :450
        []()
        {
            return GetTextLineHeightWithSpacing();
        },
        "~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)"
    );

    m.def("get_frame_height",    // :451
        []()
        {
            return GetFrameHeight();
        },
        "~ FontSize + style.FramePadding.y  2"
    );

    m.def("get_frame_height_with_spacing",    // :452
        []()
        {
            return GetFrameHeightWithSpacing();
        },
        "~ FontSize + style.FramePadding.y  2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)"
    );

    m.def("push_id",    // :465
        [](const char * str_id)
        {
            return PushID(str_id);
        },
        py::arg("str_id"),
        "push string into the ID stack (will hash string)."
    );

    m.def("push_id",    // :466
        [](const char * str_id_begin, const char * str_id_end)
        {
            return PushID(str_id_begin, str_id_end);
        },
        py::arg("str_id_begin"),
        py::arg("str_id_end"),
        "push string into the ID stack (will hash string)."
    );

    m.def("push_id",    // :467
        [](const void * ptr_id)
        {
            return PushID(ptr_id);
        },
        py::arg("ptr_id"),
        "push pointer into the ID stack (will hash pointer)."
    );

    m.def("push_id",    // :468
        [](int int_id)
        {
            return PushID(int_id);
        },
        py::arg("int_id"),
        "push integer into the ID stack (will hash integer)."
    );

    m.def("pop_id",    // :469
        []()
        {
            return PopID();
        },
        "pop from the ID stack."
    );

    m.def("get_id",    // :470
        [](const char * str_id)
        {
            return GetID(str_id);
        },
        py::arg("str_id"),
        "calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself"
    );

    m.def("get_id",    // :471
        [](const char * str_id_begin, const char * str_id_end)
        {
            return GetID(str_id_begin, str_id_end);
        },
        py::arg("str_id_begin"),
        py::arg("str_id_end")
    );

    m.def("get_id",    // :472
        [](const void * ptr_id)
        {
            return GetID(ptr_id);
        },
        py::arg("ptr_id")
    );

    m.def("text_unformatted",    // :475
        [](const char * text, const char * text_end = NULL)
        {
            return TextUnformatted(text, text_end);
        },
        py::arg("text"),
        py::arg("text_end") = NULL,
        "raw text without formatting. Roughly equivalent to Text(\"%s\", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for int chunks of text."
    );

    m.def("text",    // :476
        [](const char * fmt)
        {
            return Text("%s", fmt);
        },
        py::arg("fmt"),
        "formatted text"
    );

    m.def("text_v",    // :477
        [](const char * fmt, va_list args)
        {
            return TextV(fmt, args);
        },
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("text_colored",    // :478
        [](const ImVec4 & col, const char * fmt)
        {
            return TextColored(col, "%s", fmt);
        },
        py::arg("col"),
        py::arg("fmt"),
        "shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();"
    );

    m.def("text_colored_v",    // :479
        [](const ImVec4 & col, const char * fmt, va_list args)
        {
            return TextColoredV(col, fmt, args);
        },
        py::arg("col"),
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("text_disabled",    // :480
        [](const char * fmt)
        {
            return TextDisabled("%s", fmt);
        },
        py::arg("fmt"),
        "shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();"
    );

    m.def("text_disabled_v",    // :481
        [](const char * fmt, va_list args)
        {
            return TextDisabledV(fmt, args);
        },
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("text_wrapped",    // :482
        [](const char * fmt)
        {
            return TextWrapped("%s", fmt);
        },
        py::arg("fmt"),
        "shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize()."
    );

    m.def("text_wrapped_v",    // :483
        [](const char * fmt, va_list args)
        {
            return TextWrappedV(fmt, args);
        },
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("label_text",    // :484
        [](const char * label, const char * fmt)
        {
            return LabelText(label, "%s", fmt);
        },
        py::arg("label"),
        py::arg("fmt"),
        "display text+label aligned the same way as value+label widgets"
    );

    m.def("label_text_v",    // :485
        [](const char * label, const char * fmt, va_list args)
        {
            return LabelTextV(label, fmt, args);
        },
        py::arg("label"),
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("bullet_text",    // :486
        [](const char * fmt)
        {
            return BulletText("%s", fmt);
        },
        py::arg("fmt"),
        "shortcut for Bullet()+Text()"
    );

    m.def("bullet_text_v",    // :487
        [](const char * fmt, va_list args)
        {
            return BulletTextV(fmt, args);
        },
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("button",    // :492
        [](const char * label, const ImVec2 & size = ImVec2(0, 0))
        {
            return Button(label, size);
        },
        py::arg("label"),
        py::arg("size") = ImVec2(0, 0),
        "button"
    );

    m.def("small_button",    // :493
        [](const char * label)
        {
            return SmallButton(label);
        },
        py::arg("label"),
        "button with FramePadding=(0,0) to easily embed within text"
    );

    m.def("invisible_button",    // :494
        [](const char * str_id, const ImVec2 & size, ImGuiButtonFlags flags = 0)
        {
            return InvisibleButton(str_id, size, flags);
        },
        py::arg("str_id"),
        py::arg("size"),
        py::arg("flags") = 0,
        "flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)"
    );

    m.def("arrow_button",    // :495
        [](const char * str_id, ImGuiDir dir)
        {
            return ArrowButton(str_id, dir);
        },
        py::arg("str_id"),
        py::arg("dir"),
        "square button with an arrow shape"
    );

    m.def("image",    // :496
        [](ImTextureID user_texture_id, const ImVec2 & size, const ImVec2 & uv0 = ImVec2(0, 0), const ImVec2 & uv1 = ImVec2(1,1), const ImVec4 & tint_col = ImVec4(1,1,1,1), const ImVec4 & border_col = ImVec4(0,0,0,0))
        {
            return Image(user_texture_id, size, uv0, uv1, tint_col, border_col);
        },
        py::arg("user_texture_id"),
        py::arg("size"),
        py::arg("uv0") = ImVec2(0, 0),
        py::arg("uv1") = ImVec2(1,1),
        py::arg("tint_col") = ImVec4(1,1,1,1),
        py::arg("border_col") = ImVec4(0,0,0,0)
    );

    m.def("image_button",    // :497
        [](ImTextureID user_texture_id, const ImVec2 & size, const ImVec2 & uv0 = ImVec2(0, 0), const ImVec2 & uv1 = ImVec2(1,1), int frame_padding = -1, const ImVec4 & bg_col = ImVec4(0,0,0,0), const ImVec4 & tint_col = ImVec4(1,1,1,1))
        {
            return ImageButton(user_texture_id, size, uv0, uv1, frame_padding, bg_col, tint_col);
        },
        py::arg("user_texture_id"),
        py::arg("size"),
        py::arg("uv0") = ImVec2(0, 0),
        py::arg("uv1") = ImVec2(1,1),
        py::arg("frame_padding") = -1,
        py::arg("bg_col") = ImVec4(0,0,0,0),
        py::arg("tint_col") = ImVec4(1,1,1,1),
        "<0 frame_padding uses default frame padding settings. 0 for no padding"
    );

    m.def("checkbox",    // :498
        [](const char * label, bool * v)
        {
            return Checkbox(label, v);
        },
        py::arg("label"),
        py::arg("v")
    );

    m.def("checkbox_flags",    // :499
        [](const char * label, int * flags, int flags_value)
        {
            return CheckboxFlags(label, flags, flags_value);
        },
        py::arg("label"),
        py::arg("flags"),
        py::arg("flags_value")
    );

    m.def("checkbox_flags",    // :500
        [](const char * label, unsigned int * flags, unsigned int flags_value)
        {
            return CheckboxFlags(label, flags, flags_value);
        },
        py::arg("label"),
        py::arg("flags"),
        py::arg("flags_value")
    );

    m.def("radio_button",    // :501
        [](const char * label, bool active)
        {
            return RadioButton(label, active);
        },
        py::arg("label"),
        py::arg("active"),
        "use with e.g. if (RadioButton(\"one\", my_value==1)) { my_value = 1; }"
    );

    m.def("radio_button",    // :502
        [](const char * label, int * v, int v_button)
        {
            return RadioButton(label, v, v_button);
        },
        py::arg("label"),
        py::arg("v"),
        py::arg("v_button"),
        "shortcut to handle the above pattern when value is an integer"
    );

    m.def("progress_bar",    // :503
        [](float fraction, const ImVec2 & size_arg = ImVec2(-FLT_MIN, 0), const char * overlay = NULL)
        {
            return ProgressBar(fraction, size_arg, overlay);
        },
        py::arg("fraction"),
        py::arg("size_arg") = ImVec2(-FLT_MIN, 0),
        py::arg("overlay") = NULL
    );

    m.def("bullet",    // :504
        []()
        {
            return Bullet();
        },
        "draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses"
    );

    m.def("begin_combo",    // :509
        [](const char * label, const char * preview_value, ImGuiComboFlags flags = 0)
        {
            return BeginCombo(label, preview_value, flags);
        },
        py::arg("label"),
        py::arg("preview_value"),
        py::arg("flags") = 0,
        "Widgets: Combo Box\n- The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.\n- The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose. This is analogous to how ListBox are created."
    );

    m.def("end_combo",    // :510
        []()
        {
            return EndCombo();
        },
        "only call EndCombo() if BeginCombo() returns True!"
    );

    m.def("combo",    // :511
        [](const char * label, int * current_item, const char * const items[], int items_count, int popup_max_height_in_items = -1)
        {
            return Combo(label, current_item, items[], items_count, popup_max_height_in_items);
        },
        py::arg("label"),
        py::arg("current_item"),
        py::arg("items[]"),
        py::arg("items_count"),
        py::arg("popup_max_height_in_items") = -1
    );

    m.def("combo",    // :512
        [](const char * label, int * current_item, const char * items_separated_by_zeros, int popup_max_height_in_items = -1)
        {
            return Combo(label, current_item, items_separated_by_zeros, popup_max_height_in_items);
        },
        py::arg("label"),
        py::arg("current_item"),
        py::arg("items_separated_by_zeros"),
        py::arg("popup_max_height_in_items") = -1,
        "Separate items with \0 within a string, end item-list with \0\0. e.g. \"One\0Two\0Three\0\""
    );

    m.def("drag_float",    // :527
        [](const char * label, float * v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0)
        {
            return DragFloat(label, v, v_speed, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v"),
        py::arg("v_speed") = 1.0f,
        py::arg("v_min") = 0.0f,
        py::arg("v_max") = 0.0f,
        py::arg("format") = "%.3f",
        py::arg("flags") = 0,
        "If v_min >= v_max we have no bound"
    );

    m.def("drag_float2",    // :528
        [](const char * label, float v[2], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0)
        {
            return DragFloat2(label, v[2], v_speed, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[2]"),
        py::arg("v_speed") = 1.0f,
        py::arg("v_min") = 0.0f,
        py::arg("v_max") = 0.0f,
        py::arg("format") = "%.3f",
        py::arg("flags") = 0
    );

    m.def("drag_float3",    // :529
        [](const char * label, float v[3], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0)
        {
            return DragFloat3(label, v[3], v_speed, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[3]"),
        py::arg("v_speed") = 1.0f,
        py::arg("v_min") = 0.0f,
        py::arg("v_max") = 0.0f,
        py::arg("format") = "%.3f",
        py::arg("flags") = 0
    );

    m.def("drag_float4",    // :530
        [](const char * label, float v[4], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0)
        {
            return DragFloat4(label, v[4], v_speed, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[4]"),
        py::arg("v_speed") = 1.0f,
        py::arg("v_min") = 0.0f,
        py::arg("v_max") = 0.0f,
        py::arg("format") = "%.3f",
        py::arg("flags") = 0
    );

    m.def("drag_float_range2",    // :531
        [](const char * label, float * v_current_min, float * v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", const char * format_max = NULL, ImGuiSliderFlags flags = 0)
        {
            return DragFloatRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
        },
        py::arg("label"),
        py::arg("v_current_min"),
        py::arg("v_current_max"),
        py::arg("v_speed") = 1.0f,
        py::arg("v_min") = 0.0f,
        py::arg("v_max") = 0.0f,
        py::arg("format") = "%.3f",
        py::arg("format_max") = NULL,
        py::arg("flags") = 0
    );

    m.def("drag_int",    // :532
        [](const char * label, int * v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0)
        {
            return DragInt(label, v, v_speed, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v"),
        py::arg("v_speed") = 1.0f,
        py::arg("v_min") = 0,
        py::arg("v_max") = 0,
        py::arg("format") = "%d",
        py::arg("flags") = 0,
        "If v_min >= v_max we have no bound"
    );

    m.def("drag_int2",    // :533
        [](const char * label, int v[2], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0)
        {
            return DragInt2(label, v[2], v_speed, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[2]"),
        py::arg("v_speed") = 1.0f,
        py::arg("v_min") = 0,
        py::arg("v_max") = 0,
        py::arg("format") = "%d",
        py::arg("flags") = 0
    );

    m.def("drag_int3",    // :534
        [](const char * label, int v[3], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0)
        {
            return DragInt3(label, v[3], v_speed, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[3]"),
        py::arg("v_speed") = 1.0f,
        py::arg("v_min") = 0,
        py::arg("v_max") = 0,
        py::arg("format") = "%d",
        py::arg("flags") = 0
    );

    m.def("drag_int4",    // :535
        [](const char * label, int v[4], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0)
        {
            return DragInt4(label, v[4], v_speed, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[4]"),
        py::arg("v_speed") = 1.0f,
        py::arg("v_min") = 0,
        py::arg("v_max") = 0,
        py::arg("format") = "%d",
        py::arg("flags") = 0
    );

    m.def("drag_int_range2",    // :536
        [](const char * label, int * v_current_min, int * v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", const char * format_max = NULL, ImGuiSliderFlags flags = 0)
        {
            return DragIntRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
        },
        py::arg("label"),
        py::arg("v_current_min"),
        py::arg("v_current_max"),
        py::arg("v_speed") = 1.0f,
        py::arg("v_min") = 0,
        py::arg("v_max") = 0,
        py::arg("format") = "%d",
        py::arg("format_max") = NULL,
        py::arg("flags") = 0
    );

    m.def("drag_scalar",    // :537
        [](const char * label, ImGuiDataType data_type, void * p_data, float v_speed = 1.0f, const void * p_min = NULL, const void * p_max = NULL, const char * format = NULL, ImGuiSliderFlags flags = 0)
        {
            return DragScalar(label, data_type, p_data, v_speed, p_min, p_max, format, flags);
        },
        py::arg("label"),
        py::arg("data_type"),
        py::arg("p_data"),
        py::arg("v_speed") = 1.0f,
        py::arg("p_min") = NULL,
        py::arg("p_max") = NULL,
        py::arg("format") = NULL,
        py::arg("flags") = 0
    );

    m.def("drag_scalar_n",    // :538
        [](const char * label, ImGuiDataType data_type, void * p_data, int components, float v_speed = 1.0f, const void * p_min = NULL, const void * p_max = NULL, const char * format = NULL, ImGuiSliderFlags flags = 0)
        {
            return DragScalarN(label, data_type, p_data, components, v_speed, p_min, p_max, format, flags);
        },
        py::arg("label"),
        py::arg("data_type"),
        py::arg("p_data"),
        py::arg("components"),
        py::arg("v_speed") = 1.0f,
        py::arg("p_min") = NULL,
        py::arg("p_max") = NULL,
        py::arg("format") = NULL,
        py::arg("flags") = 0
    );

    m.def("slider_float",    // :546
        [](const char * label, float * v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0)
        {
            return SliderFloat(label, v, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v"),
        py::arg("v_min"),
        py::arg("v_max"),
        py::arg("format") = "%.3f",
        py::arg("flags") = 0,
        "adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display."
    );

    m.def("slider_float2",    // :547
        [](const char * label, float v[2], float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0)
        {
            return SliderFloat2(label, v[2], v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[2]"),
        py::arg("v_min"),
        py::arg("v_max"),
        py::arg("format") = "%.3f",
        py::arg("flags") = 0
    );

    m.def("slider_float3",    // :548
        [](const char * label, float v[3], float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0)
        {
            return SliderFloat3(label, v[3], v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[3]"),
        py::arg("v_min"),
        py::arg("v_max"),
        py::arg("format") = "%.3f",
        py::arg("flags") = 0
    );

    m.def("slider_float4",    // :549
        [](const char * label, float v[4], float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0)
        {
            return SliderFloat4(label, v[4], v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[4]"),
        py::arg("v_min"),
        py::arg("v_max"),
        py::arg("format") = "%.3f",
        py::arg("flags") = 0
    );

    m.def("slider_angle",    // :550
        [](const char * label, float * v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char * format = "%.0f deg", ImGuiSliderFlags flags = 0)
        {
            return SliderAngle(label, v_rad, v_degrees_min, v_degrees_max, format, flags);
        },
        py::arg("label"),
        py::arg("v_rad"),
        py::arg("v_degrees_min") = -360.0f,
        py::arg("v_degrees_max") = +360.0f,
        py::arg("format") = "%.0f deg",
        py::arg("flags") = 0
    );

    m.def("slider_int",    // :551
        [](const char * label, int * v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0)
        {
            return SliderInt(label, v, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v"),
        py::arg("v_min"),
        py::arg("v_max"),
        py::arg("format") = "%d",
        py::arg("flags") = 0
    );

    m.def("slider_int2",    // :552
        [](const char * label, int v[2], int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0)
        {
            return SliderInt2(label, v[2], v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[2]"),
        py::arg("v_min"),
        py::arg("v_max"),
        py::arg("format") = "%d",
        py::arg("flags") = 0
    );

    m.def("slider_int3",    // :553
        [](const char * label, int v[3], int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0)
        {
            return SliderInt3(label, v[3], v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[3]"),
        py::arg("v_min"),
        py::arg("v_max"),
        py::arg("format") = "%d",
        py::arg("flags") = 0
    );

    m.def("slider_int4",    // :554
        [](const char * label, int v[4], int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0)
        {
            return SliderInt4(label, v[4], v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("v[4]"),
        py::arg("v_min"),
        py::arg("v_max"),
        py::arg("format") = "%d",
        py::arg("flags") = 0
    );

    m.def("slider_scalar",    // :555
        [](const char * label, ImGuiDataType data_type, void * p_data, const void * p_min, const void * p_max, const char * format = NULL, ImGuiSliderFlags flags = 0)
        {
            return SliderScalar(label, data_type, p_data, p_min, p_max, format, flags);
        },
        py::arg("label"),
        py::arg("data_type"),
        py::arg("p_data"),
        py::arg("p_min"),
        py::arg("p_max"),
        py::arg("format") = NULL,
        py::arg("flags") = 0
    );

    m.def("slider_scalar_n",    // :556
        [](const char * label, ImGuiDataType data_type, void * p_data, int components, const void * p_min, const void * p_max, const char * format = NULL, ImGuiSliderFlags flags = 0)
        {
            return SliderScalarN(label, data_type, p_data, components, p_min, p_max, format, flags);
        },
        py::arg("label"),
        py::arg("data_type"),
        py::arg("p_data"),
        py::arg("components"),
        py::arg("p_min"),
        py::arg("p_max"),
        py::arg("format") = NULL,
        py::arg("flags") = 0
    );

    m.def("v_slider_float",    // :557
        [](const char * label, const ImVec2 & size, float * v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0)
        {
            return VSliderFloat(label, size, v, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("size"),
        py::arg("v"),
        py::arg("v_min"),
        py::arg("v_max"),
        py::arg("format") = "%.3f",
        py::arg("flags") = 0
    );

    m.def("v_slider_int",    // :558
        [](const char * label, const ImVec2 & size, int * v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0)
        {
            return VSliderInt(label, size, v, v_min, v_max, format, flags);
        },
        py::arg("label"),
        py::arg("size"),
        py::arg("v"),
        py::arg("v_min"),
        py::arg("v_max"),
        py::arg("format") = "%d",
        py::arg("flags") = 0
    );

    m.def("v_slider_scalar",    // :559
        [](const char * label, const ImVec2 & size, ImGuiDataType data_type, void * p_data, const void * p_min, const void * p_max, const char * format = NULL, ImGuiSliderFlags flags = 0)
        {
            return VSliderScalar(label, size, data_type, p_data, p_min, p_max, format, flags);
        },
        py::arg("label"),
        py::arg("size"),
        py::arg("data_type"),
        py::arg("p_data"),
        py::arg("p_min"),
        py::arg("p_max"),
        py::arg("format") = NULL,
        py::arg("flags") = 0
    );

    m.def("input_text",    // :564
        [](const char * label, char * buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void * user_data = NULL)
        {
            return InputText(label, buf, buf_size, flags, callback, user_data);
        },
        py::arg("label"),
        py::arg("buf"),
        py::arg("buf_size"),
        py::arg("flags") = 0,
        py::arg("callback") = NULL,
        py::arg("user_data") = NULL,
        "Widgets: Input with Keyboard\n- If you want to use InputText() with str or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.\n- Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc."
    );

    m.def("input_text_multiline",    // :565
        [](const char * label, char * buf, size_t buf_size, const ImVec2 & size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void * user_data = NULL)
        {
            return InputTextMultiline(label, buf, buf_size, size, flags, callback, user_data);
        },
        py::arg("label"),
        py::arg("buf"),
        py::arg("buf_size"),
        py::arg("size") = ImVec2(0, 0),
        py::arg("flags") = 0,
        py::arg("callback") = NULL,
        py::arg("user_data") = NULL
    );

    m.def("input_text_with_hint",    // :566
        [](const char * label, const char * hint, char * buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void * user_data = NULL)
        {
            return InputTextWithHint(label, hint, buf, buf_size, flags, callback, user_data);
        },
        py::arg("label"),
        py::arg("hint"),
        py::arg("buf"),
        py::arg("buf_size"),
        py::arg("flags") = 0,
        py::arg("callback") = NULL,
        py::arg("user_data") = NULL
    );

    m.def("input_float",    // :567
        [](const char * label, float * v, float step = 0.0f, float step_fast = 0.0f, const char * format = "%.3f", ImGuiInputTextFlags flags = 0)
        {
            return InputFloat(label, v, step, step_fast, format, flags);
        },
        py::arg("label"),
        py::arg("v"),
        py::arg("step") = 0.0f,
        py::arg("step_fast") = 0.0f,
        py::arg("format") = "%.3f",
        py::arg("flags") = 0
    );

    m.def("input_float2",    // :568
        [](const char * label, float v[2], const char * format = "%.3f", ImGuiInputTextFlags flags = 0)
        {
            return InputFloat2(label, v[2], format, flags);
        },
        py::arg("label"),
        py::arg("v[2]"),
        py::arg("format") = "%.3f",
        py::arg("flags") = 0
    );

    m.def("input_float3",    // :569
        [](const char * label, float v[3], const char * format = "%.3f", ImGuiInputTextFlags flags = 0)
        {
            return InputFloat3(label, v[3], format, flags);
        },
        py::arg("label"),
        py::arg("v[3]"),
        py::arg("format") = "%.3f",
        py::arg("flags") = 0
    );

    m.def("input_float4",    // :570
        [](const char * label, float v[4], const char * format = "%.3f", ImGuiInputTextFlags flags = 0)
        {
            return InputFloat4(label, v[4], format, flags);
        },
        py::arg("label"),
        py::arg("v[4]"),
        py::arg("format") = "%.3f",
        py::arg("flags") = 0
    );

    m.def("input_int",    // :571
        [](const char * label, int * v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0)
        {
            return InputInt(label, v, step, step_fast, flags);
        },
        py::arg("label"),
        py::arg("v"),
        py::arg("step") = 1,
        py::arg("step_fast") = 100,
        py::arg("flags") = 0
    );

    m.def("input_int2",    // :572
        [](const char * label, int v[2], ImGuiInputTextFlags flags = 0)
        {
            return InputInt2(label, v[2], flags);
        },
        py::arg("label"),
        py::arg("v[2]"),
        py::arg("flags") = 0
    );

    m.def("input_int3",    // :573
        [](const char * label, int v[3], ImGuiInputTextFlags flags = 0)
        {
            return InputInt3(label, v[3], flags);
        },
        py::arg("label"),
        py::arg("v[3]"),
        py::arg("flags") = 0
    );

    m.def("input_int4",    // :574
        [](const char * label, int v[4], ImGuiInputTextFlags flags = 0)
        {
            return InputInt4(label, v[4], flags);
        },
        py::arg("label"),
        py::arg("v[4]"),
        py::arg("flags") = 0
    );

    m.def("input_double",    // :575
        [](const char * label, double * v, double step = 0.0, double step_fast = 0.0, const char * format = "%.6f", ImGuiInputTextFlags flags = 0)
        {
            return InputDouble(label, v, step, step_fast, format, flags);
        },
        py::arg("label"),
        py::arg("v"),
        py::arg("step") = 0.0,
        py::arg("step_fast") = 0.0,
        py::arg("format") = "%.6f",
        py::arg("flags") = 0
    );

    m.def("input_scalar",    // :576
        [](const char * label, ImGuiDataType data_type, void * p_data, const void * p_step = NULL, const void * p_step_fast = NULL, const char * format = NULL, ImGuiInputTextFlags flags = 0)
        {
            return InputScalar(label, data_type, p_data, p_step, p_step_fast, format, flags);
        },
        py::arg("label"),
        py::arg("data_type"),
        py::arg("p_data"),
        py::arg("p_step") = NULL,
        py::arg("p_step_fast") = NULL,
        py::arg("format") = NULL,
        py::arg("flags") = 0
    );

    m.def("input_scalar_n",    // :577
        [](const char * label, ImGuiDataType data_type, void * p_data, int components, const void * p_step = NULL, const void * p_step_fast = NULL, const char * format = NULL, ImGuiInputTextFlags flags = 0)
        {
            return InputScalarN(label, data_type, p_data, components, p_step, p_step_fast, format, flags);
        },
        py::arg("label"),
        py::arg("data_type"),
        py::arg("p_data"),
        py::arg("components"),
        py::arg("p_step") = NULL,
        py::arg("p_step_fast") = NULL,
        py::arg("format") = NULL,
        py::arg("flags") = 0
    );

    m.def("color_edit3",    // :582
        [](const char * label, float col[3], ImGuiColorEditFlags flags = 0)
        {
            return ColorEdit3(label, col[3], flags);
        },
        py::arg("label"),
        py::arg("col[3]"),
        py::arg("flags") = 0,
        "Widgets: Color Editor/Picker (tip: the ColorEdit functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)\n- Note that in C++ a 'float v[X]' function argument is the _same_ as 'float v', the array syntax is just a way to document the number of elements that are expected to be accessible.\n- You can pass the address of a first float element out of a contiguous structure, e.g. myvector.x"
    );

    m.def("color_edit4",    // :583
        [](const char * label, float col[4], ImGuiColorEditFlags flags = 0)
        {
            return ColorEdit4(label, col[4], flags);
        },
        py::arg("label"),
        py::arg("col[4]"),
        py::arg("flags") = 0
    );

    m.def("color_picker3",    // :584
        [](const char * label, float col[3], ImGuiColorEditFlags flags = 0)
        {
            return ColorPicker3(label, col[3], flags);
        },
        py::arg("label"),
        py::arg("col[3]"),
        py::arg("flags") = 0
    );

    m.def("color_picker4",    // :585
        [](const char * label, float col[4], ImGuiColorEditFlags flags = 0, const float * ref_col = NULL)
        {
            return ColorPicker4(label, col[4], flags, ref_col);
        },
        py::arg("label"),
        py::arg("col[4]"),
        py::arg("flags") = 0,
        py::arg("ref_col") = NULL
    );

    m.def("color_button",    // :586
        [](const char * desc_id, const ImVec4 & col, ImGuiColorEditFlags flags = 0, const ImVec2 & size = ImVec2(0, 0))
        {
            return ColorButton(desc_id, col, flags, size);
        },
        py::arg("desc_id"),
        py::arg("col"),
        py::arg("flags") = 0,
        py::arg("size") = ImVec2(0, 0),
        "display a color square/button, hover for details, return True when pressed."
    );

    m.def("set_color_edit_options",    // :587
        [](ImGuiColorEditFlags flags)
        {
            return SetColorEditOptions(flags);
        },
        py::arg("flags"),
        "initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls."
    );

    m.def("tree_node",    // :591
        [](const char * label)
        {
            return TreeNode(label);
        },
        py::arg("label"),
        "Widgets: Trees\n- TreeNode functions return True when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents."
    );

    m.def("tree_node",    // :592
        [](const char * str_id, const char * fmt)
        {
            return TreeNode(str_id, "%s", fmt);
        },
        py::arg("str_id"),
        py::arg("fmt"),
        "helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet()."
    );

    m.def("tree_node",    // :593
        [](const void * ptr_id, const char * fmt)
        {
            return TreeNode(ptr_id, "%s", fmt);
        },
        py::arg("ptr_id"),
        py::arg("fmt"),
        "\""
    );

    m.def("tree_node_v",    // :594
        [](const char * str_id, const char * fmt, va_list args)
        {
            return TreeNodeV(str_id, fmt, args);
        },
        py::arg("str_id"),
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("tree_node_v",    // :595
        [](const void * ptr_id, const char * fmt, va_list args)
        {
            return TreeNodeV(ptr_id, fmt, args);
        },
        py::arg("ptr_id"),
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("tree_node_ex",    // :596
        [](const char * label, ImGuiTreeNodeFlags flags = 0)
        {
            return TreeNodeEx(label, flags);
        },
        py::arg("label"),
        py::arg("flags") = 0
    );

    m.def("tree_node_ex",    // :597
        [](const char * str_id, ImGuiTreeNodeFlags flags, const char * fmt)
        {
            return TreeNodeEx(str_id, flags, "%s", fmt);
        },
        py::arg("str_id"),
        py::arg("flags"),
        py::arg("fmt")
    );

    m.def("tree_node_ex",    // :598
        [](const void * ptr_id, ImGuiTreeNodeFlags flags, const char * fmt)
        {
            return TreeNodeEx(ptr_id, flags, "%s", fmt);
        },
        py::arg("ptr_id"),
        py::arg("flags"),
        py::arg("fmt")
    );

    m.def("tree_node_ex_v",    // :599
        [](const char * str_id, ImGuiTreeNodeFlags flags, const char * fmt, va_list args)
        {
            return TreeNodeExV(str_id, flags, fmt, args);
        },
        py::arg("str_id"),
        py::arg("flags"),
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("tree_node_ex_v",    // :600
        [](const void * ptr_id, ImGuiTreeNodeFlags flags, const char * fmt, va_list args)
        {
            return TreeNodeExV(ptr_id, flags, fmt, args);
        },
        py::arg("ptr_id"),
        py::arg("flags"),
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("tree_push",    // :601
        [](const char * str_id)
        {
            return TreePush(str_id);
        },
        py::arg("str_id"),
        "~ Indent()+PushId(). Already called by TreeNode() when returning True, but you can call TreePush/TreePop yourself if desired."
    );

    m.def("tree_push",    // :602
        [](const void * ptr_id = NULL)
        {
            return TreePush(ptr_id);
        },
        py::arg("ptr_id") = NULL,
        "\""
    );

    m.def("tree_pop",    // :603
        []()
        {
            return TreePop();
        },
        "~ Unindent()+PopId()"
    );

    m.def("get_tree_node_to_label_spacing",    // :604
        []()
        {
            return GetTreeNodeToLabelSpacing();
        },
        "horizontal distance preceding label when using TreeNode() or Bullet() == (g.FontSize + style.FramePadding.x2) for a regular unframed TreeNode"
    );

    m.def("collapsing_header",    // :605
        [](const char * label, ImGuiTreeNodeFlags flags = 0)
        {
            return CollapsingHeader(label, flags);
        },
        py::arg("label"),
        py::arg("flags") = 0,
        "if returning 'True' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop()."
    );

    m.def("collapsing_header",    // :606
        [](const char * label, bool * p_visible, ImGuiTreeNodeFlags flags = 0)
        {
            return CollapsingHeader(label, p_visible, flags);
        },
        py::arg("label"),
        py::arg("p_visible"),
        py::arg("flags") = 0,
        "when 'p_visible != NULL': if 'p_visible==True' display an additional small close button on upper right of the header which will set the bool to False when clicked, if 'p_visible==False' don't display the header."
    );

    m.def("set_next_item_open",    // :607
        [](bool is_open, ImGuiCond cond = 0)
        {
            return SetNextItemOpen(is_open, cond);
        },
        py::arg("is_open"),
        py::arg("cond") = 0,
        "set next TreeNode/CollapsingHeader open state."
    );

    m.def("selectable",    // :612
        [](const char * label, bool selected = false, ImGuiSelectableFlags flags = 0, const ImVec2 & size = ImVec2(0, 0))
        {
            return Selectable(label, selected, flags, size);
        },
        py::arg("label"),
        py::arg("selected") = false,
        py::arg("flags") = 0,
        py::arg("size") = ImVec2(0, 0),
        "\"bool selected\" carry the selection state (read-only). Selectable() is clicked is returns True so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height"
    );

    m.def("selectable",    // :613
        [](const char * label, bool * p_selected, ImGuiSelectableFlags flags = 0, const ImVec2 & size = ImVec2(0, 0))
        {
            return Selectable(label, p_selected, flags, size);
        },
        py::arg("label"),
        py::arg("p_selected"),
        py::arg("flags") = 0,
        py::arg("size") = ImVec2(0, 0),
        "\"bool p_selected\" point to the selection state (read-write), as a convenient helper."
    );

    m.def("begin_list_box",    // :621
        [](const char * label, const ImVec2 & size = ImVec2(0, 0))
        {
            return BeginListBox(label, size);
        },
        py::arg("label"),
        py::arg("size") = ImVec2(0, 0),
        "open a framed scrolling region"
    );

    m.def("end_list_box",    // :622
        []()
        {
            return EndListBox();
        },
        "only call EndListBox() if BeginListBox() returned True!"
    );

    m.def("list_box",    // :623
        [](const char * label, int * current_item, const char * const items[], int items_count, int height_in_items = -1)
        {
            return ListBox(label, current_item, items[], items_count, height_in_items);
        },
        py::arg("label"),
        py::arg("current_item"),
        py::arg("items[]"),
        py::arg("items_count"),
        py::arg("height_in_items") = -1
    );

    m.def("plot_lines",    // :628
        [](const char * label, const py::array & values, int values_offset = 0, const char * overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float))
        {
            // convert values (py::array&) to C standard buffer (const)
            const void* values_buffer = values.data();
            int values_count = values.shape()[0];
            
            // process stride default value (which was a sizeof in C++)
            int values_stride = stride;
            if (values_stride == -1)
                values_stride = (int)values.itemsize();
                
            char array_type = values.dtype().char_();
            if (array_type != 'f')
                throw std::runtime_error(std::string(R"msg(
                        Bad type!  Expected a buffer of native type:
                                    const float *
                                Which is equivalent to 
                                    f
                                (using py::array::dtype().char_() as an id)
                    )msg"));

            return PlotLines(label, static_cast<const float *>(values_buffer), values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, values_stride);
        },
        py::arg("label"),
        py::arg("values"),
        py::arg("values_offset") = 0,
        py::arg("overlay_text") = NULL,
        py::arg("scale_min") = FLT_MAX,
        py::arg("scale_max") = FLT_MAX,
        py::arg("graph_size") = ImVec2(0, 0),
        py::arg("stride") = -1,
        "Widgets: Data Plotting\n- Consider using ImPlot (https://github.com/epezent/implot) which is much better!"
    );

    m.def("plot_histogram",    // :630
        [](const char * label, const py::array & values, int values_offset = 0, const char * overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float))
        {
            // convert values (py::array&) to C standard buffer (const)
            const void* values_buffer = values.data();
            int values_count = values.shape()[0];
            
            // process stride default value (which was a sizeof in C++)
            int values_stride = stride;
            if (values_stride == -1)
                values_stride = (int)values.itemsize();
                
            char array_type = values.dtype().char_();
            if (array_type != 'f')
                throw std::runtime_error(std::string(R"msg(
                        Bad type!  Expected a buffer of native type:
                                    const float *
                                Which is equivalent to 
                                    f
                                (using py::array::dtype().char_() as an id)
                    )msg"));

            return PlotHistogram(label, static_cast<const float *>(values_buffer), values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, values_stride);
        },
        py::arg("label"),
        py::arg("values"),
        py::arg("values_offset") = 0,
        py::arg("overlay_text") = NULL,
        py::arg("scale_min") = FLT_MAX,
        py::arg("scale_max") = FLT_MAX,
        py::arg("graph_size") = ImVec2(0, 0),
        py::arg("stride") = -1
    );

    m.def("value",    // :635
        [](const char * prefix, bool b)
        {
            return Value(prefix, b);
        },
        py::arg("prefix"),
        py::arg("b"),
        "Widgets: Value() Helpers.\n- Those are merely shortcut to calling Text() with a format string. Output single value in \"name: value\" format (tip: freely declare more in your code to handle your types. you can add functions to the ImGui namespace)"
    );

    m.def("value",    // :636
        [](const char * prefix, int v)
        {
            return Value(prefix, v);
        },
        py::arg("prefix"),
        py::arg("v")
    );

    m.def("value",    // :637
        [](const char * prefix, unsigned int v)
        {
            return Value(prefix, v);
        },
        py::arg("prefix"),
        py::arg("v")
    );

    m.def("value",    // :638
        [](const char * prefix, float v, const char * float_format = NULL)
        {
            return Value(prefix, v, float_format);
        },
        py::arg("prefix"),
        py::arg("v"),
        py::arg("float_format") = NULL
    );

    m.def("begin_menu_bar",    // :645
        []()
        {
            return BeginMenuBar();
        },
        "append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window)."
    );

    m.def("end_menu_bar",    // :646
        []()
        {
            return EndMenuBar();
        },
        "only call EndMenuBar() if BeginMenuBar() returns True!"
    );

    m.def("begin_main_menu_bar",    // :647
        []()
        {
            return BeginMainMenuBar();
        },
        "create and append to a full screen menu-bar."
    );

    m.def("end_main_menu_bar",    // :648
        []()
        {
            return EndMainMenuBar();
        },
        "only call EndMainMenuBar() if BeginMainMenuBar() returns True!"
    );

    m.def("begin_menu",    // :649
        [](const char * label, bool enabled = true)
        {
            return BeginMenu(label, enabled);
        },
        py::arg("label"),
        py::arg("enabled") = true,
        "create a sub-menu entry. only call EndMenu() if this returns True!"
    );

    m.def("end_menu",    // :650
        []()
        {
            return EndMenu();
        },
        "only call EndMenu() if BeginMenu() returns True!"
    );

    m.def("menu_item",    // :651
        [](const char * label, const char * shortcut = NULL, bool selected = false, bool enabled = true)
        {
            return MenuItem(label, shortcut, selected, enabled);
        },
        py::arg("label"),
        py::arg("shortcut") = NULL,
        py::arg("selected") = false,
        py::arg("enabled") = true,
        "return True when activated."
    );

    m.def("menu_item",    // :652
        [](const char * label, const char * shortcut, bool * p_selected, bool enabled = true)
        {
            return MenuItem(label, shortcut, p_selected, enabled);
        },
        py::arg("label"),
        py::arg("shortcut"),
        py::arg("p_selected"),
        py::arg("enabled") = true,
        "return True when activated + toggle (p_selected) if p_selected != NULL"
    );

    m.def("begin_tooltip",    // :656
        []()
        {
            return BeginTooltip();
        },
        "begin/append a tooltip window. to create full-featured tooltip (with any kind of items)."
    );

    m.def("end_tooltip",    // :657
        []()
        {
            return EndTooltip();
        }
    );

    m.def("set_tooltip",    // :658
        [](const char * fmt)
        {
            return SetTooltip("%s", fmt);
        },
        py::arg("fmt"),
        "set a text-only tooltip, typically use with ImGui::IsItemHovered(). override any previous call to SetTooltip()."
    );

    m.def("set_tooltip_v",    // :659
        [](const char * fmt, va_list args)
        {
            return SetTooltipV(fmt, args);
        },
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("begin_popup",    // :673
        [](const char * str_id, ImGuiWindowFlags flags = 0)
        {
            return BeginPopup(str_id, flags);
        },
        py::arg("str_id"),
        py::arg("flags") = 0,
        "return True if the popup is open, and you can start outputting to it."
    );

    m.def("begin_popup_modal",    // :674
        [](const char * name, bool * p_open = NULL, ImGuiWindowFlags flags = 0)
        {
            return BeginPopupModal(name, p_open, flags);
        },
        py::arg("name"),
        py::arg("p_open") = NULL,
        py::arg("flags") = 0,
        "return True if the modal is open, and you can start outputting to it."
    );

    m.def("end_popup",    // :675
        []()
        {
            return EndPopup();
        },
        "only call EndPopup() if BeginPopupXXX() returns True!"
    );

    m.def("open_popup",    // :685
        [](const char * str_id, ImGuiPopupFlags popup_flags = 0)
        {
            return OpenPopup(str_id, popup_flags);
        },
        py::arg("str_id"),
        py::arg("popup_flags") = 0,
        "call to mark popup as open (don't call every frame!)."
    );

    m.def("open_popup",    // :686
        [](ImGuiID id, ImGuiPopupFlags popup_flags = 0)
        {
            return OpenPopup(id, popup_flags);
        },
        py::arg("id"),
        py::arg("popup_flags") = 0,
        "id overload to facilitate calling from nested stacks"
    );

    m.def("open_popup_on_item_click",    // :687
        [](const char * str_id = NULL, ImGuiPopupFlags popup_flags = 1)
        {
            return OpenPopupOnItemClick(str_id, popup_flags);
        },
        py::arg("str_id") = NULL,
        py::arg("popup_flags") = 1,
        "helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)"
    );

    m.def("close_current_popup",    // :688
        []()
        {
            return CloseCurrentPopup();
        },
        "manually close the popup we have begin-ed into."
    );

    m.def("begin_popup_context_item",    // :695
        [](const char * str_id = NULL, ImGuiPopupFlags popup_flags = 1)
        {
            return BeginPopupContextItem(str_id, popup_flags);
        },
        py::arg("str_id") = NULL,
        py::arg("popup_flags") = 1,
        "open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!"
    );

    m.def("begin_popup_context_window",    // :696
        [](const char * str_id = NULL, ImGuiPopupFlags popup_flags = 1)
        {
            return BeginPopupContextWindow(str_id, popup_flags);
        },
        py::arg("str_id") = NULL,
        py::arg("popup_flags") = 1,
        "open+begin popup when clicked on current window."
    );

    m.def("begin_popup_context_void",    // :697
        [](const char * str_id = NULL, ImGuiPopupFlags popup_flags = 1)
        {
            return BeginPopupContextVoid(str_id, popup_flags);
        },
        py::arg("str_id") = NULL,
        py::arg("popup_flags") = 1,
        "open+begin popup when clicked in None (where there are no windows)."
    );

    m.def("is_popup_open",    // :703
        [](const char * str_id, ImGuiPopupFlags flags = 0)
        {
            return IsPopupOpen(str_id, flags);
        },
        py::arg("str_id"),
        py::arg("flags") = 0,
        "return True if the popup is open."
    );

    m.def("begin_table",    // :728
        [](const char * str_id, int column, ImGuiTableFlags flags = 0, const ImVec2 & outer_size = ImVec2(0.0f, 0.0f), float inner_width = 0.0f)
        {
            return BeginTable(str_id, column, flags, outer_size, inner_width);
        },
        py::arg("str_id"),
        py::arg("column"),
        py::arg("flags") = 0,
        py::arg("outer_size") = ImVec2(0.0f, 0.0f),
        py::arg("inner_width") = 0.0f,
        "Tables\n- Full-featured replacement for old Columns API.\n- See Demo->Tables for demo code. See top of imgui_tables.cpp for general commentary.\n- See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.\nThe typical call flow is:\n- 1. Call BeginTable(), early out if returning False.\n- 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.\n- 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.\n- 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.\n- 5. Populate contents:\n- In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.\n- If you are using tables as a sort of grid, where every columns is holding the same type of contents,\nyou may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().\nTableNextColumn() will automatically wrap-around into the next row if needed.\n- IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!\n- Summary of possible call flow:\n--------------------------------------------------------------------------------------------------------\nTableNextRow() -> TableSetColumnIndex(0) -> Text(\"Hello 0\") -> TableSetColumnIndex(1) -> Text(\"Hello 1\")  // OK\nTableNextRow() -> TableNextColumn()      -> Text(\"Hello 0\") -> TableNextColumn()      -> Text(\"Hello 1\")  // OK\nTableNextColumn()      -> Text(\"Hello 0\") -> TableNextColumn()      -> Text(\"Hello 1\")  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text(\"Hello 0\")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n--------------------------------------------------------------------------------------------------------\n- 5. Call EndTable()"
    );

    m.def("end_table",    // :729
        []()
        {
            return EndTable();
        },
        "only call EndTable() if BeginTable() returns True!"
    );

    m.def("table_next_row",    // :730
        [](ImGuiTableRowFlags row_flags = 0, float min_row_height = 0.0f)
        {
            return TableNextRow(row_flags, min_row_height);
        },
        py::arg("row_flags") = 0,
        py::arg("min_row_height") = 0.0f,
        "append into the first cell of a new row."
    );

    m.def("table_next_column",    // :731
        []()
        {
            return TableNextColumn();
        },
        "append into the next column (or first column of next row if currently in last column). Return True when column is visible."
    );

    m.def("table_set_column_index",    // :732
        [](int column_n)
        {
            return TableSetColumnIndex(column_n);
        },
        py::arg("column_n"),
        "append into the specified column. Return True when column is visible."
    );

    m.def("table_setup_column",    // :742
        [](const char * label, ImGuiTableColumnFlags flags = 0, float init_width_or_weight = 0.0f, ImGuiID user_id = 0)
        {
            return TableSetupColumn(label, flags, init_width_or_weight, user_id);
        },
        py::arg("label"),
        py::arg("flags") = 0,
        py::arg("init_width_or_weight") = 0.0f,
        py::arg("user_id") = 0,
        "Tables: Headers  Columns declaration\n- Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.\n- Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.\nHeaders are required to perform: reordering, sorting, and opening the context menu.\nThe context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.\n- You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in\nsome advanced use cases (e.g. adding custom widgets in header row).\n- Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled."
    );

    m.def("table_setup_scroll_freeze",    // :743
        [](int cols, int rows)
        {
            return TableSetupScrollFreeze(cols, rows);
        },
        py::arg("cols"),
        py::arg("rows"),
        "lock columns/rows so they stay visible when scrolled."
    );

    m.def("table_headers_row",    // :744
        []()
        {
            return TableHeadersRow();
        },
        "submit all headers cells based on data provided to TableSetupColumn() + submit context menu"
    );

    m.def("table_header",    // :745
        [](const char * label)
        {
            return TableHeader(label);
        },
        py::arg("label"),
        "submit one header cell manually (rarely used)"
    );

    m.def("table_get_sort_specs",    // :753
        []()
        {
            return TableGetSortSpecs();
        },
        "get latest sort specs for the table (NULL if not sorting).  Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable()."
    );

    m.def("table_get_column_count",    // :754
        []()
        {
            return TableGetColumnCount();
        },
        "return number of columns (value passed to BeginTable)"
    );

    m.def("table_get_column_index",    // :755
        []()
        {
            return TableGetColumnIndex();
        },
        "return current column index."
    );

    m.def("table_get_row_index",    // :756
        []()
        {
            return TableGetRowIndex();
        },
        "return current row index."
    );

    m.def("table_get_column_name",    // :757
        [](int column_n = -1)
        {
            return TableGetColumnName(column_n);
        },
        py::arg("column_n") = -1,
        "return \"\" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column."
    );

    m.def("table_get_column_flags",    // :758
        [](int column_n = -1)
        {
            return TableGetColumnFlags(column_n);
        },
        py::arg("column_n") = -1,
        "return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column."
    );

    m.def("table_set_column_enabled",    // :759
        [](int column_n, bool v)
        {
            return TableSetColumnEnabled(column_n, v);
        },
        py::arg("column_n"),
        py::arg("v"),
        "change user accessible enabled/disabled state of a column. Set to False to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)"
    );

    m.def("table_set_bg_color",    // :760
        [](ImGuiTableBgTarget target, ImU32 color, int column_n = -1)
        {
            return TableSetBgColor(target, color, column_n);
        },
        py::arg("target"),
        py::arg("color"),
        py::arg("column_n") = -1,
        "change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details."
    );

    m.def("columns",    // :764
        [](int count = 1, const char * id = NULL, bool border = true)
        {
            return Columns(count, id, border);
        },
        py::arg("count") = 1,
        py::arg("id") = NULL,
        py::arg("border") = true,
        "Legacy Columns API (prefer using Tables!)\n- You can also use SameLine(pos_x) to mimic simplified columns."
    );

    m.def("next_column",    // :765
        []()
        {
            return NextColumn();
        },
        "next column, defaults to current row or next row if the current row is finished"
    );

    m.def("get_column_index",    // :766
        []()
        {
            return GetColumnIndex();
        },
        "get current column index"
    );

    m.def("get_column_width",    // :767
        [](int column_index = -1)
        {
            return GetColumnWidth(column_index);
        },
        py::arg("column_index") = -1,
        "get column width (in pixels). pass -1 to use current column"
    );

    m.def("set_column_width",    // :768
        [](int column_index, float width)
        {
            return SetColumnWidth(column_index, width);
        },
        py::arg("column_index"),
        py::arg("width"),
        "set column width (in pixels). pass -1 to use current column"
    );

    m.def("get_column_offset",    // :769
        [](int column_index = -1)
        {
            return GetColumnOffset(column_index);
        },
        py::arg("column_index") = -1,
        "get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f"
    );

    m.def("set_column_offset",    // :770
        [](int column_index, float offset_x)
        {
            return SetColumnOffset(column_index, offset_x);
        },
        py::arg("column_index"),
        py::arg("offset_x"),
        "set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column"
    );

    m.def("get_columns_count",    // :771
        []()
        {
            return GetColumnsCount();
        }
    );

    m.def("begin_tab_bar",    // :774
        [](const char * str_id, ImGuiTabBarFlags flags = 0)
        {
            return BeginTabBar(str_id, flags);
        },
        py::arg("str_id"),
        py::arg("flags") = 0,
        "create and append into a TabBar"
    );

    m.def("end_tab_bar",    // :775
        []()
        {
            return EndTabBar();
        },
        "only call EndTabBar() if BeginTabBar() returns True!"
    );

    m.def("begin_tab_item",    // :776
        [](const char * label, bool * p_open = NULL, ImGuiTabItemFlags flags = 0)
        {
            return BeginTabItem(label, p_open, flags);
        },
        py::arg("label"),
        py::arg("p_open") = NULL,
        py::arg("flags") = 0,
        "create a Tab. Returns True if the Tab is selected."
    );

    m.def("end_tab_item",    // :777
        []()
        {
            return EndTabItem();
        },
        "only call EndTabItem() if BeginTabItem() returns True!"
    );

    m.def("tab_item_button",    // :778
        [](const char * label, ImGuiTabItemFlags flags = 0)
        {
            return TabItemButton(label, flags);
        },
        py::arg("label"),
        py::arg("flags") = 0,
        "create a Tab behaving like a button. return True when clicked. cannot be selected in the tab bar."
    );

    m.def("set_tab_item_closed",    // :779
        [](const char * tab_or_docked_window_label)
        {
            return SetTabItemClosed(tab_or_docked_window_label);
        },
        py::arg("tab_or_docked_window_label"),
        "notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name."
    );

    m.def("log_to_tty",    // :783
        [](int auto_open_depth = -1)
        {
            return LogToTTY(auto_open_depth);
        },
        py::arg("auto_open_depth") = -1,
        "start logging to tty (stdout)"
    );

    m.def("log_to_file",    // :784
        [](int auto_open_depth = -1, const char * filename = NULL)
        {
            return LogToFile(auto_open_depth, filename);
        },
        py::arg("auto_open_depth") = -1,
        py::arg("filename") = NULL,
        "start logging to file"
    );

    m.def("log_to_clipboard",    // :785
        [](int auto_open_depth = -1)
        {
            return LogToClipboard(auto_open_depth);
        },
        py::arg("auto_open_depth") = -1,
        "start logging to OS clipboard"
    );

    m.def("log_finish",    // :786
        []()
        {
            return LogFinish();
        },
        "stop logging (close file, etc.)"
    );

    m.def("log_buttons",    // :787
        []()
        {
            return LogButtons();
        },
        "helper to display buttons for logging to tty/file/clipboard"
    );

    m.def("log_text",    // :788
        [](const char * fmt)
        {
            return LogText("%s", fmt);
        },
        py::arg("fmt"),
        "pass text data straight to log (without being displayed)"
    );

    m.def("log_text_v",    // :789
        [](const char * fmt, va_list args)
        {
            return LogTextV(fmt, args);
        },
        py::arg("fmt"),
        py::arg("args")
    );

    m.def("begin_drag_drop_source",    // :796
        [](ImGuiDragDropFlags flags = 0)
        {
            return BeginDragDropSource(flags);
        },
        py::arg("flags") = 0,
        "call after submitting an item which may be dragged. when this return True, you can call SetDragDropPayload() + EndDragDropSource()"
    );

    m.def("set_drag_drop_payload",    // :797
        [](const char * type, const void * data, size_t sz, ImGuiCond cond = 0)
        {
            return SetDragDropPayload(type, data, sz, cond);
        },
        py::arg("type"),
        py::arg("data"),
        py::arg("sz"),
        py::arg("cond") = 0,
        "type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui. Return True when payload has been accepted."
    );

    m.def("end_drag_drop_source",    // :798
        []()
        {
            return EndDragDropSource();
        },
        "only call EndDragDropSource() if BeginDragDropSource() returns True!"
    );

    m.def("begin_drag_drop_target",    // :799
        []()
        {
            return BeginDragDropTarget();
        },
        "call after submitting an item that may receive a payload. If this returns True, you can call AcceptDragDropPayload() + EndDragDropTarget()"
    );

    m.def("accept_drag_drop_payload",    // :800
        [](const char * type, ImGuiDragDropFlags flags = 0)
        {
            return AcceptDragDropPayload(type, flags);
        },
        py::arg("type"),
        py::arg("flags") = 0,
        "accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released."
    );

    m.def("end_drag_drop_target",    // :801
        []()
        {
            return EndDragDropTarget();
        },
        "only call EndDragDropTarget() if BeginDragDropTarget() returns True!"
    );

    m.def("get_drag_drop_payload",    // :802
        []()
        {
            return GetDragDropPayload();
        },
        "peek directly into the current payload from anywhere. may return NULL. use ImGuiPayload::IsDataType() to test for the payload type."
    );

    m.def("begin_disabled",    // :808
        [](bool disabled = true)
        {
            return BeginDisabled(disabled);
        },
        py::arg("disabled") = true,
        "Disabling [BETA API]\n- Disable all user interactions and dim items visuals (applying style.DisabledAlpha over current colors)\n- Those can be nested but it cannot be used to enable an already disabled section (a single BeginDisabled(True) in the stack is enough to keep everything disabled)\n- BeginDisabled(False) essentially does nothing useful but is provided to facilitate use of boolean expressions. If you can avoid calling BeginDisabled(False)/EndDisabled() best to avoid it."
    );

    m.def("end_disabled",    // :809
        []()
        {
            return EndDisabled();
        }
    );

    m.def("push_clip_rect",    // :813
        [](const ImVec2 & clip_rect_min, const ImVec2 & clip_rect_max, bool intersect_with_current_clip_rect)
        {
            return PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
        },
        py::arg("clip_rect_min"),
        py::arg("clip_rect_max"),
        py::arg("intersect_with_current_clip_rect"),
        "Clipping\n- Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only."
    );

    m.def("pop_clip_rect",    // :814
        []()
        {
            return PopClipRect();
        }
    );

    m.def("set_item_default_focus",    // :818
        []()
        {
            return SetItemDefaultFocus();
        },
        "make last item the default focused item of a window."
    );

    m.def("set_keyboard_focus_here",    // :819
        [](int offset = 0)
        {
            return SetKeyboardFocusHere(offset);
        },
        py::arg("offset") = 0,
        "focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget."
    );

    m.def("is_item_hovered",    // :824
        [](ImGuiHoveredFlags flags = 0)
        {
            return IsItemHovered(flags);
        },
        py::arg("flags") = 0,
        "is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options."
    );

    m.def("is_item_active",    // :825
        []()
        {
            return IsItemActive();
        },
        "is the last item active? (e.g. button being held, text field being edited. This will continuously return True while holding mouse button on an item. Items that don't interact will always return False)"
    );

    m.def("is_item_focused",    // :826
        []()
        {
            return IsItemFocused();
        },
        "is the last item focused for keyboard/gamepad navigation?"
    );

    m.def("is_item_clicked",    // :827
        [](ImGuiMouseButton mouse_button = 0)
        {
            return IsItemClicked(mouse_button);
        },
        py::arg("mouse_button") = 0,
        "is the last item hovered and mouse clicked on? ()  == IsMouseClicked(mouse_button)  IsItemHovered()Important. () this it NOT equivalent to the behavior of e.g. Button(). Read comments in function definition."
    );

    m.def("is_item_visible",    // :828
        []()
        {
            return IsItemVisible();
        },
        "is the last item visible? (items may be out of sight because of clipping/scrolling)"
    );

    m.def("is_item_edited",    // :829
        []()
        {
            return IsItemEdited();
        },
        "did the last item modify its underlying value this frame? or was pressed? This is generally the same as the \"bool\" return value of many widgets."
    );

    m.def("is_item_activated",    // :830
        []()
        {
            return IsItemActivated();
        },
        "was the last item just made active (item was previously inactive)."
    );

    m.def("is_item_deactivated",    // :831
        []()
        {
            return IsItemDeactivated();
        },
        "was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing."
    );

    m.def("is_item_deactivated_after_edit",    // :832
        []()
        {
            return IsItemDeactivatedAfterEdit();
        },
        "was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get False positives (some widgets such as Combo()/ListBox()/Selectable() will return True even when clicking an already selected item)."
    );

    m.def("is_item_toggled_open",    // :833
        []()
        {
            return IsItemToggledOpen();
        },
        "was the last item open state toggled? set by TreeNode()."
    );

    m.def("is_any_item_hovered",    // :834
        []()
        {
            return IsAnyItemHovered();
        },
        "is any item hovered?"
    );

    m.def("is_any_item_active",    // :835
        []()
        {
            return IsAnyItemActive();
        },
        "is any item active?"
    );

    m.def("is_any_item_focused",    // :836
        []()
        {
            return IsAnyItemFocused();
        },
        "is any item focused?"
    );

    m.def("get_item_rect_min",    // :837
        []()
        {
            return GetItemRectMin();
        },
        "get upper-left bounding rectangle of the last item (screen space)"
    );

    m.def("get_item_rect_max",    // :838
        []()
        {
            return GetItemRectMax();
        },
        "get lower-right bounding rectangle of the last item (screen space)"
    );

    m.def("get_item_rect_size",    // :839
        []()
        {
            return GetItemRectSize();
        },
        "get size of last item"
    );

    m.def("set_item_allow_overlap",    // :840
        []()
        {
            return SetItemAllowOverlap();
        },
        "allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area."
    );

    m.def("get_main_viewport",    // :846
        []()
        {
            return GetMainViewport();
        },
        "return primary/default viewport. This can never be NULL."
    );

    m.def("get_background_draw_list",    // :849
        []()
        {
            return GetBackgroundDrawList();
        },
        "this draw list will be the first rendered one. Useful to quickly draw shapes/text behind dear imgui contents."
    );

    m.def("get_foreground_draw_list",    // :850
        []()
        {
            return GetForegroundDrawList();
        },
        "this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents."
    );

    m.def("is_rect_visible",    // :853
        [](const ImVec2 & size)
        {
            return IsRectVisible(size);
        },
        py::arg("size"),
        "test if rectangle (of given size, starting from cursor position) is visible / not clipped."
    );

    m.def("is_rect_visible",    // :854
        [](const ImVec2 & rect_min, const ImVec2 & rect_max)
        {
            return IsRectVisible(rect_min, rect_max);
        },
        py::arg("rect_min"),
        py::arg("rect_max"),
        "test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side."
    );

    m.def("get_time",    // :855
        []()
        {
            return GetTime();
        },
        "get global imgui time. incremented by io.DeltaTime every frame."
    );

    m.def("get_frame_count",    // :856
        []()
        {
            return GetFrameCount();
        },
        "get global imgui frame count. incremented by 1 every frame."
    );

    m.def("get_draw_list_shared_data",    // :857
        []()
        {
            return GetDrawListSharedData();
        },
        "you may use this when creating your own ImDrawList instances."
    );

    m.def("get_style_color_name",    // :858
        [](ImGuiCol idx)
        {
            return GetStyleColorName(idx);
        },
        py::arg("idx"),
        "get a string corresponding to the enum value (for display, saving, etc.)."
    );

    m.def("set_state_storage",    // :859
        [](ImGuiStorage * storage)
        {
            return SetStateStorage(storage);
        },
        py::arg("storage"),
        "replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)"
    );

    m.def("get_state_storage",    // :860
        []()
        {
            return GetStateStorage();
        }
    );

    m.def("begin_child_frame",    // :861
        [](ImGuiID id, const ImVec2 & size, ImGuiWindowFlags flags = 0)
        {
            return BeginChildFrame(id, size, flags);
        },
        py::arg("id"),
        py::arg("size"),
        py::arg("flags") = 0,
        "helper to create a child window / scrolling region that looks like a normal widget frame"
    );

    m.def("end_child_frame",    // :862
        []()
        {
            return EndChildFrame();
        },
        "always call EndChildFrame() regardless of BeginChildFrame() return values (which indicates a collapsed/clipped window)"
    );

    m.def("calc_text_size",    // :865
        [](const char * text, const char * text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f)
        {
            return CalcTextSize(text, text_end, hide_text_after_double_hash, wrap_width);
        },
        py::arg("text"),
        py::arg("text_end") = NULL,
        py::arg("hide_text_after_double_hash") = false,
        py::arg("wrap_width") = -1.0f,
        "Text Utilities"
    );

    m.def("color_convert_u32_to_float4",    // :868
        [](ImU32 in)
        {
            return ColorConvertU32ToFloat4(in);
        },
        py::arg("in"),
        "Color Utilities"
    );

    m.def("color_convert_float4_to_u32",    // :869
        [](const ImVec4 & in)
        {
            return ColorConvertFloat4ToU32(in);
        },
        py::arg("in")
    );

    m.def("color_convert_rg_bto_hsv",    // :870
        [](float r, float g, float b, float & out_h, float & out_s, float & out_v)
        {
            return ColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v);
        },
        py::arg("r"),
        py::arg("g"),
        py::arg("b"),
        py::arg("out_h"),
        py::arg("out_s"),
        py::arg("out_v")
    );

    m.def("color_convert_hs_vto_rgb",    // :871
        [](float h, float s, float v, float & out_r, float & out_g, float & out_b)
        {
            return ColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b);
        },
        py::arg("h"),
        py::arg("s"),
        py::arg("v"),
        py::arg("out_r"),
        py::arg("out_g"),
        py::arg("out_b")
    );

    m.def("is_key_down",    // :879
        [](ImGuiKey key)
        {
            return IsKeyDown(key);
        },
        py::arg("key"),
        "is key being held."
    );

    m.def("is_key_pressed",    // :880
        [](ImGuiKey key, bool repeat = true)
        {
            return IsKeyPressed(key, repeat);
        },
        py::arg("key"),
        py::arg("repeat") = true,
        "was key pressed (went from !Down to Down)? if repeat=True, uses io.KeyRepeatDelay / KeyRepeatRate"
    );

    m.def("is_key_released",    // :881
        [](ImGuiKey key)
        {
            return IsKeyReleased(key);
        },
        py::arg("key"),
        "was key released (went from Down to !Down)?"
    );

    m.def("get_key_pressed_amount",    // :882
        [](ImGuiKey key, float repeat_delay, float rate)
        {
            return GetKeyPressedAmount(key, repeat_delay, rate);
        },
        py::arg("key"),
        py::arg("repeat_delay"),
        py::arg("rate"),
        "uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate"
    );

    m.def("get_key_name",    // :883
        [](ImGuiKey key)
        {
            return GetKeyName(key);
        },
        py::arg("key"),
        "[DEBUG] returns English name of the key. Those names a provided for debugging purpose and are not meant to be saved persistently not compared."
    );

    m.def("set_next_frame_want_capture_keyboard",    // :884
        [](bool want_capture_keyboard)
        {
            return SetNextFrameWantCaptureKeyboard(want_capture_keyboard);
        },
        py::arg("want_capture_keyboard"),
        "Override io.WantCaptureKeyboard flag next frame (said flag is left for your application to handle, typically when True it instructs your app to ignore inputs). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting \"io.WantCaptureKeyboard = want_capture_keyboard\"; after the next NewFrame() call."
    );

    m.def("is_mouse_down",    // :890
        [](ImGuiMouseButton button)
        {
            return IsMouseDown(button);
        },
        py::arg("button"),
        "is mouse button held?"
    );

    m.def("is_mouse_clicked",    // :891
        [](ImGuiMouseButton button, bool repeat = false)
        {
            return IsMouseClicked(button, repeat);
        },
        py::arg("button"),
        py::arg("repeat") = false,
        "did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1."
    );

    m.def("is_mouse_released",    // :892
        [](ImGuiMouseButton button)
        {
            return IsMouseReleased(button);
        },
        py::arg("button"),
        "did mouse button released? (went from Down to !Down)"
    );

    m.def("is_mouse_double_clicked",    // :893
        [](ImGuiMouseButton button)
        {
            return IsMouseDoubleClicked(button);
        },
        py::arg("button"),
        "did mouse button float-clicked? Same as GetMouseClickedCount() == 2. (note that a float-click will also report IsMouseClicked() == True)"
    );

    m.def("get_mouse_clicked_count",    // :894
        [](ImGuiMouseButton button)
        {
            return GetMouseClickedCount(button);
        },
        py::arg("button"),
        "return the number of successive mouse-clicks at the time where a click happen (otherwise 0)."
    );

    m.def("is_mouse_hovering_rect",    // :895
        [](const ImVec2 & r_min, const ImVec2 & r_max, bool clip = true)
        {
            return IsMouseHoveringRect(r_min, r_max, clip);
        },
        py::arg("r_min"),
        py::arg("r_max"),
        py::arg("clip") = true,
        "is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block."
    );

    m.def("is_mouse_pos_valid",    // :896
        [](const ImVec2 * mouse_pos = NULL)
        {
            return IsMousePosValid(mouse_pos);
        },
        py::arg("mouse_pos") = NULL,
        "by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available"
    );

    m.def("is_any_mouse_down",    // :897
        []()
        {
            return IsAnyMouseDown();
        },
        "[WILL OBSOLETE] is any mouse button held? This was designed for backends, but prefer having backend maintain a mask of held mouse buttons, because upcoming input queue system will make this invalid."
    );

    m.def("get_mouse_pos",    // :898
        []()
        {
            return GetMousePos();
        },
        "shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls"
    );

    m.def("get_mouse_pos_on_opening_current_popup",    // :899
        []()
        {
            return GetMousePosOnOpeningCurrentPopup();
        },
        "retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)"
    );

    m.def("is_mouse_dragging",    // :900
        [](ImGuiMouseButton button, float lock_threshold = -1.0f)
        {
            return IsMouseDragging(button, lock_threshold);
        },
        py::arg("button"),
        py::arg("lock_threshold") = -1.0f,
        "is mouse dragging? (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)"
    );

    m.def("get_mouse_drag_delta",    // :901
        [](ImGuiMouseButton button = 0, float lock_threshold = -1.0f)
        {
            return GetMouseDragDelta(button, lock_threshold);
        },
        py::arg("button") = 0,
        py::arg("lock_threshold") = -1.0f,
        "return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)"
    );

    m.def("reset_mouse_drag_delta",    // :902
        [](ImGuiMouseButton button = 0)
        {
            return ResetMouseDragDelta(button);
        },
        py::arg("button") = 0
    );

    m.def("get_mouse_cursor",    // :903
        []()
        {
            return GetMouseCursor();
        },
        "get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you"
    );

    m.def("set_mouse_cursor",    // :904
        [](ImGuiMouseCursor cursor_type)
        {
            return SetMouseCursor(cursor_type);
        },
        py::arg("cursor_type"),
        "set desired cursor type"
    );

    m.def("set_next_frame_want_capture_mouse",    // :905
        [](bool want_capture_mouse)
        {
            return SetNextFrameWantCaptureMouse(want_capture_mouse);
        },
        py::arg("want_capture_mouse"),
        "Override io.WantCaptureMouse flag next frame (said flag is left for your application to handle, typical when True it instucts your app to ignore inputs). This is equivalent to setting \"io.WantCaptureMouse = want_capture_mouse;\" after the next NewFrame() call."
    );

    m.def("get_clipboard_text",    // :909
        []()
        {
            return GetClipboardText();
        },
        "Clipboard Utilities\n- Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard."
    );

    m.def("set_clipboard_text",    // :910
        [](const char * text)
        {
            return SetClipboardText(text);
        },
        py::arg("text")
    );

    m.def("load_ini_settings_from_disk",    // :916
        [](const char * ini_filename)
        {
            return LoadIniSettingsFromDisk(ini_filename);
        },
        py::arg("ini_filename"),
        "call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename)."
    );

    m.def("load_ini_settings_from_memory",    // :917
        [](const char * ini_data, size_t ini_size = 0)
        {
            return LoadIniSettingsFromMemory(ini_data, ini_size);
        },
        py::arg("ini_data"),
        py::arg("ini_size") = 0,
        "call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source."
    );

    m.def("save_ini_settings_to_disk",    // :918
        [](const char * ini_filename)
        {
            return SaveIniSettingsToDisk(ini_filename);
        },
        py::arg("ini_filename"),
        "this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext)."
    );

    m.def("save_ini_settings_to_memory",    // :919
        [](size_t * out_ini_size = NULL)
        {
            return SaveIniSettingsToMemory(out_ini_size);
        },
        py::arg("out_ini_size") = NULL,
        "return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings."
    );

    m.def("debug_text_encoding",    // :922
        [](const char * text)
        {
            return DebugTextEncoding(text);
        },
        py::arg("text"),
        "Debug Utilities"
    );

    m.def("debug_check_version_and_data_layout",    // :923
        [](const char * version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx)
        {
            return DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx);
        },
        py::arg("version_str"),
        py::arg("sz_io"),
        py::arg("sz_style"),
        py::arg("sz_vec2"),
        py::arg("sz_vec4"),
        py::arg("sz_drawvert"),
        py::arg("sz_drawidx"),
        "This is called by IMGUI_CHECKVERSION() macro."
    );

    m.def("set_allocator_functions",    // :929
        [](ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void * user_data = NULL)
        {
            return SetAllocatorFunctions(alloc_func, free_func, user_data);
        },
        py::arg("alloc_func"),
        py::arg("free_func"),
        py::arg("user_data") = NULL,
        "Memory Allocators\n- Those functions are not reliant on the current context.\n- DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()\nfor each static/DLL boundary you are calling from. Read \"Context and Memory Allocators\" section of imgui.cpp for more details."
    );

    m.def("get_allocator_functions",    // :930
        [](ImGuiMemAllocFunc * p_alloc_func, ImGuiMemFreeFunc * p_free_func, void * * p_user_data)
        {
            return GetAllocatorFunctions(p_alloc_func, p_free_func, p_user_data);
        },
        py::arg("p_alloc_func"),
        py::arg("p_free_func"),
        py::arg("p_user_data")
    );

    m.def("mem_alloc",    // :931
        [](size_t size)
        {
            return MemAlloc(size);
        },
        py::arg("size")
    );

    m.def("mem_free",    // :932
        [](void * ptr)
        {
            return MemFree(ptr);
        },
        py::arg("ptr")
    );

    // </namespace ImGui>



    py::enum_<ImGuiWindowFlags_>(m, "ImGuiWindowFlags_", py::arithmetic(), "Flags for ImGui::Begin()")
        .value("none", ImGuiWindowFlags_None, "")
        .value("no_title_bar", ImGuiWindowFlags_NoTitleBar, "Disable title-bar")
        .value("no_resize", ImGuiWindowFlags_NoResize, "Disable user resizing with the lower-right grip")
        .value("no_move", ImGuiWindowFlags_NoMove, "Disable user moving the window")
        .value("no_scrollbar", ImGuiWindowFlags_NoScrollbar, "Disable scrollbars (window can still scroll with mouse or programmatically)")
        .value("no_scroll_with_mouse", ImGuiWindowFlags_NoScrollWithMouse, "Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.")
        .value("no_collapse", ImGuiWindowFlags_NoCollapse, "Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).")
        .value("always_auto_resize", ImGuiWindowFlags_AlwaysAutoResize, "Resize every window to its content every frame")
        .value("no_background", ImGuiWindowFlags_NoBackground, "Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).")
        .value("no_saved_settings", ImGuiWindowFlags_NoSavedSettings, "Never load/save settings in .ini file")
        .value("no_mouse_inputs", ImGuiWindowFlags_NoMouseInputs, "Disable catching mouse, hovering test with pass through.")
        .value("menu_bar", ImGuiWindowFlags_MenuBar, "Has a menu-bar")
        .value("horizontal_scrollbar", ImGuiWindowFlags_HorizontalScrollbar, "Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the \"Horizontal Scrolling\" section.")
        .value("no_focus_on_appearing", ImGuiWindowFlags_NoFocusOnAppearing, "Disable taking focus when transitioning from hidden to visible state")
        .value("no_bring_to_front_on_focus", ImGuiWindowFlags_NoBringToFrontOnFocus, "Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)")
        .value("always_vertical_scrollbar", ImGuiWindowFlags_AlwaysVerticalScrollbar, "Always show vertical scrollbar (even if ContentSize.y < Size.y)")
        .value("always_horizontal_scrollbar", ImGuiWindowFlags_AlwaysHorizontalScrollbar, "Always show horizontal scrollbar (even if ContentSize.x < Size.x)")
        .value("always_use_window_padding", ImGuiWindowFlags_AlwaysUseWindowPadding, "Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)")
        .value("no_nav_inputs", ImGuiWindowFlags_NoNavInputs, "No gamepad/keyboard navigation within the window")
        .value("no_nav_focus", ImGuiWindowFlags_NoNavFocus, "No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)")
        .value("unsaved_document", ImGuiWindowFlags_UnsavedDocument, "Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.")
        .value("no_nav", ImGuiWindowFlags_NoNav, "")
        .value("no_decoration", ImGuiWindowFlags_NoDecoration, "")
        .value("no_inputs", ImGuiWindowFlags_NoInputs, "")
        // _SRCML_EMPTY_LINE_
        // [Internal]
        .value("nav_flattened", ImGuiWindowFlags_NavFlattened, "[BETA] On child window: allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows.")
        .value("child_window", ImGuiWindowFlags_ChildWindow, "Don't use! For internal use by BeginChild()")
        .value("tooltip", ImGuiWindowFlags_Tooltip, "Don't use! For internal use by BeginTooltip()")
        .value("popup", ImGuiWindowFlags_Popup, "Don't use! For internal use by BeginPopup()")
        .value("modal", ImGuiWindowFlags_Modal, "Don't use! For internal use by BeginPopupModal()")
        .value("child_menu", ImGuiWindowFlags_ChildMenu, "Don't use! For internal use by BeginMenu()")
        // ImGuiWindowFlags_ResizeFromAnySide    = 1 << 17,  // [Obsolete] --> Set io.ConfigWindowsResizeFromEdges=true and make sure mouse cursors are supported by backend (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors);



    py::enum_<ImGuiInputTextFlags_>(m, "ImGuiInputTextFlags_", py::arithmetic(), "Flags for ImGui::InputText()")
        .value("none", ImGuiInputTextFlags_None, "")
        .value("chars_decimal", ImGuiInputTextFlags_CharsDecimal, "Allow 0123456789.+-*/")
        .value("chars_hexadecimal", ImGuiInputTextFlags_CharsHexadecimal, "Allow 0123456789ABCDEFabcdef")
        .value("chars_uppercase", ImGuiInputTextFlags_CharsUppercase, "Turn a..z into A..Z")
        .value("chars_no_blank", ImGuiInputTextFlags_CharsNoBlank, "Filter out spaces, tabs")
        .value("auto_select_all", ImGuiInputTextFlags_AutoSelectAll, "Select entire text when first taking mouse focus")
        .value("enter_returns_true", ImGuiInputTextFlags_EnterReturnsTrue, "Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.")
        .value("callback_completion", ImGuiInputTextFlags_CallbackCompletion, "Callback on pressing TAB (for completion handling)")
        .value("callback_history", ImGuiInputTextFlags_CallbackHistory, "Callback on pressing Up/Down arrows (for history handling)")
        .value("callback_always", ImGuiInputTextFlags_CallbackAlways, "Callback on each iteration. User code may query cursor position, modify text buffer.")
        .value("callback_char_filter", ImGuiInputTextFlags_CallbackCharFilter, "Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.")
        .value("allow_tab_input", ImGuiInputTextFlags_AllowTabInput, "Pressing TAB input a '\t' character into the text field")
        .value("ctrl_enter_for_new_line", ImGuiInputTextFlags_CtrlEnterForNewLine, "In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).")
        .value("no_horizontal_scroll", ImGuiInputTextFlags_NoHorizontalScroll, "Disable following the cursor horizontally")
        .value("always_overwrite", ImGuiInputTextFlags_AlwaysOverwrite, "Overwrite mode")
        .value("read_only", ImGuiInputTextFlags_ReadOnly, "Read-only mode")
        .value("password", ImGuiInputTextFlags_Password, "Password mode, display all characters as '*'")
        .value("no_undo_redo", ImGuiInputTextFlags_NoUndoRedo, "Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().")
        .value("chars_scientific", ImGuiInputTextFlags_CharsScientific, "Allow 0123456789.+-*/eE (Scientific notation input)")
        .value("callback_resize", ImGuiInputTextFlags_CallbackResize, "Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)")
        .value("callback_edit", ImGuiInputTextFlags_CallbackEdit, "")
        // Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)
        // _SRCML_EMPTY_LINE_
        // Obsolete names (will be removed soon);



    py::enum_<ImGuiTreeNodeFlags_>(m, "ImGuiTreeNodeFlags_", py::arithmetic(), "Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader()")
        .value("none", ImGuiTreeNodeFlags_None, "")
        .value("selected", ImGuiTreeNodeFlags_Selected, "Draw as selected")
        .value("framed", ImGuiTreeNodeFlags_Framed, "Draw frame with background (e.g. for CollapsingHeader)")
        .value("allow_item_overlap", ImGuiTreeNodeFlags_AllowItemOverlap, "Hit testing to allow subsequent widgets to overlap this one")
        .value("no_tree_push_on_open", ImGuiTreeNodeFlags_NoTreePushOnOpen, "Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack")
        .value("no_auto_open_on_log", ImGuiTreeNodeFlags_NoAutoOpenOnLog, "Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)")
        .value("default_open", ImGuiTreeNodeFlags_DefaultOpen, "Default node to be open")
        .value("open_on_double_click", ImGuiTreeNodeFlags_OpenOnDoubleClick, "Need double-click to open node")
        .value("open_on_arrow", ImGuiTreeNodeFlags_OpenOnArrow, "Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.")
        .value("leaf", ImGuiTreeNodeFlags_Leaf, "No collapsing, no arrow (use as a convenience for leaf nodes).")
        .value("bullet", ImGuiTreeNodeFlags_Bullet, "Display a bullet instead of arrow")
        .value("frame_padding", ImGuiTreeNodeFlags_FramePadding, "Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().")
        .value("span_avail_width", ImGuiTreeNodeFlags_SpanAvailWidth, "Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.")
        .value("span_full_width", ImGuiTreeNodeFlags_SpanFullWidth, "Extend hit box to the left-most and right-most edges (bypass the indented area).")
        .value("nav_left_jumps_back_here", ImGuiTreeNodeFlags_NavLeftJumpsBackHere, "(WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)")
        .value("collapsing_header", ImGuiTreeNodeFlags_CollapsingHeader, "ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 14,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible");



    py::enum_<ImGuiPopupFlags_>(m, "ImGuiPopupFlags_", py::arithmetic(), "Flags for OpenPopup(), BeginPopupContext(), IsPopupOpen() functions.\n- To be backward compatible with older API which took an 'int mouse_button = 1' argument, we need to treat\nsmall flags values as a mouse button index, so we encode the mouse button in the first few bits of the flags.\nIt is therefore guaranteed to be legal to pass a mouse button index in ImGuiPopupFlags.\n- For the same reason, we exceptionally default the ImGuiPopupFlags argument of BeginPopupContextXXX functions to 1 instead of 0.\nIMPORTANT: because the default parameter is 1 (==ImGuiPopupFlags_MouseButtonRight), if you rely on the default parameter\nand want to another another flag, you need to pass in the ImGuiPopupFlags_MouseButtonRight flag.\n- Multiple buttons currently cannot be combined/or-ed in those functions (we could allow it later).")
        .value("none", ImGuiPopupFlags_None, "")
        .value("mouse_button_left", ImGuiPopupFlags_MouseButtonLeft, "For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)")
        .value("mouse_button_right", ImGuiPopupFlags_MouseButtonRight, "For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)")
        .value("mouse_button_middle", ImGuiPopupFlags_MouseButtonMiddle, "For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)")
        .value("mouse_button_mask_", ImGuiPopupFlags_MouseButtonMask_, "")
        .value("mouse_button_default_", ImGuiPopupFlags_MouseButtonDefault_, "")
        .value("no_open_over_existing_popup", ImGuiPopupFlags_NoOpenOverExistingPopup, "For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack")
        .value("no_open_over_items", ImGuiPopupFlags_NoOpenOverItems, "For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space")
        .value("any_popup_id", ImGuiPopupFlags_AnyPopupId, "For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.")
        .value("any_popup_level", ImGuiPopupFlags_AnyPopupLevel, "For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)")
        .value("any_popup", ImGuiPopupFlags_AnyPopup, "");



    py::enum_<ImGuiSelectableFlags_>(m, "ImGuiSelectableFlags_", py::arithmetic(), "Flags for ImGui::Selectable()")
        .value("none", ImGuiSelectableFlags_None, "")
        .value("dont_close_popups", ImGuiSelectableFlags_DontClosePopups, "Clicking this don't close parent popup window")
        .value("span_all_columns", ImGuiSelectableFlags_SpanAllColumns, "Selectable frame can span all columns (text will still fit in current column)")
        .value("allow_double_click", ImGuiSelectableFlags_AllowDoubleClick, "Generate press events on double clicks too")
        .value("disabled", ImGuiSelectableFlags_Disabled, "Cannot be selected, display grayed out text")
        .value("allow_item_overlap", ImGuiSelectableFlags_AllowItemOverlap, "(WIP) Hit testing to allow subsequent widgets to overlap this one");



    py::enum_<ImGuiComboFlags_>(m, "ImGuiComboFlags_", py::arithmetic(), "Flags for ImGui::BeginCombo()")
        .value("none", ImGuiComboFlags_None, "")
        .value("popup_align_left", ImGuiComboFlags_PopupAlignLeft, "Align the popup toward the left by default")
        .value("height_small", ImGuiComboFlags_HeightSmall, "Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()")
        .value("height_regular", ImGuiComboFlags_HeightRegular, "Max ~8 items visible (default)")
        .value("height_large", ImGuiComboFlags_HeightLarge, "Max ~20 items visible")
        .value("height_largest", ImGuiComboFlags_HeightLargest, "As many fitting items as possible")
        .value("no_arrow_button", ImGuiComboFlags_NoArrowButton, "Display on the preview box without the square arrow button")
        .value("no_preview", ImGuiComboFlags_NoPreview, "Display only a square arrow button")
        .value("height_mask_", ImGuiComboFlags_HeightMask_, "");



    py::enum_<ImGuiTabBarFlags_>(m, "ImGuiTabBarFlags_", py::arithmetic(), "Flags for ImGui::BeginTabBar()")
        .value("none", ImGuiTabBarFlags_None, "")
        .value("reorderable", ImGuiTabBarFlags_Reorderable, "Allow manually dragging tabs to re-order them + New tabs are appended at the end of list")
        .value("auto_select_new_tabs", ImGuiTabBarFlags_AutoSelectNewTabs, "Automatically select new tabs when they appear")
        .value("tab_list_popup_button", ImGuiTabBarFlags_TabListPopupButton, "Disable buttons to open the tab list popup")
        .value("no_close_with_middle_mouse_button", ImGuiTabBarFlags_NoCloseWithMiddleMouseButton, "Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.")
        .value("no_tab_list_scrolling_buttons", ImGuiTabBarFlags_NoTabListScrollingButtons, "Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)")
        .value("no_tooltip", ImGuiTabBarFlags_NoTooltip, "Disable tooltips when hovering a tab")
        .value("fitting_policy_resize_down", ImGuiTabBarFlags_FittingPolicyResizeDown, "Resize tabs when they don't fit")
        .value("fitting_policy_scroll", ImGuiTabBarFlags_FittingPolicyScroll, "Add scroll buttons when tabs don't fit")
        .value("fitting_policy_mask_", ImGuiTabBarFlags_FittingPolicyMask_, "")
        .value("fitting_policy_default_", ImGuiTabBarFlags_FittingPolicyDefault_, "");



    py::enum_<ImGuiTabItemFlags_>(m, "ImGuiTabItemFlags_", py::arithmetic(), "Flags for ImGui::BeginTabItem()")
        .value("none", ImGuiTabItemFlags_None, "")
        .value("unsaved_document", ImGuiTabItemFlags_UnsavedDocument, "Display a dot next to the title + tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.")
        .value("set_selected", ImGuiTabItemFlags_SetSelected, "Trigger flag to programmatically make the tab selected when calling BeginTabItem()")
        .value("no_close_with_middle_mouse_button", ImGuiTabItemFlags_NoCloseWithMiddleMouseButton, "Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.")
        .value("no_push_id", ImGuiTabItemFlags_NoPushId, "Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem()")
        .value("no_tooltip", ImGuiTabItemFlags_NoTooltip, "Disable tooltip for the given tab")
        .value("no_reorder", ImGuiTabItemFlags_NoReorder, "Disable reordering this tab or having another tab cross over this tab")
        .value("leading", ImGuiTabItemFlags_Leading, "Enforce the tab position to the left of the tab bar (after the tab list popup button)")
        .value("trailing", ImGuiTabItemFlags_Trailing, "Enforce the tab position to the right of the tab bar (before the scrolling buttons)");



    py::enum_<ImGuiTableFlags_>(m, "ImGuiTableFlags_", py::arithmetic(), "Flags for ImGui::BeginTable()\n- Important! Sizing policies have complex and subtle side effects, much more so than you would expect.\nRead comments/demos carefully + experiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to ImGuiTableFlags_SizingFixedFit    if ScrollX is on, or if host window has ImGuiWindowFlags_AlwaysAutoResize.\n- Default to ImGuiTableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to ImGuiTableFlags_SizingStretchSame -> all Columns defaults to ImGuiTableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns (if any) will generally obtain their requested width (unless the table cannot fit them all).\n- Stretch Columns will share the remaining width according to their respective weight.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on resizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed columns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary effects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to ImGuiTableFlags_SizingFixedFit -> all Columns defaults to ImGuiTableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed. Table will show an horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns, querying the content width to use item right-alignment e.g. SetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on, UNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling space is known and Stretch or mixed Fixed/Stretch columns become meaningful again.\n- Read on documentation at the top of imgui_tables.cpp for details.")
        .value("none", ImGuiTableFlags_None, "Features")
        .value("resizable", ImGuiTableFlags_Resizable, "Enable resizing columns.")
        .value("reorderable", ImGuiTableFlags_Reorderable, "Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)")
        .value("hideable", ImGuiTableFlags_Hideable, "Enable hiding/disabling columns in context menu.")
        .value("sortable", ImGuiTableFlags_Sortable, "Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.")
        .value("no_saved_settings", ImGuiTableFlags_NoSavedSettings, "Disable persisting columns order, width and sort settings in the .ini file.")
        .value("context_menu_in_body", ImGuiTableFlags_ContextMenuInBody, "Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().")
        // Decorations
        .value("row_bg", ImGuiTableFlags_RowBg, "Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)")
        .value("borders_inner_h", ImGuiTableFlags_BordersInnerH, "Draw horizontal borders between rows.")
        .value("borders_outer_h", ImGuiTableFlags_BordersOuterH, "Draw horizontal borders at the top and bottom.")
        .value("borders_inner_v", ImGuiTableFlags_BordersInnerV, "Draw vertical borders between columns.")
        .value("borders_outer_v", ImGuiTableFlags_BordersOuterV, "Draw vertical borders on the left and right sides.")
        .value("borders_h", ImGuiTableFlags_BordersH, "Draw horizontal borders.")
        .value("borders_v", ImGuiTableFlags_BordersV, "Draw vertical borders.")
        .value("borders_inner", ImGuiTableFlags_BordersInner, "Draw inner borders.")
        .value("borders_outer", ImGuiTableFlags_BordersOuter, "Draw outer borders.")
        .value("borders", ImGuiTableFlags_Borders, "Draw all borders.")
        .value("no_borders_in_body", ImGuiTableFlags_NoBordersInBody, "[ALPHA] Disable vertical borders in columns Body (borders will always appears in Headers). -> May move to style")
        .value("no_borders_in_body_until_resize", ImGuiTableFlags_NoBordersInBodyUntilResize, "[ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appears in Headers). -> May move to style")
        // Sizing Policy (read above for defaults)
        .value("sizing_fixed_fit", ImGuiTableFlags_SizingFixedFit, "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.")
        .value("sizing_fixed_same", ImGuiTableFlags_SizingFixedSame, "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.")
        .value("sizing_stretch_prop", ImGuiTableFlags_SizingStretchProp, "Columns default to _WidthStretch with default weights proportional to each columns contents widths.")
        .value("sizing_stretch_same", ImGuiTableFlags_SizingStretchSame, "Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().")
        // Sizing Extra Options
        .value("no_host_extend_x", ImGuiTableFlags_NoHostExtendX, "Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.")
        .value("no_host_extend_y", ImGuiTableFlags_NoHostExtendY, "Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.")
        .value("no_keep_columns_visible", ImGuiTableFlags_NoKeepColumnsVisible, "Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.")
        .value("precise_widths", ImGuiTableFlags_PreciseWidths, "Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.")
        // Clipping
        .value("no_clip", ImGuiTableFlags_NoClip, "Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().")
        // Padding
        .value("pad_outer_x", ImGuiTableFlags_PadOuterX, "Default if BordersOuterV is on. Enable outer-most padding. Generally desirable if you have headers.")
        .value("no_pad_outer_x", ImGuiTableFlags_NoPadOuterX, "Default if BordersOuterV is off. Disable outer-most padding.")
        .value("no_pad_inner_x", ImGuiTableFlags_NoPadInnerX, "Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).")
        // Scrolling
        .value("scroll_x", ImGuiTableFlags_ScrollX, "Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this create a child window, ScrollY is currently generally recommended when using ScrollX.")
        .value("scroll_y", ImGuiTableFlags_ScrollY, "Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.")
        // Sorting
        .value("sort_multi", ImGuiTableFlags_SortMulti, "Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).")
        .value("sort_tristate", ImGuiTableFlags_SortTristate, "Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).")
        // _SRCML_EMPTY_LINE_
        .value("sizing_mask_", ImGuiTableFlags_SizingMask_, "[Internal] Combinations and masks")
        // _SRCML_EMPTY_LINE_
        // Obsolete names (will be removed soon);



    py::enum_<ImGuiTableColumnFlags_>(m, "ImGuiTableColumnFlags_", py::arithmetic(), "Flags for ImGui::TableSetupColumn()")
        .value("none", ImGuiTableColumnFlags_None, "Input configuration flags")
        .value("disabled", ImGuiTableColumnFlags_Disabled, "Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)")
        .value("default_hide", ImGuiTableColumnFlags_DefaultHide, "Default as a hidden/disabled column.")
        .value("default_sort", ImGuiTableColumnFlags_DefaultSort, "Default as a sorting column.")
        .value("width_stretch", ImGuiTableColumnFlags_WidthStretch, "Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).")
        .value("width_fixed", ImGuiTableColumnFlags_WidthFixed, "Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).")
        .value("no_resize", ImGuiTableColumnFlags_NoResize, "Disable manual resizing.")
        .value("no_reorder", ImGuiTableColumnFlags_NoReorder, "Disable manual reordering this column, this will also prevent other columns from crossing over this column.")
        .value("no_hide", ImGuiTableColumnFlags_NoHide, "Disable ability to hide/disable this column.")
        .value("no_clip", ImGuiTableColumnFlags_NoClip, "Disable clipping for this column (all NoClip columns will render in a same draw command).")
        .value("no_sort", ImGuiTableColumnFlags_NoSort, "Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).")
        .value("no_sort_ascending", ImGuiTableColumnFlags_NoSortAscending, "Disable ability to sort in the ascending direction.")
        .value("no_sort_descending", ImGuiTableColumnFlags_NoSortDescending, "Disable ability to sort in the descending direction.")
        .value("no_header_label", ImGuiTableColumnFlags_NoHeaderLabel, "TableHeadersRow() will not submit label for this column. Convenient for some small columns. Name will still appear in context menu.")
        .value("no_header_width", ImGuiTableColumnFlags_NoHeaderWidth, "Disable header text width contribution to automatic column width.")
        .value("prefer_sort_ascending", ImGuiTableColumnFlags_PreferSortAscending, "Make the initial sort direction Ascending when first sorting on this column (default).")
        .value("prefer_sort_descending", ImGuiTableColumnFlags_PreferSortDescending, "Make the initial sort direction Descending when first sorting on this column.")
        .value("indent_enable", ImGuiTableColumnFlags_IndentEnable, "Use current Indent value when entering cell (default for column 0).")
        .value("indent_disable", ImGuiTableColumnFlags_IndentDisable, "Ignore current Indent value when entering cell (default for columns > 0). Indentation changes _within_ the cell will still be honored.")
        // _SRCML_EMPTY_LINE_
        // Output status flags, read-only via TableGetColumnFlags()
        .value("is_enabled", ImGuiTableColumnFlags_IsEnabled, "Status: is enabled == not hidden by user/api (referred to as \"Hide\" in _DefaultHide and _NoHide) flags.")
        .value("is_visible", ImGuiTableColumnFlags_IsVisible, "Status: is visible == is enabled AND not clipped by scrolling.")
        .value("is_sorted", ImGuiTableColumnFlags_IsSorted, "Status: is currently part of the sort specs")
        .value("is_hovered", ImGuiTableColumnFlags_IsHovered, "Status: is hovered by mouse")
        // _SRCML_EMPTY_LINE_
        .value("width_mask_", ImGuiTableColumnFlags_WidthMask_, "[Internal] Combinations and masks")
        .value("indent_mask_", ImGuiTableColumnFlags_IndentMask_, "")
        .value("status_mask_", ImGuiTableColumnFlags_StatusMask_, "")
        .value("no_direct_resize_", ImGuiTableColumnFlags_NoDirectResize_, "")
        // [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)
        // _SRCML_EMPTY_LINE_
        // Obsolete names (will be removed soon);



    py::enum_<ImGuiTableRowFlags_>(m, "ImGuiTableRowFlags_", py::arithmetic(), "Flags for ImGui::TableNextRow()")
        .value("none", ImGuiTableRowFlags_None, "")
        .value("headers", ImGuiTableRowFlags_Headers, "Identify header row (set default background color + width of its contents accounted differently for auto column width)");



    py::enum_<ImGuiTableBgTarget_>(m, "ImGuiTableBgTarget_", py::arithmetic(), "Enum for ImGui::TableSetBgColor()\nBackground colors are rendering in 3 layers:\n- Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.\n- Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.\n- Layer 2: draw with CellBg color if set.\nThe purpose of the two row/columns layers is to let you decide if a background color changes should override or blend with the existing color.\nWhen using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.\nIf you set the color of RowBg0 target, your color will override the existing RowBg0 color.\nIf you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.")
        .value("none", ImGuiTableBgTarget_None, "")
        .value("row_bg0", ImGuiTableBgTarget_RowBg0, "Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)")
        .value("row_bg1", ImGuiTableBgTarget_RowBg1, "Set row background color 1 (generally used for selection marking)")
        .value("cell_bg", ImGuiTableBgTarget_CellBg, "Set cell background color (top-most color)");



    py::enum_<ImGuiFocusedFlags_>(m, "ImGuiFocusedFlags_", py::arithmetic(), "Flags for ImGui::IsWindowFocused()")
        .value("none", ImGuiFocusedFlags_None, "")
        .value("child_windows", ImGuiFocusedFlags_ChildWindows, "Return true if any children of the window is focused")
        .value("root_window", ImGuiFocusedFlags_RootWindow, "Test from root window (top most parent of the current hierarchy)")
        .value("any_window", ImGuiFocusedFlags_AnyWindow, "Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!")
        .value("no_popup_hierarchy", ImGuiFocusedFlags_NoPopupHierarchy, "Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)")
        .value("root_and_child_windows", ImGuiFocusedFlags_RootAndChildWindows, "ImGuiFocusedFlags_DockHierarchy               = 1 << 4,   // Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)");



    py::enum_<ImGuiHoveredFlags_>(m, "ImGuiHoveredFlags_", py::arithmetic(), "Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()\nNote: if you are trying to check whether your mouse should be dispatched to Dear ImGui or to your app, you should use 'io.WantCaptureMouse' instead! Please read the FAQ!\nNote: windows with the ImGuiWindowFlags_NoInputs flag are ignored by IsWindowHovered() calls.")
        .value("none", ImGuiHoveredFlags_None, "Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.")
        .value("child_windows", ImGuiHoveredFlags_ChildWindows, "IsWindowHovered() only: Return true if any children of the window is hovered")
        .value("root_window", ImGuiHoveredFlags_RootWindow, "IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)")
        .value("any_window", ImGuiHoveredFlags_AnyWindow, "IsWindowHovered() only: Return true if any window is hovered")
        .value("no_popup_hierarchy", ImGuiHoveredFlags_NoPopupHierarchy, "IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)")
        // ImGuiHoveredFlags_DockHierarchy               = 1 << 4,   // IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
        .value("allow_when_blocked_by_popup", ImGuiHoveredFlags_AllowWhenBlockedByPopup, "Return true even if a popup window is normally blocking access to this item/window")
        // ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 << 6,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.
        .value("allow_when_blocked_by_active_item", ImGuiHoveredFlags_AllowWhenBlockedByActiveItem, "Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.")
        .value("allow_when_overlapped", ImGuiHoveredFlags_AllowWhenOverlapped, "IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window")
        .value("allow_when_disabled", ImGuiHoveredFlags_AllowWhenDisabled, "IsItemHovered() only: Return true even if the item is disabled")
        .value("no_nav_override", ImGuiHoveredFlags_NoNavOverride, "Disable using gamepad/keyboard navigation state when active, always query mouse.")
        .value("rect_only", ImGuiHoveredFlags_RectOnly, "")
        .value("root_and_child_windows", ImGuiHoveredFlags_RootAndChildWindows, "");



    py::enum_<ImGuiDragDropFlags_>(m, "ImGuiDragDropFlags_", py::arithmetic(), "Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()")
        .value("none", ImGuiDragDropFlags_None, "")
        // BeginDragDropSource() flags
        .value("source_no_preview_tooltip", ImGuiDragDropFlags_SourceNoPreviewTooltip, "By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disable this behavior.")
        .value("source_no_disable_hover", ImGuiDragDropFlags_SourceNoDisableHover, "By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disable this behavior so you can still call IsItemHovered() on the source item.")
        .value("source_no_hold_to_open_others", ImGuiDragDropFlags_SourceNoHoldToOpenOthers, "Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.")
        .value("source_allow_null_id", ImGuiDragDropFlags_SourceAllowNullID, "Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.")
        .value("source_extern", ImGuiDragDropFlags_SourceExtern, "External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously.")
        .value("source_auto_expire_payload", ImGuiDragDropFlags_SourceAutoExpirePayload, "Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)")
        // AcceptDragDropPayload() flags
        .value("accept_before_delivery", ImGuiDragDropFlags_AcceptBeforeDelivery, "AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.")
        .value("accept_no_draw_default_rect", ImGuiDragDropFlags_AcceptNoDrawDefaultRect, "Do not draw the default highlight rectangle when hovering over target.")
        .value("accept_no_preview_tooltip", ImGuiDragDropFlags_AcceptNoPreviewTooltip, "Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.")
        .value("accept_peek_only", ImGuiDragDropFlags_AcceptPeekOnly, "For peeking ahead and inspecting the payload before delivery.");



    py::enum_<ImGuiDataType_>(m, "ImGuiDataType_", py::arithmetic(), "A primary data type")
        .value("s8", ImGuiDataType_S8, "signed char / char (with sensible compilers)")
        .value("u8", ImGuiDataType_U8, "unsigned char")
        .value("s16", ImGuiDataType_S16, "short")
        .value("u16", ImGuiDataType_U16, "unsigned short")
        .value("s32", ImGuiDataType_S32, "int")
        .value("u32", ImGuiDataType_U32, "unsigned int")
        .value("s64", ImGuiDataType_S64, "long long / __int64")
        .value("u64", ImGuiDataType_U64, "unsigned long long / unsigned __int64")
        .value("float", ImGuiDataType_Float, "float")
        .value("double", ImGuiDataType_Double, "double");



    py::enum_<ImGuiDir_>(m, "ImGuiDir_", py::arithmetic(), "A cardinal direction")
        .value("none", ImGuiDir_None, "")
        .value("left", ImGuiDir_Left, "")
        .value("right", ImGuiDir_Right, "")
        .value("up", ImGuiDir_Up, "")
        .value("down", ImGuiDir_Down, "");



    py::enum_<ImGuiSortDirection_>(m, "ImGuiSortDirection_", py::arithmetic(), "A sorting direction")
        .value("none", ImGuiSortDirection_None, "")
        .value("ascending", ImGuiSortDirection_Ascending, "Ascending = 0->9, A->Z etc.")
        .value("descending", ImGuiSortDirection_Descending, "Descending = 9->0, Z->A etc.");



    py::enum_<ImGuiKey_>(m, "ImGuiKey_", py::arithmetic(), "Keys value 0 to 511 are left unused as legacy native/opaque key values (< 1.87)\nKeys value >= 512 are named keys (>= 1.87)")
        .value("none", ImGuiKey_None, "Keyboard")
        .value("tab", ImGuiKey_Tab, "== ImGuiKey_NamedKey_BEGIN")
        .value("left_arrow", ImGuiKey_LeftArrow, "")
        .value("right_arrow", ImGuiKey_RightArrow, "")
        .value("up_arrow", ImGuiKey_UpArrow, "")
        .value("down_arrow", ImGuiKey_DownArrow, "")
        .value("page_up", ImGuiKey_PageUp, "")
        .value("page_down", ImGuiKey_PageDown, "")
        .value("home", ImGuiKey_Home, "")
        .value("end", ImGuiKey_End, "")
        .value("insert", ImGuiKey_Insert, "")
        .value("delete", ImGuiKey_Delete, "")
        .value("backspace", ImGuiKey_Backspace, "")
        .value("space", ImGuiKey_Space, "")
        .value("enter", ImGuiKey_Enter, "")
        .value("escape", ImGuiKey_Escape, "")
        .value("left_ctrl", ImGuiKey_LeftCtrl, "")
        .value("left_shift", ImGuiKey_LeftShift, "")
        .value("left_alt", ImGuiKey_LeftAlt, "")
        .value("left_super", ImGuiKey_LeftSuper, "")
        .value("right_ctrl", ImGuiKey_RightCtrl, "")
        .value("right_shift", ImGuiKey_RightShift, "")
        .value("right_alt", ImGuiKey_RightAlt, "")
        .value("right_super", ImGuiKey_RightSuper, "")
        .value("menu", ImGuiKey_Menu, "")
        .value("0", ImGuiKey_0, "")
        .value("1", ImGuiKey_1, "")
        .value("2", ImGuiKey_2, "")
        .value("3", ImGuiKey_3, "")
        .value("4", ImGuiKey_4, "")
        .value("5", ImGuiKey_5, "")
        .value("6", ImGuiKey_6, "")
        .value("7", ImGuiKey_7, "")
        .value("8", ImGuiKey_8, "")
        .value("9", ImGuiKey_9, "")
        .value("a", ImGuiKey_A, "")
        .value("b", ImGuiKey_B, "")
        .value("c", ImGuiKey_C, "")
        .value("d", ImGuiKey_D, "")
        .value("e", ImGuiKey_E, "")
        .value("f", ImGuiKey_F, "")
        .value("g", ImGuiKey_G, "")
        .value("h", ImGuiKey_H, "")
        .value("i", ImGuiKey_I, "")
        .value("j", ImGuiKey_J, "")
        .value("k", ImGuiKey_K, "")
        .value("l", ImGuiKey_L, "")
        .value("m", ImGuiKey_M, "")
        .value("n", ImGuiKey_N, "")
        .value("o", ImGuiKey_O, "")
        .value("p", ImGuiKey_P, "")
        .value("q", ImGuiKey_Q, "")
        .value("r", ImGuiKey_R, "")
        .value("s", ImGuiKey_S, "")
        .value("t", ImGuiKey_T, "")
        .value("u", ImGuiKey_U, "")
        .value("v", ImGuiKey_V, "")
        .value("w", ImGuiKey_W, "")
        .value("x", ImGuiKey_X, "")
        .value("y", ImGuiKey_Y, "")
        .value("z", ImGuiKey_Z, "")
        .value("f1", ImGuiKey_F1, "")
        .value("f2", ImGuiKey_F2, "")
        .value("f3", ImGuiKey_F3, "")
        .value("f4", ImGuiKey_F4, "")
        .value("f5", ImGuiKey_F5, "")
        .value("f6", ImGuiKey_F6, "")
        .value("f7", ImGuiKey_F7, "")
        .value("f8", ImGuiKey_F8, "")
        .value("f9", ImGuiKey_F9, "")
        .value("f10", ImGuiKey_F10, "")
        .value("f11", ImGuiKey_F11, "")
        .value("f12", ImGuiKey_F12, "")
        .value("apostrophe", ImGuiKey_Apostrophe, "'")
        .value("comma", ImGuiKey_Comma, ",")
        .value("minus", ImGuiKey_Minus, "-")
        .value("period", ImGuiKey_Period, ".")
        .value("slash", ImGuiKey_Slash, "/")
        .value("semicolon", ImGuiKey_Semicolon, ";")
        .value("equal", ImGuiKey_Equal, "=")
        .value("left_bracket", ImGuiKey_LeftBracket, "[")
        .value("backslash", ImGuiKey_Backslash, "\ (this text inhibit multiline comment caused by backslash)")
        .value("right_bracket", ImGuiKey_RightBracket, "]")
        .value("grave_accent", ImGuiKey_GraveAccent, "`")
        .value("caps_lock", ImGuiKey_CapsLock, "")
        .value("scroll_lock", ImGuiKey_ScrollLock, "")
        .value("num_lock", ImGuiKey_NumLock, "")
        .value("print_screen", ImGuiKey_PrintScreen, "")
        .value("pause", ImGuiKey_Pause, "")
        .value("keypad0", ImGuiKey_Keypad0, "")
        .value("keypad1", ImGuiKey_Keypad1, "")
        .value("keypad2", ImGuiKey_Keypad2, "")
        .value("keypad3", ImGuiKey_Keypad3, "")
        .value("keypad4", ImGuiKey_Keypad4, "")
        .value("keypad5", ImGuiKey_Keypad5, "")
        .value("keypad6", ImGuiKey_Keypad6, "")
        .value("keypad7", ImGuiKey_Keypad7, "")
        .value("keypad8", ImGuiKey_Keypad8, "")
        .value("keypad9", ImGuiKey_Keypad9, "")
        .value("keypad_decimal", ImGuiKey_KeypadDecimal, "")
        .value("keypad_divide", ImGuiKey_KeypadDivide, "")
        .value("keypad_multiply", ImGuiKey_KeypadMultiply, "")
        .value("keypad_subtract", ImGuiKey_KeypadSubtract, "")
        .value("keypad_add", ImGuiKey_KeypadAdd, "")
        .value("keypad_enter", ImGuiKey_KeypadEnter, "")
        .value("keypad_equal", ImGuiKey_KeypadEqual, "")
        // _SRCML_EMPTY_LINE_
        // Gamepad (some of those are analog values, 0.0f to 1.0f)                              // NAVIGATION action
        .value("gamepad_start", ImGuiKey_GamepadStart, "Menu (Xbox)          + (Switch)   Start/Options (PS) // --")
        .value("gamepad_back", ImGuiKey_GamepadBack, "View (Xbox)          - (Switch)   Share (PS)         // --")
        .value("gamepad_face_up", ImGuiKey_GamepadFaceUp, "Y (Xbox)             X (Switch)   Triangle (PS)      // -> ImGuiNavInput_Input")
        .value("gamepad_face_down", ImGuiKey_GamepadFaceDown, "A (Xbox)             B (Switch)   Cross (PS)         // -> ImGuiNavInput_Activate")
        .value("gamepad_face_left", ImGuiKey_GamepadFaceLeft, "X (Xbox)             Y (Switch)   Square (PS)        // -> ImGuiNavInput_Menu")
        .value("gamepad_face_right", ImGuiKey_GamepadFaceRight, "B (Xbox)             A (Switch)   Circle (PS)        // -> ImGuiNavInput_Cancel")
        .value("gamepad_dpad_up", ImGuiKey_GamepadDpadUp, "D-pad Up                                             // -> ImGuiNavInput_DpadUp")
        .value("gamepad_dpad_down", ImGuiKey_GamepadDpadDown, "D-pad Down                                           // -> ImGuiNavInput_DpadDown")
        .value("gamepad_dpad_left", ImGuiKey_GamepadDpadLeft, "D-pad Left                                           // -> ImGuiNavInput_DpadLeft")
        .value("gamepad_dpad_right", ImGuiKey_GamepadDpadRight, "D-pad Right                                          // -> ImGuiNavInput_DpadRight")
        .value("gamepad_l1", ImGuiKey_GamepadL1, "L Bumper (Xbox)      L (Switch)   L1 (PS)            // -> ImGuiNavInput_FocusPrev + ImGuiNavInput_TweakSlow")
        .value("gamepad_r1", ImGuiKey_GamepadR1, "R Bumper (Xbox)      R (Switch)   R1 (PS)            // -> ImGuiNavInput_FocusNext + ImGuiNavInput_TweakFast")
        .value("gamepad_l2", ImGuiKey_GamepadL2, "L Trigger (Xbox)     ZL (Switch)  L2 (PS) [Analog]")
        .value("gamepad_r2", ImGuiKey_GamepadR2, "R Trigger (Xbox)     ZR (Switch)  R2 (PS) [Analog]")
        .value("gamepad_l3", ImGuiKey_GamepadL3, "L Thumbstick (Xbox)  L3 (Switch)  L3 (PS)")
        .value("gamepad_r3", ImGuiKey_GamepadR3, "R Thumbstick (Xbox)  R3 (Switch)  R3 (PS)")
        .value("gamepad_l_stick_up", ImGuiKey_GamepadLStickUp, "[Analog]                                             // -> ImGuiNavInput_LStickUp")
        .value("gamepad_l_stick_down", ImGuiKey_GamepadLStickDown, "[Analog]                                             // -> ImGuiNavInput_LStickDown")
        .value("gamepad_l_stick_left", ImGuiKey_GamepadLStickLeft, "[Analog]                                             // -> ImGuiNavInput_LStickLeft")
        .value("gamepad_l_stick_right", ImGuiKey_GamepadLStickRight, "[Analog]                                             // -> ImGuiNavInput_LStickRight")
        .value("gamepad_r_stick_up", ImGuiKey_GamepadRStickUp, "[Analog]")
        .value("gamepad_r_stick_down", ImGuiKey_GamepadRStickDown, "[Analog]")
        .value("gamepad_r_stick_left", ImGuiKey_GamepadRStickLeft, "[Analog]")
        .value("gamepad_r_stick_right", ImGuiKey_GamepadRStickRight, "[Analog]")
        // _SRCML_EMPTY_LINE_
        .value("mod_ctrl", ImGuiKey_ModCtrl, "Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls)\n- This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing\nthem to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc.\n- Code polling every keys (e.g. an interface to detect a key press for input mapping) might want to ignore those\nand prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiKey_ModCtrl).\n- In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys.\nIn practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and\nbackends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...")
        .value("mod_shift", ImGuiKey_ModShift, "")
        .value("mod_alt", ImGuiKey_ModAlt, "")
        .value("mod_super", ImGuiKey_ModSuper, "")
        // _SRCML_EMPTY_LINE_
        // End of list
        // _SRCML_EMPTY_LINE_
        .value("named_key_begin", ImGuiKey_NamedKey_BEGIN, "[Internal] Prior to 1.87 we required user to fill io.KeysDown[512] using their own native index + a io.KeyMap[] array.\nWe are ditching this method but keeping a legacy path for user code doing e.g. IsKeyPressed(MY_NATIVE_KEY_CODE)")
        .value("named_key_end", ImGuiKey_NamedKey_END, "")
        .value("named_key_count", ImGuiKey_NamedKey_COUNT, "")
        // _SRCML_EMPTY_LINE_;



    py::enum_<ImGuiModFlags_>(m, "ImGuiModFlags_", py::arithmetic(), "Helper \"flags\" version of key-mods to store and compare multiple key-mods easily. Sometimes used for storage (e.g. io.KeyMods) but otherwise not much used in public API.")
        .value("none", ImGuiModFlags_None, "")
        .value("ctrl", ImGuiModFlags_Ctrl, "")
        .value("shift", ImGuiModFlags_Shift, "")
        .value("alt", ImGuiModFlags_Alt, "Menu")
        .value("super", ImGuiModFlags_Super, "Cmd/Super/Windows key");



    py::enum_<ImGuiNavInput_>(m, "ImGuiNavInput_", py::arithmetic(), "Gamepad/Keyboard navigation\nSince >= 1.87 backends you generally don't need to care about this enum since io.NavInputs[] is setup automatically. This might become private/internal some day.\nKeyboard: Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard to enable. NewFrame() will automatically fill io.NavInputs[] based on your io.AddKeyEvent() calls.\nGamepad:  Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad to enable. Backend: set ImGuiBackendFlags_HasGamepad and fill the io.NavInputs[] fields before calling NewFrame(). Note that io.NavInputs[] is cleared by EndFrame().\nRead instructions in imgui.cpp for more details. Download PNG/PSD at http://dearimgui.org/controls_sheets.")
        // Gamepad Mapping
        .value("activate", ImGuiNavInput_Activate, "Activate / Open / Toggle / Tweak value       // e.g. Cross  (PS4), A (Xbox), A (Switch), Space (Keyboard)")
        .value("cancel", ImGuiNavInput_Cancel, "Cancel / Close / Exit                        // e.g. Circle (PS4), B (Xbox), B (Switch), Escape (Keyboard)")
        .value("input", ImGuiNavInput_Input, "Text input / On-Screen keyboard              // e.g. Triang.(PS4), Y (Xbox), X (Switch), Return (Keyboard)")
        .value("menu", ImGuiNavInput_Menu, "Tap: Toggle menu / Hold: Focus, Move, Resize // e.g. Square (PS4), X (Xbox), Y (Switch), Alt (Keyboard)")
        .value("dpad_left", ImGuiNavInput_DpadLeft, "Move / Tweak / Resize window (w/ PadMenu)    // e.g. D-pad Left/Right/Up/Down (Gamepads), Arrow keys (Keyboard)")
        .value("dpad_right", ImGuiNavInput_DpadRight, "")
        .value("dpad_up", ImGuiNavInput_DpadUp, "")
        .value("dpad_down", ImGuiNavInput_DpadDown, "")
        .value("l_stick_left", ImGuiNavInput_LStickLeft, "Scroll / Move window (w/ PadMenu)            // e.g. Left Analog Stick Left/Right/Up/Down")
        .value("l_stick_right", ImGuiNavInput_LStickRight, "")
        .value("l_stick_up", ImGuiNavInput_LStickUp, "")
        .value("l_stick_down", ImGuiNavInput_LStickDown, "")
        .value("focus_prev", ImGuiNavInput_FocusPrev, "Focus Next window (w/ PadMenu)               // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)")
        .value("focus_next", ImGuiNavInput_FocusNext, "Focus Prev window (w/ PadMenu)               // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)")
        .value("tweak_slow", ImGuiNavInput_TweakSlow, "Slower tweaks                                // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)")
        .value("tweak_fast", ImGuiNavInput_TweakFast, "Faster tweaks                                // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)")
        // _SRCML_EMPTY_LINE_
        // [Internal] Don't use directly! This is used internally to differentiate keyboard from gamepad inputs for behaviors that require to differentiate them.
        // Keyboard behavior that have no corresponding gamepad mapping (e.g. CTRL+TAB) will be directly reading from keyboard keys instead of io.NavInputs[].
        .value("key_left_", ImGuiNavInput_KeyLeft_, "Move left                                    // = Arrow keys")
        .value("key_right_", ImGuiNavInput_KeyRight_, "Move right")
        .value("key_up_", ImGuiNavInput_KeyUp_, "Move up")
        .value("key_down_", ImGuiNavInput_KeyDown_, "Move down");



    py::enum_<ImGuiConfigFlags_>(m, "ImGuiConfigFlags_", py::arithmetic(), "Configuration flags stored in io.ConfigFlags. Set by user/application.")
        .value("none", ImGuiConfigFlags_None, "")
        .value("nav_enable_keyboard", ImGuiConfigFlags_NavEnableKeyboard, "Master keyboard navigation enable flag. NewFrame() will automatically fill io.NavInputs[] based on io.AddKeyEvent() calls")
        .value("nav_enable_gamepad", ImGuiConfigFlags_NavEnableGamepad, "Master gamepad navigation enable flag. This is mostly to instruct your imgui backend to fill io.NavInputs[]. Backend also needs to set ImGuiBackendFlags_HasGamepad.")
        .value("nav_enable_set_mouse_pos", ImGuiConfigFlags_NavEnableSetMousePos, "Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your backend, otherwise ImGui will react as if the mouse is jumping around back and forth.")
        .value("nav_no_capture_keyboard", ImGuiConfigFlags_NavNoCaptureKeyboard, "Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.")
        .value("no_mouse", ImGuiConfigFlags_NoMouse, "Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the backend.")
        .value("no_mouse_cursor_change", ImGuiConfigFlags_NoMouseCursorChange, "Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.")
        // _SRCML_EMPTY_LINE_
        // User storage (to allow your backend/engine to communicate to code that may be shared between multiple projects. Those flags are NOT used by core Dear ImGui)
        .value("is_srgb", ImGuiConfigFlags_IsSRGB, "Application is SRGB-aware.")
        .value("is_touch_screen", ImGuiConfigFlags_IsTouchScreen, "Application is using a touch screen instead of a mouse.");



    py::enum_<ImGuiBackendFlags_>(m, "ImGuiBackendFlags_", py::arithmetic(), "Backend capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom backend.")
        .value("none", ImGuiBackendFlags_None, "")
        .value("has_gamepad", ImGuiBackendFlags_HasGamepad, "Backend Platform supports gamepad and currently has one connected.")
        .value("has_mouse_cursors", ImGuiBackendFlags_HasMouseCursors, "Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.")
        .value("has_set_mouse_pos", ImGuiBackendFlags_HasSetMousePos, "Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).")
        .value("renderer_has_vtx_offset", ImGuiBackendFlags_RendererHasVtxOffset, "Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.");



    py::enum_<ImGuiCol_>(m, "ImGuiCol_", py::arithmetic(), "Enumeration for PushStyleColor() / PopStyleColor()")
        .value("text", ImGuiCol_Text, "")
        .value("text_disabled", ImGuiCol_TextDisabled, "")
        .value("window_bg", ImGuiCol_WindowBg, "Background of normal windows")
        .value("child_bg", ImGuiCol_ChildBg, "Background of child windows")
        .value("popup_bg", ImGuiCol_PopupBg, "Background of popups, menus, tooltips windows")
        .value("border", ImGuiCol_Border, "")
        .value("border_shadow", ImGuiCol_BorderShadow, "")
        .value("frame_bg", ImGuiCol_FrameBg, "Background of checkbox, radio button, plot, slider, text input")
        .value("frame_bg_hovered", ImGuiCol_FrameBgHovered, "")
        .value("frame_bg_active", ImGuiCol_FrameBgActive, "")
        .value("title_bg", ImGuiCol_TitleBg, "")
        .value("title_bg_active", ImGuiCol_TitleBgActive, "")
        .value("title_bg_collapsed", ImGuiCol_TitleBgCollapsed, "")
        .value("menu_bar_bg", ImGuiCol_MenuBarBg, "")
        .value("scrollbar_bg", ImGuiCol_ScrollbarBg, "")
        .value("scrollbar_grab", ImGuiCol_ScrollbarGrab, "")
        .value("scrollbar_grab_hovered", ImGuiCol_ScrollbarGrabHovered, "")
        .value("scrollbar_grab_active", ImGuiCol_ScrollbarGrabActive, "")
        .value("check_mark", ImGuiCol_CheckMark, "")
        .value("slider_grab", ImGuiCol_SliderGrab, "")
        .value("slider_grab_active", ImGuiCol_SliderGrabActive, "")
        .value("button", ImGuiCol_Button, "")
        .value("button_hovered", ImGuiCol_ButtonHovered, "")
        .value("button_active", ImGuiCol_ButtonActive, "")
        .value("header", ImGuiCol_Header, "Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem")
        .value("header_hovered", ImGuiCol_HeaderHovered, "")
        .value("header_active", ImGuiCol_HeaderActive, "")
        .value("separator", ImGuiCol_Separator, "")
        .value("separator_hovered", ImGuiCol_SeparatorHovered, "")
        .value("separator_active", ImGuiCol_SeparatorActive, "")
        .value("resize_grip", ImGuiCol_ResizeGrip, "Resize grip in lower-right and lower-left corners of windows.")
        .value("resize_grip_hovered", ImGuiCol_ResizeGripHovered, "")
        .value("resize_grip_active", ImGuiCol_ResizeGripActive, "")
        .value("tab", ImGuiCol_Tab, "TabItem in a TabBar")
        .value("tab_hovered", ImGuiCol_TabHovered, "")
        .value("tab_active", ImGuiCol_TabActive, "")
        .value("tab_unfocused", ImGuiCol_TabUnfocused, "")
        .value("tab_unfocused_active", ImGuiCol_TabUnfocusedActive, "")
        .value("plot_lines", ImGuiCol_PlotLines, "")
        .value("plot_lines_hovered", ImGuiCol_PlotLinesHovered, "")
        .value("plot_histogram", ImGuiCol_PlotHistogram, "")
        .value("plot_histogram_hovered", ImGuiCol_PlotHistogramHovered, "")
        .value("table_header_bg", ImGuiCol_TableHeaderBg, "Table header background")
        .value("table_border_strong", ImGuiCol_TableBorderStrong, "Table outer and header borders (prefer using Alpha=1.0 here)")
        .value("table_border_light", ImGuiCol_TableBorderLight, "Table inner borders (prefer using Alpha=1.0 here)")
        .value("table_row_bg", ImGuiCol_TableRowBg, "Table row background (even rows)")
        .value("table_row_bg_alt", ImGuiCol_TableRowBgAlt, "Table row background (odd rows)")
        .value("text_selected_bg", ImGuiCol_TextSelectedBg, "")
        .value("drag_drop_target", ImGuiCol_DragDropTarget, "Rectangle highlighting a drop target")
        .value("nav_highlight", ImGuiCol_NavHighlight, "Gamepad/keyboard: current highlighted item")
        .value("nav_windowing_highlight", ImGuiCol_NavWindowingHighlight, "Highlight window when using CTRL+TAB")
        .value("nav_windowing_dim_bg", ImGuiCol_NavWindowingDimBg, "Darken/colorize entire screen behind the CTRL+TAB window list, when active")
        .value("modal_window_dim_bg", ImGuiCol_ModalWindowDimBg, "Darken/colorize entire screen behind a modal window, when one is active");



    py::enum_<ImGuiStyleVar_>(m, "ImGuiStyleVar_", py::arithmetic(), "Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.\n- The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code.\nDuring initialization or between frames, feel free to just poke into ImGuiStyle directly.\n- Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description.\nIn Visual Studio IDE: CTRL+comma (\"Edit.GoToAll\") can follow symbols in comments, whereas CTRL+F12 (\"Edit.GoToImplementation\") cannot.\nWith Visual Assist installed: ALT+G (\"VAssistX.GoToImplementation\") can also follow symbols in comments.\n- When changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.")
        // Enum name --------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)
        .value("alpha", ImGuiStyleVar_Alpha, "float     Alpha")
        .value("disabled_alpha", ImGuiStyleVar_DisabledAlpha, "float     DisabledAlpha")
        .value("window_padding", ImGuiStyleVar_WindowPadding, "ImVec2    WindowPadding")
        .value("window_rounding", ImGuiStyleVar_WindowRounding, "float     WindowRounding")
        .value("window_border_size", ImGuiStyleVar_WindowBorderSize, "float     WindowBorderSize")
        .value("window_min_size", ImGuiStyleVar_WindowMinSize, "ImVec2    WindowMinSize")
        .value("window_title_align", ImGuiStyleVar_WindowTitleAlign, "ImVec2    WindowTitleAlign")
        .value("child_rounding", ImGuiStyleVar_ChildRounding, "float     ChildRounding")
        .value("child_border_size", ImGuiStyleVar_ChildBorderSize, "float     ChildBorderSize")
        .value("popup_rounding", ImGuiStyleVar_PopupRounding, "float     PopupRounding")
        .value("popup_border_size", ImGuiStyleVar_PopupBorderSize, "float     PopupBorderSize")
        .value("frame_padding", ImGuiStyleVar_FramePadding, "ImVec2    FramePadding")
        .value("frame_rounding", ImGuiStyleVar_FrameRounding, "float     FrameRounding")
        .value("frame_border_size", ImGuiStyleVar_FrameBorderSize, "float     FrameBorderSize")
        .value("item_spacing", ImGuiStyleVar_ItemSpacing, "ImVec2    ItemSpacing")
        .value("item_inner_spacing", ImGuiStyleVar_ItemInnerSpacing, "ImVec2    ItemInnerSpacing")
        .value("indent_spacing", ImGuiStyleVar_IndentSpacing, "float     IndentSpacing")
        .value("cell_padding", ImGuiStyleVar_CellPadding, "ImVec2    CellPadding")
        .value("scrollbar_size", ImGuiStyleVar_ScrollbarSize, "float     ScrollbarSize")
        .value("scrollbar_rounding", ImGuiStyleVar_ScrollbarRounding, "float     ScrollbarRounding")
        .value("grab_min_size", ImGuiStyleVar_GrabMinSize, "float     GrabMinSize")
        .value("grab_rounding", ImGuiStyleVar_GrabRounding, "float     GrabRounding")
        .value("tab_rounding", ImGuiStyleVar_TabRounding, "float     TabRounding")
        .value("button_text_align", ImGuiStyleVar_ButtonTextAlign, "ImVec2    ButtonTextAlign")
        .value("selectable_text_align", ImGuiStyleVar_SelectableTextAlign, "ImVec2    SelectableTextAlign");



    py::enum_<ImGuiButtonFlags_>(m, "ImGuiButtonFlags_", py::arithmetic(), "Flags for InvisibleButton() [extended in imgui_internal.h]")
        .value("none", ImGuiButtonFlags_None, "")
        .value("mouse_button_left", ImGuiButtonFlags_MouseButtonLeft, "React on left mouse button (default)")
        .value("mouse_button_right", ImGuiButtonFlags_MouseButtonRight, "React on right mouse button")
        .value("mouse_button_middle", ImGuiButtonFlags_MouseButtonMiddle, "React on center mouse button")
        // _SRCML_EMPTY_LINE_
        .value("mouse_button_mask_", ImGuiButtonFlags_MouseButtonMask_, "[Internal]")
        .value("mouse_button_default_", ImGuiButtonFlags_MouseButtonDefault_, "");



    py::enum_<ImGuiColorEditFlags_>(m, "ImGuiColorEditFlags_", py::arithmetic(), "Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()")
        .value("none", ImGuiColorEditFlags_None, "")
        .value("no_alpha", ImGuiColorEditFlags_NoAlpha, "             // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).")
        .value("no_picker", ImGuiColorEditFlags_NoPicker, "             // ColorEdit: disable picker when clicking on color square.")
        .value("no_options", ImGuiColorEditFlags_NoOptions, "             // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.")
        .value("no_small_preview", ImGuiColorEditFlags_NoSmallPreview, "             // ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)")
        .value("no_inputs", ImGuiColorEditFlags_NoInputs, "             // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).")
        .value("no_tooltip", ImGuiColorEditFlags_NoTooltip, "             // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.")
        .value("no_label", ImGuiColorEditFlags_NoLabel, "             // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).")
        .value("no_side_preview", ImGuiColorEditFlags_NoSidePreview, "             // ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.")
        .value("no_drag_drop", ImGuiColorEditFlags_NoDragDrop, "             // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.")
        .value("no_border", ImGuiColorEditFlags_NoBorder, "             // ColorButton: disable border (which is enforced by default)")
        // _SRCML_EMPTY_LINE_
        // User Options (right-click on widget to change some of them).
        .value("alpha_bar", ImGuiColorEditFlags_AlphaBar, "             // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.")
        .value("alpha_preview", ImGuiColorEditFlags_AlphaPreview, "             // ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.")
        .value("alpha_preview_half", ImGuiColorEditFlags_AlphaPreviewHalf, "             // ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.")
        .value("hdr", ImGuiColorEditFlags_HDR, "             // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).")
        .value("display_rgb", ImGuiColorEditFlags_DisplayRGB, "[Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.")
        .value("display_hsv", ImGuiColorEditFlags_DisplayHSV, "[Display]    // \"")
        .value("display_hex", ImGuiColorEditFlags_DisplayHex, "[Display]    // \"")
        .value("uint8", ImGuiColorEditFlags_Uint8, "[DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.")
        .value("float", ImGuiColorEditFlags_Float, "[DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.")
        .value("picker_hue_bar", ImGuiColorEditFlags_PickerHueBar, "[Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.")
        .value("picker_hue_wheel", ImGuiColorEditFlags_PickerHueWheel, "[Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.")
        .value("input_rgb", ImGuiColorEditFlags_InputRGB, "[Input]      // ColorEdit, ColorPicker: input and output data in RGB format.")
        .value("input_hsv", ImGuiColorEditFlags_InputHSV, "[Input]      // ColorEdit, ColorPicker: input and output data in HSV format.")
        // _SRCML_EMPTY_LINE_
        .value("default_options_", ImGuiColorEditFlags_DefaultOptions_, "Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to\noverride them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.")
        // _SRCML_EMPTY_LINE_
        .value("display_mask_", ImGuiColorEditFlags_DisplayMask_, "[Internal] Masks")
        .value("data_type_mask_", ImGuiColorEditFlags_DataTypeMask_, "")
        .value("picker_mask_", ImGuiColorEditFlags_PickerMask_, "")
        .value("input_mask_", ImGuiColorEditFlags_InputMask_, "")
        // _SRCML_EMPTY_LINE_
        // Obsolete names (will be removed)
        // ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiColorEditFlags_DisplayHSV, ImGuiColorEditFlags_HEX = ImGuiColorEditFlags_DisplayHex  // [renamed in 1.69];



    py::enum_<ImGuiSliderFlags_>(m, "ImGuiSliderFlags_", py::arithmetic(), "Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.\nWe use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.")
        .value("none", ImGuiSliderFlags_None, "")
        .value("always_clamp", ImGuiSliderFlags_AlwaysClamp, "Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.")
        .value("logarithmic", ImGuiSliderFlags_Logarithmic, "Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.")
        .value("no_round_to_format", ImGuiSliderFlags_NoRoundToFormat, "Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)")
        .value("no_input", ImGuiSliderFlags_NoInput, "Disable CTRL+Click or Enter key allowing to input text directly into the widget")
        .value("invalid_mask_", ImGuiSliderFlags_InvalidMask_, "")
        // [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.
        // _SRCML_EMPTY_LINE_
        // Obsolete names (will be removed);



    py::enum_<ImGuiMouseButton_>(m, "ImGuiMouseButton_", py::arithmetic(), "Identify a mouse button.\nThose values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.")
        .value("left", ImGuiMouseButton_Left, "")
        .value("right", ImGuiMouseButton_Right, "")
        .value("middle", ImGuiMouseButton_Middle, "");



    py::enum_<ImGuiMouseCursor_>(m, "ImGuiMouseCursor_", py::arithmetic(), "Enumeration for GetMouseCursor()\nUser code may request backend to display given cursor by calling SetMouseCursor(), which is why we have some cursors that are marked unused here")
        .value("none", ImGuiMouseCursor_None, "")
        .value("arrow", ImGuiMouseCursor_Arrow, "")
        .value("text_input", ImGuiMouseCursor_TextInput, "When hovering over InputText, etc.")
        .value("resize_all", ImGuiMouseCursor_ResizeAll, "(Unused by Dear ImGui functions)")
        .value("resize_ns", ImGuiMouseCursor_ResizeNS, "When hovering over an horizontal border")
        .value("resize_ew", ImGuiMouseCursor_ResizeEW, "When hovering over a vertical border or a column")
        .value("resize_nesw", ImGuiMouseCursor_ResizeNESW, "When hovering over the bottom-left corner of a window")
        .value("resize_nwse", ImGuiMouseCursor_ResizeNWSE, "When hovering over the bottom-right corner of a window")
        .value("hand", ImGuiMouseCursor_Hand, "(Unused by Dear ImGui functions. Use for e.g. hyperlinks)")
        .value("not_allowed", ImGuiMouseCursor_NotAllowed, "When hovering something with disallowed interaction. Usually a crossed circle.");



    py::enum_<ImGuiCond_>(m, "ImGuiCond_", py::arithmetic(), "Enumeration for ImGui::SetWindow(), SetNextWindow(), SetNextItem() functions\nRepresent a condition.\nImportant: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always.")
        .value("none", ImGuiCond_None, "No condition (always set the variable), same as _Always")
        .value("always", ImGuiCond_Always, "No condition (always set the variable)")
        .value("once", ImGuiCond_Once, "Set the variable once per runtime session (only the first call will succeed)")
        .value("first_use_ever", ImGuiCond_FirstUseEver, "Set the variable if the object/window has no persistently saved data (no entry in .ini file)")
        .value("appearing", ImGuiCond_Appearing, "Set the variable if the object/window is appearing after being hidden/inactive (or the first time)");



    auto pyClassImNewWrapper = py::class_<ImNewWrapper>
        (m, "ImNewWrapper", "")
        .def(py::init<>() // implicit default constructor
        ; 


    m.def("im_delete",    // :1753
        [](T * p)
        {
            IM_DELETE(p);
        },
        py::arg("p")
    );


    auto pyClassImVector = py::class_<ImVector>
        (m, "ImVector", "")
        .def_readwrite("size", &ImVector::Size, "")
        .def_readwrite("capacity", &ImVector::Capacity, "")
        .def_readwrite("data", &ImVector::Data, "")
        .def(py::init<>(),
            "Constructors, destructor"))
        .def(py::init<const ImVector<T> &>(),
            py::arg("src"))
        .def("clear",    // :1785
            [](ImVector & self)
            {
                self.clear();
            },
            "Important: does not destruct anything"
        )

        .def("clear_delete",    // :1786
            [](ImVector & self)
            {
                self.clear_delete();
            },
            "Important: never called automatically! always explicit."
        )

        .def("clear_destruct",    // :1787
            [](ImVector & self)
            {
                self.clear_destruct();
            },
            "Important: never called automatically! always explicit."
        )

        .def("empty",    // :1789
            [](ImVector & self)
            {
                return self.empty();
            }
        )

        .def("size",    // :1790
            [](ImVector & self)
            {
                return self.size();
            }
        )

        .def("size_in_bytes",    // :1791
            [](ImVector & self)
            {
                return self.size_in_bytes();
            }
        )

        .def("max_size",    // :1792
            [](ImVector & self)
            {
                return self.max_size();
            }
        )

        .def("capacity",    // :1793
            [](ImVector & self)
            {
                return self.capacity();
            }
        )

        .def("begin",    // :1797
            [](ImVector & self)
            {
                return self.begin();
            }
        )

        .def("begin",    // :1798
            [](ImVector & self)
            {
                return self.begin();
            }
        )

        .def("end",    // :1799
            [](ImVector & self)
            {
                return self.end();
            }
        )

        .def("end",    // :1800
            [](ImVector & self)
            {
                return self.end();
            }
        )

        .def("front",    // :1801
            [](ImVector & self)
            {
                return self.front();
            }
        )

        .def("front",    // :1802
            [](ImVector & self)
            {
                return self.front();
            }
        )

        .def("back",    // :1803
            [](ImVector & self)
            {
                return self.back();
            }
        )

        .def("back",    // :1804
            [](ImVector & self)
            {
                return self.back();
            }
        )

        .def("swap",    // :1805
            [](ImVector & self, ImVector<T> & rhs)
            {
                self.swap(rhs);
            },
            py::arg("rhs")
        )

        .def("_grow_capacity",    // :1807
            [](ImVector & self, int sz)
            {
                return self._grow_capacity(sz);
            },
            py::arg("sz")
        )

        .def("resize",    // :1808
            [](ImVector & self, int new_size)
            {
                self.resize(new_size);
            },
            py::arg("new_size")
        )

        .def("resize",    // :1809
            [](ImVector & self, int new_size, const T & v)
            {
                self.resize(new_size, v);
            },
            py::arg("new_size"),
            py::arg("v")
        )

        .def("shrink",    // :1810
            [](ImVector & self, int new_size)
            {
                self.shrink(new_size);
            },
            py::arg("new_size"),
            "Resize a vector to a smaller size, guaranteed not to cause a reallocation"
        )

        .def("reserve",    // :1811
            [](ImVector & self, int new_capacity)
            {
                self.reserve(new_capacity);
            },
            py::arg("new_capacity")
        )

        .def("push_back",    // :1814
            [](ImVector & self, const T & v)
            {
                self.push_back(v);
            },
            py::arg("v"),
            "NB: It is illegal to call push_back/push_front/insert with a reference pointing inside the ImVector data itself! e.g. v.push_back(v[10]) is forbidden."
        )

        .def("pop_back",    // :1815
            [](ImVector & self)
            {
                self.pop_back();
            }
        )

        .def("push_front",    // :1816
            [](ImVector & self, const T & v)
            {
                self.push_front(v);
            },
            py::arg("v")
        )

        .def("erase",    // :1817
            [](ImVector & self, const T * it)
            {
                return self.erase(it);
            },
            py::arg("it")
        )

        .def("erase",    // :1818
            [](ImVector & self, const T * it, const T * it_last)
            {
                return self.erase(it, it_last);
            },
            py::arg("it"),
            py::arg("it_last")
        )

        .def("erase_unsorted",    // :1819
            [](ImVector & self, const T * it)
            {
                return self.erase_unsorted(it);
            },
            py::arg("it")
        )

        .def("insert",    // :1820
            [](ImVector & self, const T * it, const T & v)
            {
                return self.insert(it, v);
            },
            py::arg("it"),
            py::arg("v")
        )

        .def("contains",    // :1821
            [](ImVector & self, const T & v)
            {
                return self.contains(v);
            },
            py::arg("v")
        )

        .def("find",    // :1822
            [](ImVector & self, const T & v)
            {
                return self.find(v);
            },
            py::arg("v")
        )

        .def("find",    // :1823
            [](ImVector & self, const T & v)
            {
                return self.find(v);
            },
            py::arg("v")
        )

        .def("find_erase",    // :1824
            [](ImVector & self, const T & v)
            {
                return self.find_erase(v);
            },
            py::arg("v")
        )

        .def("find_erase_unsorted",    // :1825
            [](ImVector & self, const T & v)
            {
                return self.find_erase_unsorted(v);
            },
            py::arg("v")
        )

        .def("index_from_ptr",    // :1826
            [](ImVector & self, const T * it)
            {
                return self.index_from_ptr(it);
            },
            py::arg("it")
        )

        ; 



    auto pyClassImGuiStyle = py::class_<ImGuiStyle>
        (m, "ImGuiStyle", "")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("alpha", &ImGuiStyle::Alpha, "Global alpha applies to everything in Dear ImGui.")
        .def_readwrite("disabled_alpha", &ImGuiStyle::DisabledAlpha, "Additional alpha multiplier applied by BeginDisabled(). Multiply over current value of Alpha.")
        .def_readwrite("window_padding", &ImGuiStyle::WindowPadding, "Padding within a window.")
        .def_readwrite("window_rounding", &ImGuiStyle::WindowRounding, "Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.")
        .def_readwrite("window_border_size", &ImGuiStyle::WindowBorderSize, "Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).")
        .def_readwrite("window_min_size", &ImGuiStyle::WindowMinSize, "Minimum window size. This is a global setting. If you want to constraint individual windows, use SetNextWindowSizeConstraints().")
        .def_readwrite("window_title_align", &ImGuiStyle::WindowTitleAlign, "Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.")
        .def_readwrite("window_menu_button_position", &ImGuiStyle::WindowMenuButtonPosition, "Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left.")
        .def_readwrite("child_rounding", &ImGuiStyle::ChildRounding, "Radius of child window corners rounding. Set to 0.0f to have rectangular windows.")
        .def_readwrite("child_border_size", &ImGuiStyle::ChildBorderSize, "Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).")
        .def_readwrite("popup_rounding", &ImGuiStyle::PopupRounding, "Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)")
        .def_readwrite("popup_border_size", &ImGuiStyle::PopupBorderSize, "Thickness of border around popup/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).")
        .def_readwrite("frame_padding", &ImGuiStyle::FramePadding, "Padding within a framed rectangle (used by most widgets).")
        .def_readwrite("frame_rounding", &ImGuiStyle::FrameRounding, "Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).")
        .def_readwrite("frame_border_size", &ImGuiStyle::FrameBorderSize, "Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).")
        .def_readwrite("item_spacing", &ImGuiStyle::ItemSpacing, "Horizontal and vertical spacing between widgets/lines.")
        .def_readwrite("item_inner_spacing", &ImGuiStyle::ItemInnerSpacing, "Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).")
        .def_readwrite("cell_padding", &ImGuiStyle::CellPadding, "Padding within a table cell")
        .def_readwrite("touch_extra_padding", &ImGuiStyle::TouchExtraPadding, "Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!")
        .def_readwrite("indent_spacing", &ImGuiStyle::IndentSpacing, "Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x2).")
        .def_readwrite("columns_min_spacing", &ImGuiStyle::ColumnsMinSpacing, "Minimum horizontal spacing between two columns. Preferably > (FramePadding.x + 1).")
        .def_readwrite("scrollbar_size", &ImGuiStyle::ScrollbarSize, "Width of the vertical scrollbar, Height of the horizontal scrollbar.")
        .def_readwrite("scrollbar_rounding", &ImGuiStyle::ScrollbarRounding, "Radius of grab corners for scrollbar.")
        .def_readwrite("grab_min_size", &ImGuiStyle::GrabMinSize, "Minimum width/height of a grab box for slider/scrollbar.")
        .def_readwrite("grab_rounding", &ImGuiStyle::GrabRounding, "Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.")
        .def_readwrite("log_slider_deadzone", &ImGuiStyle::LogSliderDeadzone, "The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero.")
        .def_readwrite("tab_rounding", &ImGuiStyle::TabRounding, "Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.")
        .def_readwrite("tab_border_size", &ImGuiStyle::TabBorderSize, "Thickness of border around tabs.")
        .def_readwrite("tab_min_width_for_close_button", &ImGuiStyle::TabMinWidthForCloseButton, "Minimum width for close button to appears on an unselected tab when hovered. Set to 0.0f to always show when hovering, set to FLT_MAX to never show close button unless selected.")
        .def_readwrite("color_button_position", &ImGuiStyle::ColorButtonPosition, "Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.")
        .def_readwrite("button_text_align", &ImGuiStyle::ButtonTextAlign, "Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered).")
        .def_readwrite("selectable_text_align", &ImGuiStyle::SelectableTextAlign, "Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line.")
        .def_readwrite("display_window_padding", &ImGuiStyle::DisplayWindowPadding, "Window position are clamped to be visible within the display area or monitors by at least this amount. Only applies to regular windows.")
        .def_readwrite("display_safe_area_padding", &ImGuiStyle::DisplaySafeAreaPadding, "If you cannot see the edges of your screen (e.g. on a TV) increase the safe area padding. Apply to popups/tooltips as well regular windows. NB: Prefer configuring your TV sets correctly!")
        .def_readwrite("mouse_cursor_scale", &ImGuiStyle::MouseCursorScale, "Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). May be removed later.")
        .def_readwrite("anti_aliased_lines", &ImGuiStyle::AntiAliasedLines, "Enable anti-aliased lines/borders. Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).")
        .def_readwrite("anti_aliased_lines_use_tex", &ImGuiStyle::AntiAliasedLinesUseTex, "Enable anti-aliased lines/borders using textures where possible. Require backend to render with bilinear filtering (NOT point/nearest filtering). Latched at the beginning of the frame (copied to ImDrawList).")
        .def_readwrite("anti_aliased_fill", &ImGuiStyle::AntiAliasedFill, "Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).")
        .def_readwrite("curve_tessellation_tol", &ImGuiStyle::CurveTessellationTol, "Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.")
        .def_readwrite("circle_tessellation_max_error", &ImGuiStyle::CircleTessellationMaxError, "Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry.")
        .def_readwrite("colors[_im_gui_col_count]", &ImGuiStyle::Colors[ImGuiCol_COUNT], "")
        .def("im_gui_style",    // :1882
            [](ImGuiStyle & self)
            {
                return self.ImGuiStyle();
            }
        )

        .def("scale_all_sizes",    // :1883
            [](ImGuiStyle & self, float scale_factor)
            {
                return self.ScaleAllSizes(scale_factor);
            },
            py::arg("scale_factor")
        )

        ; 



    auto pyClassImGuiKeyData = py::class_<ImGuiKeyData>
        (m, "ImGuiKeyData", "[Internal] Storage used by IsKeyDown(), IsKeyPressed() etc functions.\nIf prior to 1.87 you used io.KeysDownDuration[] (which was marked as internal), you should use GetKeyData(key)->DownDuration and not io.KeysData[key]->DownDuration.")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("down", &ImGuiKeyData::Down, "True for if key is down")
        .def_readwrite("down_duration", &ImGuiKeyData::DownDuration, "Duration the key has been down (<0.0f: not pressed, 0.0f: just pressed, >0.0f: time held)")
        .def_readwrite("down_duration_prev", &ImGuiKeyData::DownDurationPrev, "Last frame duration the key has been down")
        .def_readwrite("analog_value", &ImGuiKeyData::AnalogValue, "0.0f..1.0f for gamepad values")
        ; 



    auto pyClassImGuiIO = py::class_<ImGuiIO>
        (m, "ImGuiIO", "")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("config_flags", &ImGuiIO::ConfigFlags, "= 0              // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.")
        .def_readwrite("backend_flags", &ImGuiIO::BackendFlags, "= 0              // See ImGuiBackendFlags_ enum. Set by backend (imgui_impl_xxx files or custom backend) to communicate features supported by the backend.")
        .def_readwrite("display_size", &ImGuiIO::DisplaySize, "<unset>          // Main display size, in pixels (generally == GetMainViewport()->Size). May change every frame.")
        .def_readwrite("delta_time", &ImGuiIO::DeltaTime, "= 1.0f/60.0f     // Time elapsed since last frame, in seconds. May change every frame.")
        .def_readwrite("ini_saving_rate", &ImGuiIO::IniSavingRate, "= 5.0f           // Minimum time between saving positions/sizes to .ini file, in seconds.")
        .def_readwrite("ini_filename", &ImGuiIO::IniFilename, "= \"imgui.ini\"    // Path to .ini file (important: default \"imgui.ini\" is relative to current working dir!). Set NULL to disable automatic .ini loading/saving or if you want to manually call LoadIniSettingsXXX() / SaveIniSettingsXXX() functions.")
        .def_readwrite("log_filename", &ImGuiIO::LogFilename, "= \"imgui_log.txt\"// Path to .log file (default parameter to ImGui::LogToFile when no file is specified).")
        .def_readwrite("mouse_double_click_time", &ImGuiIO::MouseDoubleClickTime, "= 0.30f          // Time for a float-click, in seconds.")
        .def_readwrite("mouse_double_click_max_dist", &ImGuiIO::MouseDoubleClickMaxDist, "= 6.0f           // Distance threshold to stay in to validate a float-click, in pixels.")
        .def_readwrite("mouse_drag_threshold", &ImGuiIO::MouseDragThreshold, "= 6.0f           // Distance threshold before considering we are dragging.")
        .def_readwrite("key_repeat_delay", &ImGuiIO::KeyRepeatDelay, "= 0.250f         // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).")
        .def_readwrite("key_repeat_rate", &ImGuiIO::KeyRepeatRate, "= 0.050f         // When holding a key/button, rate at which it repeats, in seconds.")
        .def_readwrite("user_data", &ImGuiIO::UserData, "= NULL           // Store your own data for retrieval by callbacks.")
        .def_readwrite("fonts", &ImGuiIO::Fonts, "<auto>           // Font atlas: load, rasterize and pack one or more fonts into a single texture.")
        .def_readwrite("font_global_scale", &ImGuiIO::FontGlobalScale, "= 1.0f           // Global scale all fonts")
        .def_readwrite("font_allow_user_scaling", &ImGuiIO::FontAllowUserScaling, "= False          // Allow user scaling text of individual window with CTRL+Wheel.")
        .def_readwrite("font_default", &ImGuiIO::FontDefault, "= NULL           // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].")
        .def_readwrite("display_framebuffer_scale", &ImGuiIO::DisplayFramebufferScale, "= (1, 1)         // For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale.")
        .def_readwrite("mouse_draw_cursor", &ImGuiIO::MouseDrawCursor, "= False          // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by backend implementations.")
        .def_readwrite("config_mac_osx_behaviors", &ImGuiIO::ConfigMacOSXBehaviors, "= defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl.")
        .def_readwrite("config_input_trickle_event_queue", &ImGuiIO::ConfigInputTrickleEventQueue, "= True           // Enable input queue trickling: some types of events submitted during the same frame (e.g. button down + up) will be spread over multiple frames, improving interactions with low framerates.")
        .def_readwrite("config_input_text_cursor_blink", &ImGuiIO::ConfigInputTextCursorBlink, "= True           // Enable blinking cursor (optional as some users consider it to be distracting).")
        .def_readwrite("config_drag_click_to_input_text", &ImGuiIO::ConfigDragClickToInputText, "= False          // [BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard.")
        .def_readwrite("config_windows_resize_from_edges", &ImGuiIO::ConfigWindowsResizeFromEdges, "= True           // Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags  ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag)")
        .def_readwrite("config_windows_move_from_title_bar_only", &ImGuiIO::ConfigWindowsMoveFromTitleBarOnly, "= False       // Enable allowing to move windows only when clicking on their title bar. Does not apply to windows without a title bar.")
        .def_readwrite("config_memory_compact_timer", &ImGuiIO::ConfigMemoryCompactTimer, "= 60.0f          // Timer (in seconds) to free transient windows/tables memory buffers when unused. Set to -1.0f to disable.")
        .def_readwrite("backend_platform_name", &ImGuiIO::BackendPlatformName, "= NULL")
        .def_readwrite("backend_renderer_name", &ImGuiIO::BackendRendererName, "= NULL")
        .def_readwrite("backend_platform_user_data", &ImGuiIO::BackendPlatformUserData, "= NULL           // User data for platform backend")
        .def_readwrite("backend_renderer_user_data", &ImGuiIO::BackendRendererUserData, "= NULL           // User data for renderer backend")
        .def_readwrite("backend_language_user_data", &ImGuiIO::BackendLanguageUserData, "= NULL           // User data for non C++ programming language backend")
        .def_readwrite("clipboard_user_data", &ImGuiIO::ClipboardUserData, "")
        .def("add_key_event",    // :1971
            [](ImGuiIO & self, ImGuiKey key, bool down)
            {
                return self.AddKeyEvent(key, down);
            },
            py::arg("key"),
            py::arg("down"),
            "Queue a new key down/up event. Key should be \"translated\" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)"
        )

        .def("add_key_analog_event",    // :1972
            [](ImGuiIO & self, ImGuiKey key, bool down, float v)
            {
                return self.AddKeyAnalogEvent(key, down, v);
            },
            py::arg("key"),
            py::arg("down"),
            py::arg("v"),
            "Queue a new key down/up event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend."
        )

        .def("add_mouse_pos_event",    // :1973
            [](ImGuiIO & self, float x, float y)
            {
                return self.AddMousePosEvent(x, y);
            },
            py::arg("x"),
            py::arg("y"),
            "Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)"
        )

        .def("add_mouse_button_event",    // :1974
            [](ImGuiIO & self, int button, bool down)
            {
                return self.AddMouseButtonEvent(button, down);
            },
            py::arg("button"),
            py::arg("down"),
            "Queue a mouse button change"
        )

        .def("add_mouse_wheel_event",    // :1975
            [](ImGuiIO & self, float wh_x, float wh_y)
            {
                return self.AddMouseWheelEvent(wh_x, wh_y);
            },
            py::arg("wh_x"),
            py::arg("wh_y"),
            "Queue a mouse wheel update"
        )

        .def("add_focus_event",    // :1976
            [](ImGuiIO & self, bool focused)
            {
                return self.AddFocusEvent(focused);
            },
            py::arg("focused"),
            "Queue a gain/loss of focus for the application (generally based on OS/platform focus of your window)"
        )

        .def("add_input_character",    // :1977
            [](ImGuiIO & self, unsigned int c)
            {
                return self.AddInputCharacter(c);
            },
            py::arg("c"),
            "Queue a new character input"
        )

        .def("add_input_character_utf16",    // :1978
            [](ImGuiIO & self, ImWchar16 c)
            {
                return self.AddInputCharacterUTF16(c);
            },
            py::arg("c"),
            "Queue a new character input from an UTF-16 character, it can be a surrogate"
        )

        .def("add_input_characters_utf8",    // :1979
            [](ImGuiIO & self, const char * str)
            {
                return self.AddInputCharactersUTF8(str);
            },
            py::arg("str"),
            "Queue a new characters input from an UTF-8 string"
        )

        .def("set_key_event_native_data",    // :1981
            [](ImGuiIO & self, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index = -1)
            {
                return self.SetKeyEventNativeData(key, native_keycode, native_scancode, native_legacy_index);
            },
            py::arg("key"),
            py::arg("native_keycode"),
            py::arg("native_scancode"),
            py::arg("native_legacy_index") = -1,
            "[Optional] Specify index for legacy <1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode."
        )

        .def("set_app_accepting_events",    // :1982
            [](ImGuiIO & self, bool accepting_events)
            {
                return self.SetAppAcceptingEvents(accepting_events);
            },
            py::arg("accepting_events"),
            "Set master flag for accepting key/mouse/text events (default to True). Useful if you have native dialog boxes that are interrupting your application loop/refresh, and you want to disable events being queued while your app is frozen."
        )

        .def("clear_input_characters",    // :1983
            [](ImGuiIO & self)
            {
                return self.ClearInputCharacters();
            },
            "[Internal] Clear the text input buffer manually"
        )

        .def("clear_input_keys",    // :1984
            [](ImGuiIO & self)
            {
                return self.ClearInputKeys();
            },
            "[Internal] Release all keys"
        )

        .def_readwrite("want_capture_mouse", &ImGuiIO::WantCaptureMouse, "Set when Dear ImGui will use mouse inputs, in this case do not dispatch them to your main game/application (either way, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.).")
        .def_readwrite("want_capture_keyboard", &ImGuiIO::WantCaptureKeyboard, "Set when Dear ImGui will use keyboard inputs, in this case do not dispatch them to your main game/application (either way, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.).")
        .def_readwrite("want_text_input", &ImGuiIO::WantTextInput, "Mobile/console: when set, you may display an on-screen keyboard. This is set by Dear ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).")
        .def_readwrite("want_set_mouse_pos", &ImGuiIO::WantSetMousePos, "MousePos has been altered, backend should reposition mouse on next frame. Rarely used! Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled.")
        .def_readwrite("want_save_ini_settings", &ImGuiIO::WantSaveIniSettings, "When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. Important: clear io.WantSaveIniSettings yourself after saving!")
        .def_readwrite("nav_active", &ImGuiIO::NavActive, "Keyboard/Gamepad navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.")
        .def_readwrite("nav_visible", &ImGuiIO::NavVisible, "Keyboard/Gamepad navigation is visible and allowed (will handle ImGuiKey_NavXXX events).")
        .def_readwrite("framerate", &ImGuiIO::Framerate, "Rough estimate of application framerate, in frame per second. Solely for convenience. Rolling average estimation based on io.DeltaTime over 120 frames.")
        .def_readwrite("metrics_render_vertices", &ImGuiIO::MetricsRenderVertices, "Vertices output during last call to Render()")
        .def_readwrite("metrics_render_indices", &ImGuiIO::MetricsRenderIndices, "Indices output during last call to Render() = number of triangles  3")
        .def_readwrite("metrics_render_windows", &ImGuiIO::MetricsRenderWindows, "Number of visible windows")
        .def_readwrite("metrics_active_windows", &ImGuiIO::MetricsActiveWindows, "Number of active windows")
        .def_readwrite("metrics_active_allocations", &ImGuiIO::MetricsActiveAllocations, "Number of active allocations, updated by MemAlloc/MemFree based on current context. May be off if you have multiple imgui contexts.")
        .def_readwrite("mouse_delta", &ImGuiIO::MouseDelta, "")
        .def_readwrite("mouse_pos", &ImGuiIO::MousePos, "Mouse position, in pixels. Set to ImVec2(-FLT_MAX, -FLT_MAX) if mouse is unavailable (on another screen, etc.)")
        .def_readwrite("mouse_down[5]", &ImGuiIO::MouseDown[5], "Mouse buttons: 0=left, 1=right, 2=middle + extras (ImGuiMouseButton_COUNT == 5). Dear ImGui mostly uses left and right buttons. Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse API.")
        .def_readwrite("mouse_wheel", &ImGuiIO::MouseWheel, "Mouse wheel Vertical: 1 unit scrolls about 5 lines text.")
        .def_readwrite("mouse_wheel_h", &ImGuiIO::MouseWheelH, "Mouse wheel Horizontal. Most users don't have a mouse with an horizontal wheel, may not be filled by all backends.")
        .def_readwrite("key_ctrl", &ImGuiIO::KeyCtrl, "Keyboard modifier down: Control")
        .def_readwrite("key_shift", &ImGuiIO::KeyShift, "Keyboard modifier down: Shift")
        .def_readwrite("key_alt", &ImGuiIO::KeyAlt, "Keyboard modifier down: Alt")
        .def_readwrite("key_super", &ImGuiIO::KeySuper, "Keyboard modifier down: Cmd/Super/Windows")
        .def_readwrite("nav_inputs[_im_gui_nav_input_count]", &ImGuiIO::NavInputs[ImGuiNavInput_COUNT], "Gamepad inputs. Cleared back to zero by EndFrame(). Keyboard keys will be auto-mapped and be written here by NewFrame().")
        .def_readwrite("key_mods", &ImGuiIO::KeyMods, "Key mods flags (same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags), updated by NewFrame()")
        .def_readwrite("keys_data[_im_gui_key_keys_data_size]", &ImGuiIO::KeysData[ImGuiKey_KeysData_SIZE], "Key state for all known keys. Use IsKeyXXX() functions to access this.")
        .def_readwrite("want_capture_mouse_unless_popup_close", &ImGuiIO::WantCaptureMouseUnlessPopupClose, "Alternative to WantCaptureMouse: (WantCaptureMouse == True  WantCaptureMouseUnlessPopupClose == False) when a click over None is expected to close a popup.")
        .def_readwrite("mouse_pos_prev", &ImGuiIO::MousePosPrev, "Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)")
        .def_readwrite("mouse_clicked_pos[5]", &ImGuiIO::MouseClickedPos[5], "Position at time of clicking")
        .def_readwrite("mouse_clicked_time[5]", &ImGuiIO::MouseClickedTime[5], "Time of last click (used to figure out float-click)")
        .def_readwrite("mouse_clicked[5]", &ImGuiIO::MouseClicked[5], "Mouse button went from !Down to Down (same as MouseClickedCount[x] != 0)")
        .def_readwrite("mouse_double_clicked[5]", &ImGuiIO::MouseDoubleClicked[5], "Has mouse button been float-clicked? (same as MouseClickedCount[x] == 2)")
        .def_readwrite("mouse_clicked_count[5]", &ImGuiIO::MouseClickedCount[5], "== 0 (not clicked), == 1 (same as MouseClicked[]), == 2 (float-clicked), == 3 (triple-clicked) etc. when going from !Down to Down")
        .def_readwrite("mouse_clicked_last_count[5]", &ImGuiIO::MouseClickedLastCount[5], "Count successive number of clicks. Stays valid after mouse release. Reset after another click is done.")
        .def_readwrite("mouse_released[5]", &ImGuiIO::MouseReleased[5], "Mouse button went from Down to !Down")
        .def_readwrite("mouse_down_owned[5]", &ImGuiIO::MouseDownOwned[5], "Track if button was clicked inside a dear imgui window or over None blocked by a popup. We don't request mouse capture from the application if click started outside ImGui bounds.")
        .def_readwrite("mouse_down_owned_unless_popup_close[5]", &ImGuiIO::MouseDownOwnedUnlessPopupClose[5], "Track if button was clicked inside a dear imgui window.")
        .def_readwrite("mouse_down_duration[5]", &ImGuiIO::MouseDownDuration[5], "Duration the mouse button has been down (0.0f == just clicked)")
        .def_readwrite("mouse_down_duration_prev[5]", &ImGuiIO::MouseDownDurationPrev[5], "Previous time the mouse button has been down")
        .def_readwrite("mouse_drag_max_distance_sqr[5]", &ImGuiIO::MouseDragMaxDistanceSqr[5], "Squared maximum distance of how much mouse has traveled from the clicking point (used for moving thresholds)")
        .def_readwrite("nav_inputs_down_duration[_im_gui_nav_input_count]", &ImGuiIO::NavInputsDownDuration[ImGuiNavInput_COUNT], "")
        .def_readwrite("nav_inputs_down_duration_prev[_im_gui_nav_input_count]", &ImGuiIO::NavInputsDownDurationPrev[ImGuiNavInput_COUNT], "")
        .def_readwrite("pen_pressure", &ImGuiIO::PenPressure, "Touch/Pen pressure (0.0f to 1.0f, should be >0.0f only when MouseDown[0] == True). Helper storage currently unused by Dear ImGui.")
        .def_readwrite("app_focus_lost", &ImGuiIO::AppFocusLost, "Only modify via AddFocusEvent()")
        .def_readwrite("app_accepting_events", &ImGuiIO::AppAcceptingEvents, "Only modify via SetAppAcceptingEvents()")
        .def_readwrite("backend_using_legacy_key_arrays", &ImGuiIO::BackendUsingLegacyKeyArrays, "-1: unknown, 0: using AddKeyEvent(), 1: using legacy io.KeysDown[]")
        .def_readwrite("backend_using_legacy_nav_input_array", &ImGuiIO::BackendUsingLegacyNavInputArray, "0: using AddKeyAnalogEvent(), 1: writing to legacy io.NavInputs[] directly")
        .def_readwrite("input_queue_surrogate", &ImGuiIO::InputQueueSurrogate, "For AddInputCharacterUTF16()")
        .def_readwrite("input_queue_characters", &ImGuiIO::InputQueueCharacters, "Queue of _characters_ input (obtained by platform backend). Fill using AddInputCharacter() helper.")
        .def("im_gui_io",    // :2058
            [](ImGuiIO & self)
            {
                return self.ImGuiIO();
            }
        )

        ; 



    auto pyClassImGuiInputTextCallbackData = py::class_<ImGuiInputTextCallbackData>
        (m, "ImGuiInputTextCallbackData", "Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback flag is used.\nThe callback function should return 0 by default.\nCallbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details)\n- ImGuiInputTextFlags_CallbackEdit:        Callback on buffer edit (note that InputText() already returns True on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)\n- ImGuiInputTextFlags_CallbackAlways:      Callback on each iteration\n- ImGuiInputTextFlags_CallbackCompletion:  Callback on pressing TAB\n- ImGuiInputTextFlags_CallbackHistory:     Callback on pressing Up/Down arrows\n- ImGuiInputTextFlags_CallbackCharFilter:  Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.\n- ImGuiInputTextFlags_CallbackResize:      Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow.")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("event_flag", &ImGuiInputTextCallbackData::EventFlag, "One ImGuiInputTextFlags_Callback    // Read-only")
        .def_readwrite("flags", &ImGuiInputTextCallbackData::Flags, "What user passed to InputText()      // Read-only")
        .def_readwrite("user_data", &ImGuiInputTextCallbackData::UserData, "What user passed to InputText()      // Read-only")
        .def_readwrite("event_char", &ImGuiInputTextCallbackData::EventChar, "Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;")
        .def_readwrite("event_key", &ImGuiInputTextCallbackData::EventKey, "Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]")
        .def_readwrite("buf", &ImGuiInputTextCallbackData::Buf, "Text buffer                          // Read-write   // [Resize] Can replace pointer / [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!")
        .def_readwrite("buf_text_len", &ImGuiInputTextCallbackData::BufTextLen, "Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()")
        .def_readwrite("buf_size", &ImGuiInputTextCallbackData::BufSize, "Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1")
        .def_readwrite("buf_dirty", &ImGuiInputTextCallbackData::BufDirty, "Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]")
        .def_readwrite("cursor_pos", &ImGuiInputTextCallbackData::CursorPos, "                                     // Read-write   // [Completion,History,Always]")
        .def_readwrite("selection_start", &ImGuiInputTextCallbackData::SelectionStart, "                                     // Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)")
        .def_readwrite("selection_end", &ImGuiInputTextCallbackData::SelectionEnd, "                                     // Read-write   // [Completion,History,Always]")
        .def("im_gui_input_text_callback_data",    // :2095
            [](ImGuiInputTextCallbackData & self)
            {
                return self.ImGuiInputTextCallbackData();
            },
            "Helper functions for text manipulation.\nUse those function to benefit from the CallbackResize behaviors. Calling those function reset the selection."
        )

        .def("delete_chars",    // :2096
            [](ImGuiInputTextCallbackData & self, int pos, int bytes_count)
            {
                return self.DeleteChars(pos, bytes_count);
            },
            py::arg("pos"),
            py::arg("bytes_count")
        )

        .def("insert_chars",    // :2097
            [](ImGuiInputTextCallbackData & self, int pos, const char * text, const char * text_end = NULL)
            {
                return self.InsertChars(pos, text, text_end);
            },
            py::arg("pos"),
            py::arg("text"),
            py::arg("text_end") = NULL
        )

        .def("select_all",    // :2098
            [](ImGuiInputTextCallbackData & self)
            {
                self.SelectAll();
            }
        )

        .def("clear_selection",    // :2099
            [](ImGuiInputTextCallbackData & self)
            {
                self.ClearSelection();
            }
        )

        .def("has_selection",    // :2100
            [](ImGuiInputTextCallbackData & self)
            {
                return self.HasSelection();
            }
        )

        ; 



    auto pyClassImGuiSizeCallbackData = py::class_<ImGuiSizeCallbackData>
        (m, "ImGuiSizeCallbackData", "Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().\nNB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("user_data", &ImGuiSizeCallbackData::UserData, "Read-only.   What user passed to SetNextWindowSizeConstraints()")
        .def_readwrite("pos", &ImGuiSizeCallbackData::Pos, "Read-only.   Window position, for reference.")
        .def_readwrite("current_size", &ImGuiSizeCallbackData::CurrentSize, "Read-only.   Current window size.")
        .def_readwrite("desired_size", &ImGuiSizeCallbackData::DesiredSize, "Read-write.  Desired size, based on user's mouse position. Write to this field to restrain resizing.")
        ; 



    auto pyClassImGuiPayload = py::class_<ImGuiPayload>
        (m, "ImGuiPayload", "Data payload for Drag and Drop operations: AcceptDragDropPayload(), GetDragDropPayload()")
        .def_readwrite("data", &ImGuiPayload::Data, "Data (copied and owned by dear imgui)")
        .def_readwrite("data_size", &ImGuiPayload::DataSize, "Data size")
        .def_readwrite("source_id", &ImGuiPayload::SourceId, "Source item id")
        .def_readwrite("source_parent_id", &ImGuiPayload::SourceParentId, "Source parent id (if available)")
        .def_readwrite("data_frame_count", &ImGuiPayload::DataFrameCount, "Data timestamp")
        .def_readwrite("data_type[32 + 1]", &ImGuiPayload::DataType[32 + 1], "Data type tag (short user-supplied string, 32 characters max)")
        .def_readwrite("preview", &ImGuiPayload::Preview, "Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)")
        .def_readwrite("delivery", &ImGuiPayload::Delivery, "Set when AcceptDragDropPayload() was called and mouse button is released over the target item.")
        .def(py::init<>())
        .def("clear",    // :2129
            [](ImGuiPayload & self)
            {
                self.Clear();
            }
        )

        .def("is_data_type",    // :2130
            [](ImGuiPayload & self, const char * type)
            {
                return self.IsDataType(type);
            },
            py::arg("type")
        )

        .def("is_preview",    // :2131
            [](ImGuiPayload & self)
            {
                return self.IsPreview();
            }
        )

        .def("is_delivery",    // :2132
            [](ImGuiPayload & self)
            {
                return self.IsDelivery();
            }
        )

        ; 



    auto pyClassImGuiTableColumnSortSpecs = py::class_<ImGuiTableColumnSortSpecs>
        (m, "ImGuiTableColumnSortSpecs", "Sorting specification for one column of a table (sizeof == 12 bytes)")
        .def_readwrite("column_user_id", &ImGuiTableColumnSortSpecs::ColumnUserID, "User id of the column (if specified by a TableSetupColumn() call)")
        .def_readwrite("column_index", &ImGuiTableColumnSortSpecs::ColumnIndex, "Index of the column")
        .def_readwrite("sort_order", &ImGuiTableColumnSortSpecs::SortOrder, "Index within parent ImGuiTableSortSpecs (always stored in order starting from 0, tables sorted on a single criteria will always have a 0 here)")
        .def_readwrite("sort_direction", &ImGuiTableColumnSortSpecs::SortDirection, "ImGuiSortDirection_Ascending or ImGuiSortDirection_Descending (you can use this or SortSign, whichever is more convenient for your sort function)")
        .def(py::init<>())
        ; 



    auto pyClassImGuiTableSortSpecs = py::class_<ImGuiTableSortSpecs>
        (m, "ImGuiTableSortSpecs", "Sorting specifications for a table (often handling sort specs for a single column, occasionally more)\nObtained by calling TableGetSortSpecs().\nWhen 'SpecsDirty == True' you can sort your data. It will be True with sorting specs have changed since last call, or the first time.\nMake sure to set 'SpecsDirty = False' after sorting, else you may wastefully sort your data every frame!")
        .def_readwrite("specs", &ImGuiTableSortSpecs::Specs, "Pointer to sort spec array.")
        .def_readwrite("specs_count", &ImGuiTableSortSpecs::SpecsCount, "Sort spec count. Most often 1. May be > 1 when ImGuiTableFlags_SortMulti is enabled. May be == 0 when ImGuiTableFlags_SortTristate is enabled.")
        .def_readwrite("specs_dirty", &ImGuiTableSortSpecs::SpecsDirty, "Set to True when specs have changed since last time! Use this to sort again, then clear the flag.")
        .def(py::init<>())
        ; 



    auto pyClassImGuiOnceUponAFrame = py::class_<ImGuiOnceUponAFrame>
        (m, "ImGuiOnceUponAFrame", "Helper: Execute a block of code at maximum once a frame. Convenient if you want to quickly create an UI within deep-nested code that runs multiple times every frame.\nUsage: static ImGuiOnceUponAFrame oaf; if (oaf) ImGui::Text(\"This will be called only once per frame\");")
        .def(py::init<>())
        .def_readwrite("ref_frame", &ImGuiOnceUponAFrame::RefFrame, "")
        ; 



    auto pyClassImGuiTextFilter = py::class_<ImGuiTextFilter>
        (m, "ImGuiTextFilter", "Helper: Parse and apply text filters. In format \"aaaaa[,bbbb][,ccccc]\"")
        .def(py::init<>() // implicit default constructor
        .def("im_gui_text_filter",    // :2183
            [](ImGuiTextFilter & self, const char * default_filter = "")
            {
                return self.ImGuiTextFilter(default_filter);
            },
            py::arg("default_filter") = ""
        )

        .def("draw",    // :2184
            [](ImGuiTextFilter & self, const char * label = "Filter (inc,-exc)", float width = 0.0f)
            {
                return self.Draw(label, width);
            },
            py::arg("label") = "Filter (inc,-exc)",
            py::arg("width") = 0.0f,
            "Helper calling InputText+Build"
        )

        .def("pass_filter",    // :2185
            [](ImGuiTextFilter & self, const char * text, const char * text_end = NULL)
            {
                return self.PassFilter(text, text_end);
            },
            py::arg("text"),
            py::arg("text_end") = NULL
        )

        .def("build",    // :2186
            [](ImGuiTextFilter & self)
            {
                return self.Build();
            }
        )

        .def("clear",    // :2187
            [](ImGuiTextFilter & self)
            {
                self.Clear();
            }
        )

        .def("is_active",    // :2188
            [](ImGuiTextFilter & self)
            {
                return self.IsActive();
            }
        )

        .def_readwrite("input_buf[256]", &ImGuiTextFilter::InputBuf[256], "")
        .def_readwrite("filters", &ImGuiTextFilter::Filters, "")
        .def_readwrite("count_grep", &ImGuiTextFilter::CountGrep, "")
        ; 



    auto pyClassImGuiTextBuffer = py::class_<ImGuiTextBuffer>
        (m, "ImGuiTextBuffer", "Helper: Growable text buffer for logging/accumulating text\n(this could be called 'ImGuiTextBuilder' / 'ImGuiStringBuilder')")
        .def_readwrite("buf", &ImGuiTextBuffer::Buf, "")
        .def_readwrite("empty_string[1]", &ImGuiTextBuffer::EmptyString[1], "")
        .def(py::init<>())
        .def("begin",    // :2215
            [](ImGuiTextBuffer & self)
            {
                return self.begin();
            }
        )

        .def("end",    // :2216
            [](ImGuiTextBuffer & self)
            {
                return self.end();
            },
            "Buf is zero-terminated, so end() will point on the zero-terminator"
        )

        .def("size",    // :2217
            [](ImGuiTextBuffer & self)
            {
                return self.size();
            }
        )

        .def("empty",    // :2218
            [](ImGuiTextBuffer & self)
            {
                return self.empty();
            }
        )

        .def("clear",    // :2219
            [](ImGuiTextBuffer & self)
            {
                self.clear();
            }
        )

        .def("reserve",    // :2220
            [](ImGuiTextBuffer & self, int capacity)
            {
                self.reserve(capacity);
            },
            py::arg("capacity")
        )

        .def("c_str",    // :2221
            [](ImGuiTextBuffer & self)
            {
                return self.c_str();
            }
        )

        .def("append",    // :2222
            [](ImGuiTextBuffer & self, const char * str, const char * str_end = NULL)
            {
                return self.append(str, str_end);
            },
            py::arg("str"),
            py::arg("str_end") = NULL
        )

        .def("appendf",    // :2223
            [](ImGuiTextBuffer & self, const char * fmt)
            {
                return self.appendf("%s", fmt);
            },
            py::arg("fmt")
        )

        .def("appendfv",    // :2224
            [](ImGuiTextBuffer & self, const char * fmt, va_list args)
            {
                return self.appendfv(fmt, args);
            },
            py::arg("fmt"),
            py::arg("args")
        )

        ; 



    auto pyClassImGuiStorage = py::class_<ImGuiStorage>
        (m, "ImGuiStorage", "Helper: Key->Value storage\nTypically you don't have to worry about this since a storage is held within each Window.\nWe use it to e.g. store collapse state for a tree (Int 0/1)\nThis is optimized for efficient lookup (dichotomy into a contiguous buffer) and rare insertion (typically tied to user interactions aka max once a frame)\nYou can use it as custom user storage for temporary values. Declare your own storage if, for example:\n- You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).\n- You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)\nTypes are NOT stored, so it is up to you to make sure your Key don't collide with different types.")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("data", &ImGuiStorage::Data, "")
        .def("clear",    // :2252
            [](ImGuiStorage & self)
            {
                self.Clear();
            },
            "- Get() functions find pair, never add/allocate. Pairs are sorted so a query is O(log N)\n- Set() functions find pair, insertion on demand if missing.\n- Sorted insertion is costly, paid once. A typical frame shouldn't need to insert any new pair."
        )

        .def("get_int",    // :2253
            [](ImGuiStorage & self, ImGuiID key, int default_val = 0)
            {
                return self.GetInt(key, default_val);
            },
            py::arg("key"),
            py::arg("default_val") = 0
        )

        .def("set_int",    // :2254
            [](ImGuiStorage & self, ImGuiID key, int val)
            {
                return self.SetInt(key, val);
            },
            py::arg("key"),
            py::arg("val")
        )

        .def("get_bool",    // :2255
            [](ImGuiStorage & self, ImGuiID key, bool default_val = false)
            {
                return self.GetBool(key, default_val);
            },
            py::arg("key"),
            py::arg("default_val") = false
        )

        .def("set_bool",    // :2256
            [](ImGuiStorage & self, ImGuiID key, bool val)
            {
                return self.SetBool(key, val);
            },
            py::arg("key"),
            py::arg("val")
        )

        .def("get_float",    // :2257
            [](ImGuiStorage & self, ImGuiID key, float default_val = 0.0f)
            {
                return self.GetFloat(key, default_val);
            },
            py::arg("key"),
            py::arg("default_val") = 0.0f
        )

        .def("set_float",    // :2258
            [](ImGuiStorage & self, ImGuiID key, float val)
            {
                return self.SetFloat(key, val);
            },
            py::arg("key"),
            py::arg("val")
        )

        .def("get_void_ptr",    // :2259
            [](ImGuiStorage & self, ImGuiID key)
            {
                return self.GetVoidPtr(key);
            },
            py::arg("key"),
            "default_val is NULL"
        )

        .def("set_void_ptr",    // :2260
            [](ImGuiStorage & self, ImGuiID key, void * val)
            {
                return self.SetVoidPtr(key, val);
            },
            py::arg("key"),
            py::arg("val")
        )

        .def("get_int_ref",    // :2266
            [](ImGuiStorage & self, ImGuiID key, int default_val = 0)
            {
                return self.GetIntRef(key, default_val);
            },
            py::arg("key"),
            py::arg("default_val") = 0,
            "- GetRef() functions finds pair, insert on demand if missing, return pointer. Useful if you intend to do Get+Set.\n- References are only valid until a new value is added to the storage. Calling a Set() function or a GetRef() function invalidates the pointer.\n- A typical use case where this is convenient for quick hacking (e.g. add storage during a live EditContinue session if you can't modify existing struct)\nfloat pvar = ImGui::GetFloatRef(key); ImGui::SliderFloat(\"var\", pvar, 0, 100.0f); some_var += pvar;"
        )

        .def("get_bool_ref",    // :2267
            [](ImGuiStorage & self, ImGuiID key, bool default_val = false)
            {
                return self.GetBoolRef(key, default_val);
            },
            py::arg("key"),
            py::arg("default_val") = false
        )

        .def("get_float_ref",    // :2268
            [](ImGuiStorage & self, ImGuiID key, float default_val = 0.0f)
            {
                return self.GetFloatRef(key, default_val);
            },
            py::arg("key"),
            py::arg("default_val") = 0.0f
        )

        .def("get_void_ptr_ref",    // :2269
            [](ImGuiStorage & self, ImGuiID key, void * default_val = NULL)
            {
                return self.GetVoidPtrRef(key, default_val);
            },
            py::arg("key"),
            py::arg("default_val") = NULL
        )

        .def("set_all_int",    // :2272
            [](ImGuiStorage & self, int val)
            {
                return self.SetAllInt(val);
            },
            py::arg("val"),
            "Use on your own storage if you know only integer are being stored (open/close all tree nodes)"
        )

        .def("build_sort_by_key",    // :2275
            [](ImGuiStorage & self)
            {
                return self.BuildSortByKey();
            },
            "For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once."
        )

        ; 



    auto pyClassImGuiListClipper = py::class_<ImGuiListClipper>
        (m, "ImGuiListClipper", "Helper: Manually clip large list of items.\nIf you have lots evenly spaced items and you have a random access to the list, you can perform coarse\nclipping based on visibility to only submit items that are in view.\nThe clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped.\n(Dear ImGui already clip items based on their bounds but: it needs to first layout the item to do so, and generally\nfetching/submitting your own data incurs additional cost. Coarse clipping using ImGuiListClipper allows you to easily\nscale using lists with tens of thousands of items without a problem)\nUsage:\nImGuiListClipper clipper;\nclipper.Begin(1000);         // We have 1000 elements, evenly spaced.\nwhile (clipper.Step())\nfor (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)\nImGui::Text(\"line number %d\", i);\nGenerally what happens is:\n- Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1) regardless of it being visible or not.\n- User code submit that one element.\n- Clipper can measure the height of the first element\n- Clipper calculate the actual range of elements to display based on the current clipping rectangle, position the cursor before the first visible element.\n- User code submit visible elements.\n- The clipper also handles various subtleties related to keyboard/gamepad navigation, wrapping etc.")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("display_start", &ImGuiListClipper::DisplayStart, "First item to display, updated by each call to Step()")
        .def_readwrite("display_end", &ImGuiListClipper::DisplayEnd, "End of items to display (exclusive)")
        .def_readwrite("items_count", &ImGuiListClipper::ItemsCount, "[Internal] Number of items")
        .def_readwrite("items_height", &ImGuiListClipper::ItemsHeight, "[Internal] Height of item after a first step and item submission can calculate it")
        .def_readwrite("start_pos_y", &ImGuiListClipper::StartPosY, "[Internal] Cursor position at the time of Begin() or after table frozen rows are all processed")
        .def_readwrite("temp_data", &ImGuiListClipper::TempData, "[Internal] Internal data")
        .def("im_gui_list_clipper",    // :2309
            [](ImGuiListClipper & self)
            {
                return self.ImGuiListClipper();
            },
            "items_count: Use INT_MAX if you don't know how many items you have (in which case the cursor won't be advanced in the final step)\nitems_height: Use -1.0f to be calculated automatically on first step. Otherwise pass in the distance between your items, typically GetTextLineHeightWithSpacing() or GetFrameHeightWithSpacing()."
        )

        .def("begin",    // :2311
            [](ImGuiListClipper & self, int items_count, float items_height = -1.0f)
            {
                return self.Begin(items_count, items_height);
            },
            py::arg("items_count"),
            py::arg("items_height") = -1.0f
        )

        .def("end",    // :2312
            [](ImGuiListClipper & self)
            {
                return self.End();
            },
            "Automatically called on the last call of Step() that returns False."
        )

        .def("step",    // :2313
            [](ImGuiListClipper & self)
            {
                return self.Step();
            },
            "Call until it returns False. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items."
        )

        .def("force_display_range_by_indices",    // :2316
            [](ImGuiListClipper & self, int item_min, int item_max)
            {
                return self.ForceDisplayRangeByIndices(item_min, item_max);
            },
            py::arg("item_min"),
            py::arg("item_max"),
            "Call ForceDisplayRangeByIndices() before first call to Step() if you need a range of items to be displayed regardless of visibility."
        )

        ; 



    auto pyClassImColor = py::class_<ImColor>
        (m, "ImColor", "Helper: ImColor() implicitly converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)\nPrefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.\nAvoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.\nNone of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.")
        .def_readwrite("value", &ImColor::Value, "")
        .def(py::init<>())
        .def(py::init<float, float, float, float>(),
            py::arg("r"),
            py::arg("g"),
            py::arg("b"),
            py::arg("a") = 1.0f)
        .def(py::init<const ImVec4 &>(),
            py::arg("col"))
        .def(py::init<int, int, int, int>(),
            py::arg("r"),
            py::arg("g"),
            py::arg("b"),
            py::arg("a") = 255)
        .def(py::init<ImU32>(),
            py::arg("rgba"))
        .def("set_hsv",    // :2362
            [](ImColor & self, float h, float s, float v, float a = 1.0f)
            {
                self.SetHSV(h, s, v, a);
            },
            py::arg("h"),
            py::arg("s"),
            py::arg("v"),
            py::arg("a") = 1.0f,
            "FIXME-OBSOLETE: May need to obsolete/cleanup those helpers."
        )

        .def("hsv",    // :2363
            [](ImColor & self, float h, float s, float v, float a = 1.0f)
            {
                return self.HSV(h, s, v, a);
            },
            py::arg("h"),
            py::arg("s"),
            py::arg("v"),
            py::arg("a") = 1.0f
        )

        ; 



    auto pyClassImDrawCmd = py::class_<ImDrawCmd>
        (m, "ImDrawCmd", "Typically, 1 command = 1 GPU draw call (unless command is a callback)\n- VtxOffset: When 'io.BackendFlags  ImGuiBackendFlags_RendererHasVtxOffset' is enabled,\nthis fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices.\nBackends made for <1.71. will typically ignore the VtxOffset fields.\n- The ClipRect/TextureId/VtxOffset fields must be contiguous as we memcmp() them together (this is asserted for).")
        .def_readwrite("clip_rect", &ImDrawCmd::ClipRect, "44  // Clipping rectangle (x1, y1, x2, y2). Subtract ImDrawData->DisplayPos to get clipping rectangle in \"viewport\" coordinates")
        .def_readwrite("texture_id", &ImDrawCmd::TextureId, "4-8  // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image() functions. Ignore if never using images or multiple fonts atlas.")
        .def_readwrite("vtx_offset", &ImDrawCmd::VtxOffset, "4    // Start offset in vertex buffer. ImGuiBackendFlags_RendererHasVtxOffset: always 0, otherwise may be >0 to support meshes larger than 64K vertices with 16-bit indices.")
        .def_readwrite("idx_offset", &ImDrawCmd::IdxOffset, "4    // Start offset in index buffer.")
        .def_readwrite("elem_count", &ImDrawCmd::ElemCount, "4    // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].")
        .def_readwrite("user_callback", &ImDrawCmd::UserCallback, "4-8  // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.")
        .def_readwrite("user_callback_data", &ImDrawCmd::UserCallbackData, "4-8  // The draw callback code can access this.")
        .def(py::init<>(),
            "Also ensure our padding fields are zeroed"))
        .def("get_tex_id",    // :2411
            [](ImDrawCmd & self)
            {
                return self.GetTexID();
            },
            "Since 1.83: returns ImTextureID associated with this draw call. Warning: DO NOT assume this is always same as 'TextureId' (we will change this function for an upcoming feature)"
        )

        ; 



    auto pyClassImDrawCmdHeader = py::class_<ImDrawCmdHeader>
        (m, "ImDrawCmdHeader", "[Internal] For use by ImDrawList")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("clip_rect", &ImDrawCmdHeader::ClipRect, "")
        .def_readwrite("texture_id", &ImDrawCmdHeader::TextureId, "")
        .def_readwrite("vtx_offset", &ImDrawCmdHeader::VtxOffset, "")
        ; 



    auto pyClassImDrawChannel = py::class_<ImDrawChannel>
        (m, "ImDrawChannel", "[Internal] For use by ImDrawListSplitter")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("_cmd_buffer", &ImDrawChannel::_CmdBuffer, "")
        .def_readwrite("_idx_buffer", &ImDrawChannel::_IdxBuffer, "")
        ; 



    auto pyClassImDrawListSplitter = py::class_<ImDrawListSplitter>
        (m, "ImDrawListSplitter", "Split/Merge functions are used to split the draw list into different layers which can be drawn into out of order.\nThis is used by the Columns/Tables API, so items of each column can be batched together in a same draw call.")
        .def_readwrite("_current", &ImDrawListSplitter::_Current, "Current channel number (0)")
        .def_readwrite("_count", &ImDrawListSplitter::_Count, "Number of active channels (1+)")
        .def_readwrite("_channels", &ImDrawListSplitter::_Channels, "Draw channels (not resized down so _Count might be < Channels.Size)")
        .def(py::init<>())
        .def("clear",    // :2456
            [](ImDrawListSplitter & self)
            {
                self.Clear();
            },
            "Do not clear Channels[] so our allocations are reused next frame"
        )

        .def("clear_free_memory",    // :2457
            [](ImDrawListSplitter & self)
            {
                return self.ClearFreeMemory();
            }
        )

        .def("split",    // :2458
            [](ImDrawListSplitter & self, ImDrawList * draw_list, int count)
            {
                return self.Split(draw_list, count);
            },
            py::arg("draw_list"),
            py::arg("count")
        )

        .def("merge",    // :2459
            [](ImDrawListSplitter & self, ImDrawList * draw_list)
            {
                return self.Merge(draw_list);
            },
            py::arg("draw_list")
        )

        .def("set_current_channel",    // :2460
            [](ImDrawListSplitter & self, ImDrawList * draw_list, int channel_idx)
            {
                return self.SetCurrentChannel(draw_list, channel_idx);
            },
            py::arg("draw_list"),
            py::arg("channel_idx")
        )

        ; 



    py::enum_<ImDrawFlags_>(m, "ImDrawFlags_", py::arithmetic(), "Flags for ImDrawList functions\n(Legacy: bit 0 must always correspond to ImDrawFlags_Closed to be backward compatible with old API using a bool. Bits 1..3 must be unused)")
        .value("none", ImDrawFlags_None, "")
        .value("closed", ImDrawFlags_Closed, "PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)")
        .value("round_corners_top_left", ImDrawFlags_RoundCornersTopLeft, "AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding > 0.0f, we default to all corners). Was 0x01.")
        .value("round_corners_top_right", ImDrawFlags_RoundCornersTopRight, "AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding > 0.0f, we default to all corners). Was 0x02.")
        .value("round_corners_bottom_left", ImDrawFlags_RoundCornersBottomLeft, "AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding > 0.0f, we default to all corners). Was 0x04.")
        .value("round_corners_bottom_right", ImDrawFlags_RoundCornersBottomRight, "AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding > 0.0f, we default to all corners). Wax 0x08.")
        .value("round_corners_none", ImDrawFlags_RoundCornersNone, "AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding > 0.0f). This is NOT zero, NOT an implicit flag!")
        .value("round_corners_top", ImDrawFlags_RoundCornersTop, "")
        .value("round_corners_bottom", ImDrawFlags_RoundCornersBottom, "")
        .value("round_corners_left", ImDrawFlags_RoundCornersLeft, "")
        .value("round_corners_right", ImDrawFlags_RoundCornersRight, "")
        .value("round_corners_all", ImDrawFlags_RoundCornersAll, "")
        .value("round_corners_default_", ImDrawFlags_RoundCornersDefault_, "Default to ALL corners if none of the _RoundCornersXX flags are specified.")
        .value("round_corners_mask_", ImDrawFlags_RoundCornersMask_, "");



    py::enum_<ImDrawListFlags_>(m, "ImDrawListFlags_", py::arithmetic(), "Flags for ImDrawList instance. Those are set automatically by ImGui:: functions from ImGuiIO settings, and generally not manipulated directly.\nIt is however possible to temporarily alter flags between calls to ImDrawList:: functions.")
        .value("none", ImDrawListFlags_None, "")
        .value("anti_aliased_lines", ImDrawListFlags_AntiAliasedLines, "Enable anti-aliased lines/borders (*2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles)")
        .value("anti_aliased_lines_use_tex", ImDrawListFlags_AntiAliasedLinesUseTex, "Enable anti-aliased lines/borders using textures when possible. Require backend to render with bilinear filtering (NOT point/nearest filtering).")
        .value("anti_aliased_fill", ImDrawListFlags_AntiAliasedFill, "Enable anti-aliased edge around filled shapes (rounded rectangles, circles).")
        .value("allow_vtx_offset", ImDrawListFlags_AllowVtxOffset, "Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.");



    auto pyClassImDrawList = py::class_<ImDrawList>
        (m, "ImDrawList", "Draw command list\nThis is the low-level list of polygons that ImGui:: functions are filling. At the end of the frame,\nall command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.\nEach dear imgui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to\naccess the current window draw list and draw custom primitives.\nYou can interleave normal ImGui:: calls and adding primitives to the current draw list.\nIn single viewport mode, top-left is == GetMainViewport()->Pos (generally 0,0), bottom-right is == GetMainViewport()->Pos+Size (generally io.DisplaySize).\nYou are totally free to apply whatever transformation matrix to want to the data (depending on the use of the transformation you may want to apply it to ClipRect as well!)\nImportant: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.")
        .def_readwrite("cmd_buffer", &ImDrawList::CmdBuffer, "Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.")
        .def_readwrite("idx_buffer", &ImDrawList::IdxBuffer, "Index buffer. Each command consume ImDrawCmd::ElemCount of those")
        .def_readwrite("vtx_buffer", &ImDrawList::VtxBuffer, "Vertex buffer.")
        .def_readwrite("flags", &ImDrawList::Flags, "Flags, you may poke into these to adjust anti-aliasing settings per-primitive.")
        .def_readwrite("_vtx_current_idx", &ImDrawList::_VtxCurrentIdx, "[Internal] generally == VtxBuffer.Size unless we are past 64K vertices, in which case this gets reset to 0.")
        .def_readwrite("_data", &ImDrawList::_Data, "Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)")
        .def_readwrite("_owner_name", &ImDrawList::_OwnerName, "Pointer to owner window's name for debugging")
        .def_readwrite("_vtx_write_ptr", &ImDrawList::_VtxWritePtr, "[Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)")
        .def_readwrite("_idx_write_ptr", &ImDrawList::_IdxWritePtr, "[Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)")
        .def_readwrite("_clip_rect_stack", &ImDrawList::_ClipRectStack, "[Internal]")
        .def_readwrite("_texture_id_stack", &ImDrawList::_TextureIdStack, "[Internal]")
        .def_readwrite("_path", &ImDrawList::_Path, "[Internal] current path building")
        .def_readwrite("_cmd_header", &ImDrawList::_CmdHeader, "[Internal] template of active commands. Fields should match those of CmdBuffer.back().")
        .def_readwrite("_splitter", &ImDrawList::_Splitter, "[Internal] for channels api (note: prefer using your own persistent instance of ImDrawListSplitter!)")
        .def_readwrite("_fringe_scale", &ImDrawList::_FringeScale, "[Internal] anti-alias fringe is scaled by this value, this helps to keep things sharp while zooming at vertex buffer content")
        .def(py::init<const ImDrawListSharedData *>(),
            py::arg("shared_data"),
            "If you want to create ImDrawList instances, pass them ImGui::GetDrawListSharedData() or create and use your own ImDrawListSharedData (so you can use ImDrawList without ImGui)"))
        .def("push_clip_rect",    // :2528
            [](ImDrawList & self, const ImVec2 & clip_rect_min, const ImVec2 & clip_rect_max, bool intersect_with_current_clip_rect = false)
            {
                return self.PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
            },
            py::arg("clip_rect_min"),
            py::arg("clip_rect_max"),
            py::arg("intersect_with_current_clip_rect") = false,
            "Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)"
        )

        .def("push_clip_rect_full_screen",    // :2529
            [](ImDrawList & self)
            {
                return self.PushClipRectFullScreen();
            }
        )

        .def("pop_clip_rect",    // :2530
            [](ImDrawList & self)
            {
                return self.PopClipRect();
            }
        )

        .def("push_texture_id",    // :2531
            [](ImDrawList & self, ImTextureID texture_id)
            {
                return self.PushTextureID(texture_id);
            },
            py::arg("texture_id")
        )

        .def("pop_texture_id",    // :2532
            [](ImDrawList & self)
            {
                return self.PopTextureID();
            }
        )

        .def("get_clip_rect_min",    // :2533
            [](ImDrawList & self)
            {
                return self.GetClipRectMin();
            }
        )

        .def("get_clip_rect_max",    // :2534
            [](ImDrawList & self)
            {
                return self.GetClipRectMax();
            }
        )

        .def("add_line",    // :2543
            [](ImDrawList & self, const ImVec2 & p1, const ImVec2 & p2, ImU32 col, float thickness = 1.0f)
            {
                return self.AddLine(p1, p2, col, thickness);
            },
            py::arg("p1"),
            py::arg("p2"),
            py::arg("col"),
            py::arg("thickness") = 1.0f,
            "Primitives\n- Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have \"inward\" anti-aliasing.\n- For rectangular primitives, \"p_min\" and \"p_max\" represent the upper-left and lower-right corners.\n- For circle primitives, use \"num_segments == 0\" to automatically calculate tessellation (preferred).\nIn older versions (until Dear ImGui 1.77) the AddCircle functions defaulted to num_segments == 12.\nIn future versions we will use textures to provide cheaper and higher-quality circles.\nUse AddNgon() and AddNgonFilled() functions if you need to guaranteed a specific number of sides."
        )

        .def("add_rect",    // :2544
            [](ImDrawList & self, const ImVec2 & p_min, const ImVec2 & p_max, ImU32 col, float rounding = 0.0f, ImDrawFlags flags = 0, float thickness = 1.0f)
            {
                return self.AddRect(p_min, p_max, col, rounding, flags, thickness);
            },
            py::arg("p_min"),
            py::arg("p_max"),
            py::arg("col"),
            py::arg("rounding") = 0.0f,
            py::arg("flags") = 0,
            py::arg("thickness") = 1.0f,
            "a: upper-left, b: lower-right (== upper-left + size)"
        )

        .def("add_rect_filled",    // :2545
            [](ImDrawList & self, const ImVec2 & p_min, const ImVec2 & p_max, ImU32 col, float rounding = 0.0f, ImDrawFlags flags = 0)
            {
                return self.AddRectFilled(p_min, p_max, col, rounding, flags);
            },
            py::arg("p_min"),
            py::arg("p_max"),
            py::arg("col"),
            py::arg("rounding") = 0.0f,
            py::arg("flags") = 0,
            "a: upper-left, b: lower-right (== upper-left + size)"
        )

        .def("add_rect_filled_multi_color",    // :2546
            [](ImDrawList & self, const ImVec2 & p_min, const ImVec2 & p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left)
            {
                return self.AddRectFilledMultiColor(p_min, p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
            },
            py::arg("p_min"),
            py::arg("p_max"),
            py::arg("col_upr_left"),
            py::arg("col_upr_right"),
            py::arg("col_bot_right"),
            py::arg("col_bot_left")
        )

        .def("add_quad",    // :2547
            [](ImDrawList & self, const ImVec2 & p1, const ImVec2 & p2, const ImVec2 & p3, const ImVec2 & p4, ImU32 col, float thickness = 1.0f)
            {
                return self.AddQuad(p1, p2, p3, p4, col, thickness);
            },
            py::arg("p1"),
            py::arg("p2"),
            py::arg("p3"),
            py::arg("p4"),
            py::arg("col"),
            py::arg("thickness") = 1.0f
        )

        .def("add_quad_filled",    // :2548
            [](ImDrawList & self, const ImVec2 & p1, const ImVec2 & p2, const ImVec2 & p3, const ImVec2 & p4, ImU32 col)
            {
                return self.AddQuadFilled(p1, p2, p3, p4, col);
            },
            py::arg("p1"),
            py::arg("p2"),
            py::arg("p3"),
            py::arg("p4"),
            py::arg("col")
        )

        .def("add_triangle",    // :2549
            [](ImDrawList & self, const ImVec2 & p1, const ImVec2 & p2, const ImVec2 & p3, ImU32 col, float thickness = 1.0f)
            {
                return self.AddTriangle(p1, p2, p3, col, thickness);
            },
            py::arg("p1"),
            py::arg("p2"),
            py::arg("p3"),
            py::arg("col"),
            py::arg("thickness") = 1.0f
        )

        .def("add_triangle_filled",    // :2550
            [](ImDrawList & self, const ImVec2 & p1, const ImVec2 & p2, const ImVec2 & p3, ImU32 col)
            {
                return self.AddTriangleFilled(p1, p2, p3, col);
            },
            py::arg("p1"),
            py::arg("p2"),
            py::arg("p3"),
            py::arg("col")
        )

        .def("add_circle",    // :2551
            [](ImDrawList & self, const ImVec2 & center, float radius, ImU32 col, int num_segments = 0, float thickness = 1.0f)
            {
                return self.AddCircle(center, radius, col, num_segments, thickness);
            },
            py::arg("center"),
            py::arg("radius"),
            py::arg("col"),
            py::arg("num_segments") = 0,
            py::arg("thickness") = 1.0f
        )

        .def("add_circle_filled",    // :2552
            [](ImDrawList & self, const ImVec2 & center, float radius, ImU32 col, int num_segments = 0)
            {
                return self.AddCircleFilled(center, radius, col, num_segments);
            },
            py::arg("center"),
            py::arg("radius"),
            py::arg("col"),
            py::arg("num_segments") = 0
        )

        .def("add_ngon",    // :2553
            [](ImDrawList & self, const ImVec2 & center, float radius, ImU32 col, int num_segments, float thickness = 1.0f)
            {
                return self.AddNgon(center, radius, col, num_segments, thickness);
            },
            py::arg("center"),
            py::arg("radius"),
            py::arg("col"),
            py::arg("num_segments"),
            py::arg("thickness") = 1.0f
        )

        .def("add_ngon_filled",    // :2554
            [](ImDrawList & self, const ImVec2 & center, float radius, ImU32 col, int num_segments)
            {
                return self.AddNgonFilled(center, radius, col, num_segments);
            },
            py::arg("center"),
            py::arg("radius"),
            py::arg("col"),
            py::arg("num_segments")
        )

        .def("add_text",    // :2555
            [](ImDrawList & self, const ImVec2 & pos, ImU32 col, const char * text_begin, const char * text_end = NULL)
            {
                return self.AddText(pos, col, text_begin, text_end);
            },
            py::arg("pos"),
            py::arg("col"),
            py::arg("text_begin"),
            py::arg("text_end") = NULL
        )

        .def("add_text",    // :2556
            [](ImDrawList & self, const ImFont * font, float font_size, const ImVec2 & pos, ImU32 col, const char * text_begin, const char * text_end = NULL, float wrap_width = 0.0f, const ImVec4 * cpu_fine_clip_rect = NULL)
            {
                return self.AddText(font, font_size, pos, col, text_begin, text_end, wrap_width, cpu_fine_clip_rect);
            },
            py::arg("font"),
            py::arg("font_size"),
            py::arg("pos"),
            py::arg("col"),
            py::arg("text_begin"),
            py::arg("text_end") = NULL,
            py::arg("wrap_width") = 0.0f,
            py::arg("cpu_fine_clip_rect") = NULL
        )

        .def("add_polyline",    // :2557
            [](ImDrawList & self, const ImVec2 * points, int num_points, ImU32 col, ImDrawFlags flags, float thickness)
            {
                return self.AddPolyline(points, num_points, col, flags, thickness);
            },
            py::arg("points"),
            py::arg("num_points"),
            py::arg("col"),
            py::arg("flags"),
            py::arg("thickness")
        )

        .def("add_convex_poly_filled",    // :2558
            [](ImDrawList & self, const ImVec2 * points, int num_points, ImU32 col)
            {
                return self.AddConvexPolyFilled(points, num_points, col);
            },
            py::arg("points"),
            py::arg("num_points"),
            py::arg("col")
        )

        .def("add_bezier_cubic",    // :2559
            [](ImDrawList & self, const ImVec2 & p1, const ImVec2 & p2, const ImVec2 & p3, const ImVec2 & p4, ImU32 col, float thickness, int num_segments = 0)
            {
                return self.AddBezierCubic(p1, p2, p3, p4, col, thickness, num_segments);
            },
            py::arg("p1"),
            py::arg("p2"),
            py::arg("p3"),
            py::arg("p4"),
            py::arg("col"),
            py::arg("thickness"),
            py::arg("num_segments") = 0,
            "Cubic Bezier (4 control points)"
        )

        .def("add_bezier_quadratic",    // :2560
            [](ImDrawList & self, const ImVec2 & p1, const ImVec2 & p2, const ImVec2 & p3, ImU32 col, float thickness, int num_segments = 0)
            {
                return self.AddBezierQuadratic(p1, p2, p3, col, thickness, num_segments);
            },
            py::arg("p1"),
            py::arg("p2"),
            py::arg("p3"),
            py::arg("col"),
            py::arg("thickness"),
            py::arg("num_segments") = 0,
            "Quadratic Bezier (3 control points)"
        )

        .def("add_image",    // :2566
            [](ImDrawList & self, ImTextureID user_texture_id, const ImVec2 & p_min, const ImVec2 & p_max, const ImVec2 & uv_min = ImVec2(0, 0), const ImVec2 & uv_max = ImVec2(1, 1), ImU32 col = IM_COL32_WHITE)
            {
                return self.AddImage(user_texture_id, p_min, p_max, uv_min, uv_max, col);
            },
            py::arg("user_texture_id"),
            py::arg("p_min"),
            py::arg("p_max"),
            py::arg("uv_min") = ImVec2(0, 0),
            py::arg("uv_max") = ImVec2(1, 1),
            py::arg("col") = IM_COL32_WHITE,
            "Image primitives\n- Read FAQ to understand what ImTextureID is.\n- \"p_min\" and \"p_max\" represent the upper-left and lower-right corners of the rectangle.\n- \"uv_min\" and \"uv_max\" represent the normalized texture coordinates to use for those corners. Using (0,0)->(1,1) texture coordinates will generally display the entire texture."
        )

        .def("add_image_quad",    // :2567
            [](ImDrawList & self, ImTextureID user_texture_id, const ImVec2 & p1, const ImVec2 & p2, const ImVec2 & p3, const ImVec2 & p4, const ImVec2 & uv1 = ImVec2(0, 0), const ImVec2 & uv2 = ImVec2(1, 0), const ImVec2 & uv3 = ImVec2(1, 1), const ImVec2 & uv4 = ImVec2(0, 1), ImU32 col = IM_COL32_WHITE)
            {
                return self.AddImageQuad(user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
            },
            py::arg("user_texture_id"),
            py::arg("p1"),
            py::arg("p2"),
            py::arg("p3"),
            py::arg("p4"),
            py::arg("uv1") = ImVec2(0, 0),
            py::arg("uv2") = ImVec2(1, 0),
            py::arg("uv3") = ImVec2(1, 1),
            py::arg("uv4") = ImVec2(0, 1),
            py::arg("col") = IM_COL32_WHITE
        )

        .def("add_image_rounded",    // :2568
            [](ImDrawList & self, ImTextureID user_texture_id, const ImVec2 & p_min, const ImVec2 & p_max, const ImVec2 & uv_min, const ImVec2 & uv_max, ImU32 col, float rounding, ImDrawFlags flags = 0)
            {
                return self.AddImageRounded(user_texture_id, p_min, p_max, uv_min, uv_max, col, rounding, flags);
            },
            py::arg("user_texture_id"),
            py::arg("p_min"),
            py::arg("p_max"),
            py::arg("uv_min"),
            py::arg("uv_max"),
            py::arg("col"),
            py::arg("rounding"),
            py::arg("flags") = 0
        )

        .def("path_clear",    // :2572
            [](ImDrawList & self)
            {
                self.PathClear();
            },
            "Stateful path API, add points then finish with PathFillConvex() or PathStroke()\n- Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have \"inward\" anti-aliasing."
        )

        .def("path_line_to",    // :2573
            [](ImDrawList & self, const ImVec2 & pos)
            {
                self.PathLineTo(pos);
            },
            py::arg("pos")
        )

        .def("path_line_to_merge_duplicate",    // :2574
            [](ImDrawList & self, const ImVec2 & pos)
            {
                self.PathLineToMergeDuplicate(pos);
            },
            py::arg("pos")
        )

        .def("path_fill_convex",    // :2575
            [](ImDrawList & self, ImU32 col)
            {
                self.PathFillConvex(col);
            },
            py::arg("col")
        )

        .def("path_stroke",    // :2576
            [](ImDrawList & self, ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f)
            {
                self.PathStroke(col, flags, thickness);
            },
            py::arg("col"),
            py::arg("flags") = 0,
            py::arg("thickness") = 1.0f
        )

        .def("path_arc_to",    // :2577
            [](ImDrawList & self, const ImVec2 & center, float radius, float a_min, float a_max, int num_segments = 0)
            {
                return self.PathArcTo(center, radius, a_min, a_max, num_segments);
            },
            py::arg("center"),
            py::arg("radius"),
            py::arg("a_min"),
            py::arg("a_max"),
            py::arg("num_segments") = 0
        )

        .def("path_arc_to_fast",    // :2578
            [](ImDrawList & self, const ImVec2 & center, float radius, int a_min_of_12, int a_max_of_12)
            {
                return self.PathArcToFast(center, radius, a_min_of_12, a_max_of_12);
            },
            py::arg("center"),
            py::arg("radius"),
            py::arg("a_min_of_12"),
            py::arg("a_max_of_12"),
            "Use precomputed angles for a 12 steps circle"
        )

        .def("path_bezier_cubic_curve_to",    // :2579
            [](ImDrawList & self, const ImVec2 & p2, const ImVec2 & p3, const ImVec2 & p4, int num_segments = 0)
            {
                return self.PathBezierCubicCurveTo(p2, p3, p4, num_segments);
            },
            py::arg("p2"),
            py::arg("p3"),
            py::arg("p4"),
            py::arg("num_segments") = 0,
            "Cubic Bezier (4 control points)"
        )

        .def("path_bezier_quadratic_curve_to",    // :2580
            [](ImDrawList & self, const ImVec2 & p2, const ImVec2 & p3, int num_segments = 0)
            {
                return self.PathBezierQuadraticCurveTo(p2, p3, num_segments);
            },
            py::arg("p2"),
            py::arg("p3"),
            py::arg("num_segments") = 0,
            "Quadratic Bezier (3 control points)"
        )

        .def("path_rect",    // :2581
            [](ImDrawList & self, const ImVec2 & rect_min, const ImVec2 & rect_max, float rounding = 0.0f, ImDrawFlags flags = 0)
            {
                return self.PathRect(rect_min, rect_max, rounding, flags);
            },
            py::arg("rect_min"),
            py::arg("rect_max"),
            py::arg("rounding") = 0.0f,
            py::arg("flags") = 0
        )

        .def("add_callback",    // :2584
            [](ImDrawList & self, ImDrawCallback callback, void * callback_data)
            {
                return self.AddCallback(callback, callback_data);
            },
            py::arg("callback"),
            py::arg("callback_data"),
            "Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles."
        )

        .def("add_draw_cmd",    // :2585
            [](ImDrawList & self)
            {
                return self.AddDrawCmd();
            },
            "This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible"
        )

        .def("clone_output",    // :2586
            [](ImDrawList & self)
            {
                return self.CloneOutput();
            },
            "Create a clone of the CmdBuffer/IdxBuffer/VtxBuffer."
        )

        .def("channels_split",    // :2594
            [](ImDrawList & self, int count)
            {
                self.ChannelsSplit(count);
            },
            py::arg("count"),
            "Advanced: Channels\n- Use to split render into layers. By switching channels to can render out-of-order (e.g. submit FG primitives before BG primitives)\n- Use to minimize draw calls (e.g. if going back-and-forth between multiple clipping rectangles, prefer to append into separate channels then merge at the end)\n- FIXME-OBSOLETE: This API shouldn't have been in ImDrawList in the first place!\nPrefer using your own persistent instance of ImDrawListSplitter as you can stack them.\nUsing the ImDrawList::ChannelsXXXX you cannot stack a split over another."
        )

        .def("channels_merge",    // :2595
            [](ImDrawList & self)
            {
                self.ChannelsMerge();
            }
        )

        .def("channels_set_current",    // :2596
            [](ImDrawList & self, int n)
            {
                self.ChannelsSetCurrent(n);
            },
            py::arg("n")
        )

        .def("prim_reserve",    // :2601
            [](ImDrawList & self, int idx_count, int vtx_count)
            {
                return self.PrimReserve(idx_count, vtx_count);
            },
            py::arg("idx_count"),
            py::arg("vtx_count"),
            "Advanced: Primitives allocations\n- We render triangles (three vertices)\n- All primitives needs to be reserved via PrimReserve() beforehand."
        )

        .def("prim_unreserve",    // :2602
            [](ImDrawList & self, int idx_count, int vtx_count)
            {
                return self.PrimUnreserve(idx_count, vtx_count);
            },
            py::arg("idx_count"),
            py::arg("vtx_count")
        )

        .def("prim_rect",    // :2603
            [](ImDrawList & self, const ImVec2 & a, const ImVec2 & b, ImU32 col)
            {
                return self.PrimRect(a, b, col);
            },
            py::arg("a"),
            py::arg("b"),
            py::arg("col"),
            "Axis aligned rectangle (composed of two triangles)"
        )

        .def("prim_rect_uv",    // :2604
            [](ImDrawList & self, const ImVec2 & a, const ImVec2 & b, const ImVec2 & uv_a, const ImVec2 & uv_b, ImU32 col)
            {
                return self.PrimRectUV(a, b, uv_a, uv_b, col);
            },
            py::arg("a"),
            py::arg("b"),
            py::arg("uv_a"),
            py::arg("uv_b"),
            py::arg("col")
        )

        .def("prim_quad_uv",    // :2605
            [](ImDrawList & self, const ImVec2 & a, const ImVec2 & b, const ImVec2 & c, const ImVec2 & d, const ImVec2 & uv_a, const ImVec2 & uv_b, const ImVec2 & uv_c, const ImVec2 & uv_d, ImU32 col)
            {
                return self.PrimQuadUV(a, b, c, d, uv_a, uv_b, uv_c, uv_d, col);
            },
            py::arg("a"),
            py::arg("b"),
            py::arg("c"),
            py::arg("d"),
            py::arg("uv_a"),
            py::arg("uv_b"),
            py::arg("uv_c"),
            py::arg("uv_d"),
            py::arg("col")
        )

        .def("prim_write_vtx",    // :2606
            [](ImDrawList & self, const ImVec2 & pos, const ImVec2 & uv, ImU32 col)
            {
                self.PrimWriteVtx(pos, uv, col);
            },
            py::arg("pos"),
            py::arg("uv"),
            py::arg("col")
        )

        .def("prim_write_idx",    // :2607
            [](ImDrawList & self, ImDrawIdx idx)
            {
                self.PrimWriteIdx(idx);
            },
            py::arg("idx")
        )

        .def("prim_vtx",    // :2608
            [](ImDrawList & self, const ImVec2 & pos, const ImVec2 & uv, ImU32 col)
            {
                self.PrimVtx(pos, uv, col);
            },
            py::arg("pos"),
            py::arg("uv"),
            py::arg("col")
        )

        .def("_reset_for_new_frame",    // :2616
            [](ImDrawList & self)
            {
                return self._ResetForNewFrame();
            },
            "[Internal helpers]"
        )

        .def("_clear_free_memory",    // :2617
            [](ImDrawList & self)
            {
                return self._ClearFreeMemory();
            }
        )

        .def("_pop_unused_draw_cmd",    // :2618
            [](ImDrawList & self)
            {
                return self._PopUnusedDrawCmd();
            }
        )

        .def("_try_merge_draw_cmds",    // :2619
            [](ImDrawList & self)
            {
                return self._TryMergeDrawCmds();
            }
        )

        .def("_on_changed_clip_rect",    // :2620
            [](ImDrawList & self)
            {
                return self._OnChangedClipRect();
            }
        )

        .def("_on_changed_texture_id",    // :2621
            [](ImDrawList & self)
            {
                return self._OnChangedTextureID();
            }
        )

        .def("_on_changed_vtx_offset",    // :2622
            [](ImDrawList & self)
            {
                return self._OnChangedVtxOffset();
            }
        )

        .def("_calc_circle_auto_segment_count",    // :2623
            [](ImDrawList & self, float radius)
            {
                return self._CalcCircleAutoSegmentCount(radius);
            },
            py::arg("radius")
        )

        .def("_path_arc_to_fast_ex",    // :2624
            [](ImDrawList & self, const ImVec2 & center, float radius, int a_min_sample, int a_max_sample, int a_step)
            {
                return self._PathArcToFastEx(center, radius, a_min_sample, a_max_sample, a_step);
            },
            py::arg("center"),
            py::arg("radius"),
            py::arg("a_min_sample"),
            py::arg("a_max_sample"),
            py::arg("a_step")
        )

        .def("_path_arc_to_n",    // :2625
            [](ImDrawList & self, const ImVec2 & center, float radius, float a_min, float a_max, int num_segments)
            {
                return self._PathArcToN(center, radius, a_min, a_max, num_segments);
            },
            py::arg("center"),
            py::arg("radius"),
            py::arg("a_min"),
            py::arg("a_max"),
            py::arg("num_segments")
        )

        ; 



    auto pyClassImDrawData = py::class_<ImDrawData>
        (m, "ImDrawData", "All draw data to render a Dear ImGui frame\n(NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,\nas this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList)")
        .def_readwrite("valid", &ImDrawData::Valid, "Only valid after Render() is called and before the next NewFrame() is called.")
        .def_readwrite("cmd_lists_count", &ImDrawData::CmdListsCount, "Number of ImDrawList to render")
        .def_readwrite("total_idx_count", &ImDrawData::TotalIdxCount, "For convenience, sum of all ImDrawList's IdxBuffer.Size")
        .def_readwrite("total_vtx_count", &ImDrawData::TotalVtxCount, "For convenience, sum of all ImDrawList's VtxBuffer.Size")
        .def_readwrite("cmd_lists", &ImDrawData::CmdLists, "Array of ImDrawList to render. The ImDrawList are owned by ImGuiContext and only pointed to from here.")
        .def_readwrite("display_pos", &ImDrawData::DisplayPos, "Top-left position of the viewport to render (== top-left of the orthogonal projection matrix to use) (== GetMainViewport()->Pos for the main viewport, == (0.0) in most single-viewport applications)")
        .def_readwrite("display_size", &ImDrawData::DisplaySize, "Size of the viewport to render (== GetMainViewport()->Size for the main viewport, == io.DisplaySize in most single-viewport applications)")
        .def_readwrite("framebuffer_scale", &ImDrawData::FramebufferScale, "Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.")
        .def(py::init<>(),
            "Functions"))
        .def("clear",    // :2644
            [](ImDrawData & self)
            {
                self.Clear();
            },
            "The ImDrawList are owned by ImGuiContext!"
        )

        .def("de_index_all_buffers",    // :2645
            [](ImDrawData & self)
            {
                return self.DeIndexAllBuffers();
            },
            "Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!"
        )

        .def("scale_clip_rects",    // :2646
            [](ImDrawData & self, const ImVec2 & fb_scale)
            {
                return self.ScaleClipRects(fb_scale);
            },
            py::arg("fb_scale"),
            "Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution."
        )

        ; 



    auto pyClassImFontConfig = py::class_<ImFontConfig>
        (m, "ImFontConfig", "")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("font_data", &ImFontConfig::FontData, "         // TTF/OTF data")
        .def_readwrite("font_data_size", &ImFontConfig::FontDataSize, "         // TTF/OTF data size")
        .def_readwrite("font_data_owned_by_atlas", &ImFontConfig::FontDataOwnedByAtlas, "True     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).")
        .def_readwrite("font_no", &ImFontConfig::FontNo, "0        // Index of font within TTF/OTF file")
        .def_readwrite("size_pixels", &ImFontConfig::SizePixels, "         // Size in pixels for rasterizer (more or less maps to the resulting font height).")
        .def_readwrite("oversample_h", &ImFontConfig::OversampleH, "3        // Rasterize at higher quality for sub-pixel positioning. Note the difference between 2 and 3 is minimal so you can reduce this to 2 to save memory. Read https://github.com/nothings/stb/blob/master/tests/oversample/README.md for details.")
        .def_readwrite("oversample_v", &ImFontConfig::OversampleV, "1        // Rasterize at higher quality for sub-pixel positioning. This is not really useful as we don't use sub-pixel positions on the Y axis.")
        .def_readwrite("pixel_snap_h", &ImFontConfig::PixelSnapH, "False    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.")
        .def_readwrite("glyph_extra_spacing", &ImFontConfig::GlyphExtraSpacing, "0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.")
        .def_readwrite("glyph_offset", &ImFontConfig::GlyphOffset, "0, 0     // Offset all glyphs from this font input.")
        .def_readwrite("glyph_ranges", &ImFontConfig::GlyphRanges, "NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.")
        .def_readwrite("glyph_min_advance_x", &ImFontConfig::GlyphMinAdvanceX, "0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font")
        .def_readwrite("glyph_max_advance_x", &ImFontConfig::GlyphMaxAdvanceX, "FLT_MAX  // Maximum AdvanceX for glyphs")
        .def_readwrite("merge_mode", &ImFontConfig::MergeMode, "False    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.")
        .def_readwrite("font_builder_flags", &ImFontConfig::FontBuilderFlags, "0        // Settings for custom font builder. THIS IS BUILDER IMPLEMENTATION DEPENDENT. Leave as zero if unsure.")
        .def_readwrite("rasterizer_multiply", &ImFontConfig::RasterizerMultiply, "1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.")
        .def_readwrite("ellipsis_char", &ImFontConfig::EllipsisChar, "-1       // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.")
        .def_readwrite("name[40]", &ImFontConfig::Name[40], "Name (strictly to ease debugging)")
        .def_readwrite("dst_font", &ImFontConfig::DstFont, "")
        .def("im_font_config",    // :2677
            [](ImFontConfig & self)
            {
                return self.ImFontConfig();
            }
        )

        ; 



    auto pyClassImFontGlyph = py::class_<ImFontGlyph>
        (m, "ImFontGlyph", "Hold rendering data for one glyph.\n(Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this)")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("colored", &ImFontGlyph::Colored, "Flag to indicate glyph is colored and should generally ignore tinting (make it usable with no shift on little-endian as this is used in loops)")
        .def_readwrite("visible", &ImFontGlyph::Visible, "Flag to indicate glyph has no visible pixels (e.g. space). Allow early out when rendering.")
        .def_readwrite("codepoint", &ImFontGlyph::Codepoint, "0x0000..0x10FFFF")
        .def_readwrite("advance_x", &ImFontGlyph::AdvanceX, "Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)")
        .def_readwrite("x0", &ImFontGlyph::X0, "Glyph corners")
        .def_readwrite("y0", &ImFontGlyph::Y0, "Glyph corners")
        .def_readwrite("x1", &ImFontGlyph::X1, "Glyph corners")
        .def_readwrite("y1", &ImFontGlyph::Y1, "Glyph corners")
        .def_readwrite("u0", &ImFontGlyph::U0, "Texture coordinates")
        .def_readwrite("v0", &ImFontGlyph::V0, "Texture coordinates")
        .def_readwrite("u1", &ImFontGlyph::U1, "Texture coordinates")
        .def_readwrite("v1", &ImFontGlyph::V1, "Texture coordinates")
        ; 



    auto pyClassImFontGlyphRangesBuilder = py::class_<ImFontGlyphRangesBuilder>
        (m, "ImFontGlyphRangesBuilder", "Helper to build glyph ranges from text/string data. Feed your application strings/characters to it then call BuildRanges().\nThis is essentially a tightly packed of vector of 64k booleans = 8KB storage.")
        .def_readwrite("used_chars", &ImFontGlyphRangesBuilder::UsedChars, "Store 1-bit per Unicode code point (0=unused, 1=used)")
        .def(py::init<>())
        .def("clear",    // :2699
            [](ImFontGlyphRangesBuilder & self)
            {
                self.Clear();
            }
        )

        .def("get_bit",    // :2700
            [](ImFontGlyphRangesBuilder & self, size_t n)
            {
                return self.GetBit(n);
            },
            py::arg("n"),
            "Get bit n in the array"
        )

        .def("set_bit",    // :2701
            [](ImFontGlyphRangesBuilder & self, size_t n)
            {
                self.SetBit(n);
            },
            py::arg("n"),
            "Set bit n in the array"
        )

        .def("add_char",    // :2702
            [](ImFontGlyphRangesBuilder & self, ImWchar c)
            {
                self.AddChar(c);
            },
            py::arg("c"),
            "Add character"
        )

        .def("add_text",    // :2703
            [](ImFontGlyphRangesBuilder & self, const char * text, const char * text_end = NULL)
            {
                return self.AddText(text, text_end);
            },
            py::arg("text"),
            py::arg("text_end") = NULL,
            "Add string (each character of the UTF-8 string are added)"
        )

        .def("add_ranges",    // :2704
            [](ImFontGlyphRangesBuilder & self, const ImWchar * ranges)
            {
                return self.AddRanges(ranges);
            },
            py::arg("ranges"),
            "Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCII/Latin+Ext"
        )

        .def("build_ranges",    // :2705
            [](ImFontGlyphRangesBuilder & self, ImVector<ImWchar> * out_ranges)
            {
                return self.BuildRanges(out_ranges);
            },
            py::arg("out_ranges"),
            "Output new ranges"
        )

        ; 



    auto pyClassImFontAtlasCustomRect = py::class_<ImFontAtlasCustomRect>
        (m, "ImFontAtlasCustomRect", "See ImFontAtlas::AddCustomRectXXX functions.")
        .def_readwrite("width", &ImFontAtlasCustomRect::Width, "Input    // Desired rectangle dimension")
        .def_readwrite("height", &ImFontAtlasCustomRect::Height, "Input    // Desired rectangle dimension")
        .def_readwrite("x", &ImFontAtlasCustomRect::X, "Output   // Packed position in Atlas")
        .def_readwrite("y", &ImFontAtlasCustomRect::Y, "Output   // Packed position in Atlas")
        .def_readwrite("glyph_id", &ImFontAtlasCustomRect::GlyphID, "Input    // For custom font glyphs only (ID < 0x110000)")
        .def_readwrite("glyph_advance_x", &ImFontAtlasCustomRect::GlyphAdvanceX, "Input    // For custom font glyphs only: glyph xadvance")
        .def_readwrite("glyph_offset", &ImFontAtlasCustomRect::GlyphOffset, "Input    // For custom font glyphs only: glyph display offset")
        .def_readwrite("font", &ImFontAtlasCustomRect::Font, "Input    // For custom font glyphs only: target font")
        .def(py::init<>())
        .def("is_packed",    // :2718
            [](ImFontAtlasCustomRect & self)
            {
                return self.IsPacked();
            }
        )

        ; 



    py::enum_<ImFontAtlasFlags_>(m, "ImFontAtlasFlags_", py::arithmetic(), "Flags for ImFontAtlas build")
        .value("none", ImFontAtlasFlags_None, "")
        .value("no_power_of_two_height", ImFontAtlasFlags_NoPowerOfTwoHeight, "Don't round the height to next power of two")
        .value("no_mouse_cursors", ImFontAtlasFlags_NoMouseCursors, "Don't build software mouse cursors into the atlas (save a little texture memory)")
        .value("no_baked_lines", ImFontAtlasFlags_NoBakedLines, "Don't build thick line textures into the atlas (save a little texture memory, allow support for point/nearest filtering). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU).");



    auto pyClassImFontAtlas = py::class_<ImFontAtlas>
        (m, "ImFontAtlas", "Load and rasterize multiple TTF/OTF fonts into a same texture. The font atlas will build a single texture holding:\n- One or more fonts.\n- Custom graphics data needed to render the shapes needed by Dear ImGui.\n- Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas).\nIt is the user-code responsibility to setup/build the atlas, then upload the pixel data into a texture accessible by your graphics api.\n- Optionally, call any of the AddFont functions. If you don't call any, the default font embedded in the code will be loaded for you.\n- Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.\n- Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples)\n- Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture in a format natural to your graphics API.\nThis value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details.\nCommon pitfalls:\n- If you pass a 'glyph_ranges' array to AddFont functions, you need to make sure that your array persist up until the\natlas is build (when calling GetTexData or Build()). We only copy the pointer, not the data.\n- Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction.\nYou can set font_cfg->FontDataOwnedByAtlas=False to keep ownership of your data and it won't be freed,\n- Even though many functions are suffixed with \"TTF\", OTF data is supported just as well.\n- This is an old API and it is currently awkward for those and and various other reasons! We will address them in the future!")
        .def(py::init<>() // implicit default constructor
        .def("im_font_atlas",    // :2749
            [](ImFontAtlas & self)
            {
                return self.ImFontAtlas();
            }
        )

        .def("add_font",    // :2751
            [](ImFontAtlas & self, const ImFontConfig * font_cfg)
            {
                return self.AddFont(font_cfg);
            },
            py::arg("font_cfg")
        )

        .def("add_font_default",    // :2752
            [](ImFontAtlas & self, const ImFontConfig * font_cfg = NULL)
            {
                return self.AddFontDefault(font_cfg);
            },
            py::arg("font_cfg") = NULL
        )

        .def("add_font_from_file_ttf",    // :2753
            [](ImFontAtlas & self, const char * filename, float size_pixels, const ImFontConfig * font_cfg = NULL, const ImWchar * glyph_ranges = NULL)
            {
                return self.AddFontFromFileTTF(filename, size_pixels, font_cfg, glyph_ranges);
            },
            py::arg("filename"),
            py::arg("size_pixels"),
            py::arg("font_cfg") = NULL,
            py::arg("glyph_ranges") = NULL
        )

        .def("add_font_from_memory_ttf",    // :2754
            [](ImFontAtlas & self, void * font_data, int font_size, float size_pixels, const ImFontConfig * font_cfg = NULL, const ImWchar * glyph_ranges = NULL)
            {
                return self.AddFontFromMemoryTTF(font_data, font_size, size_pixels, font_cfg, glyph_ranges);
            },
            py::arg("font_data"),
            py::arg("font_size"),
            py::arg("size_pixels"),
            py::arg("font_cfg") = NULL,
            py::arg("glyph_ranges") = NULL,
            "Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=False to keep ownership of your data and it won't be freed."
        )

        .def("add_font_from_memory_compressed_ttf",    // :2755
            [](ImFontAtlas & self, const void * compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig * font_cfg = NULL, const ImWchar * glyph_ranges = NULL)
            {
                return self.AddFontFromMemoryCompressedTTF(compressed_font_data, compressed_font_size, size_pixels, font_cfg, glyph_ranges);
            },
            py::arg("compressed_font_data"),
            py::arg("compressed_font_size"),
            py::arg("size_pixels"),
            py::arg("font_cfg") = NULL,
            py::arg("glyph_ranges") = NULL,
            "'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp."
        )

        .def("add_font_from_memory_compressed_base85_ttf",    // :2756
            [](ImFontAtlas & self, const char * compressed_font_data_base85, float size_pixels, const ImFontConfig * font_cfg = NULL, const ImWchar * glyph_ranges = NULL)
            {
                return self.AddFontFromMemoryCompressedBase85TTF(compressed_font_data_base85, size_pixels, font_cfg, glyph_ranges);
            },
            py::arg("compressed_font_data_base85"),
            py::arg("size_pixels"),
            py::arg("font_cfg") = NULL,
            py::arg("glyph_ranges") = NULL,
            "'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter."
        )

        .def("clear_input_data",    // :2757
            [](ImFontAtlas & self)
            {
                return self.ClearInputData();
            },
            "Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts."
        )

        .def("clear_tex_data",    // :2758
            [](ImFontAtlas & self)
            {
                return self.ClearTexData();
            },
            "Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory."
        )

        .def("clear_fonts",    // :2759
            [](ImFontAtlas & self)
            {
                return self.ClearFonts();
            },
            "Clear output font data (glyphs storage, UV coordinates)."
        )

        .def("clear",    // :2760
            [](ImFontAtlas & self)
            {
                return self.Clear();
            },
            "Clear all input and output."
        )

        .def("build",    // :2767
            [](ImFontAtlas & self)
            {
                return self.Build();
            },
            "Build pixels data. This is called automatically for you by the GetTexData functions."
        )

        .def("get_tex_data_as_alpha8",    // :2768
            [](ImFontAtlas & self, unsigned char * * out_pixels, int * out_width, int * out_height, int * out_bytes_per_pixel = NULL)
            {
                return self.GetTexDataAsAlpha8(out_pixels, out_width, out_height, out_bytes_per_pixel);
            },
            py::arg("out_pixels"),
            py::arg("out_width"),
            py::arg("out_height"),
            py::arg("out_bytes_per_pixel") = NULL,
            "1 byte per-pixel"
        )

        .def("get_tex_data_as_rgba32",    // :2769
            [](ImFontAtlas & self, unsigned char * * out_pixels, int * out_width, int * out_height, int * out_bytes_per_pixel = NULL)
            {
                return self.GetTexDataAsRGBA32(out_pixels, out_width, out_height, out_bytes_per_pixel);
            },
            py::arg("out_pixels"),
            py::arg("out_width"),
            py::arg("out_height"),
            py::arg("out_bytes_per_pixel") = NULL,
            "4 bytes-per-pixel"
        )

        .def("is_built",    // :2770
            [](ImFontAtlas & self)
            {
                return self.IsBuilt();
            },
            "Bit ambiguous: used to detect when user didn't built texture but effectively we should check TexID != 0 except that would be backend dependent..."
        )

        .def("set_tex_id",    // :2771
            [](ImFontAtlas & self, ImTextureID id)
            {
                self.SetTexID(id);
            },
            py::arg("id")
        )

        .def("get_glyph_ranges_default",    // :2780
            [](ImFontAtlas & self)
            {
                return self.GetGlyphRangesDefault();
            },
            "Basic Latin, Extended Latin"
        )

        .def("get_glyph_ranges_korean",    // :2781
            [](ImFontAtlas & self)
            {
                return self.GetGlyphRangesKorean();
            },
            "Default + Korean characters"
        )

        .def("get_glyph_ranges_japanese",    // :2782
            [](ImFontAtlas & self)
            {
                return self.GetGlyphRangesJapanese();
            },
            "Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs"
        )

        .def("get_glyph_ranges_chinese_full",    // :2783
            [](ImFontAtlas & self)
            {
                return self.GetGlyphRangesChineseFull();
            },
            "Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs"
        )

        .def("get_glyph_ranges_chinese_simplified_common",    // :2784
            [](ImFontAtlas & self)
            {
                return self.GetGlyphRangesChineseSimplifiedCommon();
            },
            "Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese"
        )

        .def("get_glyph_ranges_cyrillic",    // :2785
            [](ImFontAtlas & self)
            {
                return self.GetGlyphRangesCyrillic();
            },
            "Default + about 400 Cyrillic characters"
        )

        .def("get_glyph_ranges_thai",    // :2786
            [](ImFontAtlas & self)
            {
                return self.GetGlyphRangesThai();
            },
            "Default + Thai characters"
        )

        .def("get_glyph_ranges_vietnamese",    // :2787
            [](ImFontAtlas & self)
            {
                return self.GetGlyphRangesVietnamese();
            },
            "Default + Vietnamese characters"
        )

        .def("add_custom_rect_regular",    // :2800
            [](ImFontAtlas & self, int width, int height)
            {
                return self.AddCustomRectRegular(width, height);
            },
            py::arg("width"),
            py::arg("height"),
            "You can request arbitrary rectangles to be packed into the atlas, for your own purposes.\n- After calling Build(), you can query the rectangle position and render your pixels.\n- If you render colored output, set 'atlas->TexPixelsUseColors = True' as this may help some backends decide of prefered texture format.\n- You can also request your rectangles to be mapped as font glyph (given a font + Unicode point),\nso you can render e.g. custom colorful icons and use them as regular glyphs.\n- Read docs/FONTS.md for more details about using colorful icons.\n- Note: this API may be redesigned later in order to support multi-monitor varying DPI settings."
        )

        .def("add_custom_rect_font_glyph",    // :2801
            [](ImFontAtlas & self, ImFont * font, ImWchar id, int width, int height, float advance_x, const ImVec2 & offset = ImVec2(0, 0))
            {
                return self.AddCustomRectFontGlyph(font, id, width, height, advance_x, offset);
            },
            py::arg("font"),
            py::arg("id"),
            py::arg("width"),
            py::arg("height"),
            py::arg("advance_x"),
            py::arg("offset") = ImVec2(0, 0)
        )

        .def("get_custom_rect_by_index",    // :2802
            [](ImFontAtlas & self, int index)
            {
                return self.GetCustomRectByIndex(index);
            },
            py::arg("index")
        )

        .def("calc_custom_rect_uv",    // :2805
            [](ImFontAtlas & self, const ImFontAtlasCustomRect * rect, ImVec2 * out_uv_min, ImVec2 * out_uv_max)
            {
                return self.CalcCustomRectUV(rect, out_uv_min, out_uv_max);
            },
            py::arg("rect"),
            py::arg("out_uv_min"),
            py::arg("out_uv_max"),
            "[Internal]"
        )

        .def("get_mouse_cursor_tex_data",    // :2806
            [](ImFontAtlas & self, ImGuiMouseCursor cursor, ImVec2 * out_offset, ImVec2 * out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2])
            {
                return self.GetMouseCursorTexData(cursor, out_offset, out_size, out_uv_border[2], out_uv_fill[2]);
            },
            py::arg("cursor"),
            py::arg("out_offset"),
            py::arg("out_size"),
            py::arg("out_uv_border[2]"),
            py::arg("out_uv_fill[2]")
        )

        .def_readwrite("flags", &ImFontAtlas::Flags, "Build flags (see ImFontAtlasFlags_)")
        .def_readwrite("tex_id", &ImFontAtlas::TexID, "User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.")
        .def_readwrite("tex_desired_width", &ImFontAtlas::TexDesiredWidth, "Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.")
        .def_readwrite("tex_glyph_padding", &ImFontAtlas::TexGlyphPadding, "Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0 (will also need to set AntiAliasedLinesUseTex = False).")
        .def_readwrite("locked", &ImFontAtlas::Locked, "Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.")
        .def_readwrite("tex_ready", &ImFontAtlas::TexReady, "Set when texture was built matching current font input")
        .def_readwrite("tex_pixels_use_colors", &ImFontAtlas::TexPixelsUseColors, "Tell whether our texture data is known to use colors (rather than just alpha channel), in order to help backend select a format.")
        .def_readwrite("tex_pixels_alpha8", &ImFontAtlas::TexPixelsAlpha8, "1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth  TexHeight")
        .def_readwrite("tex_pixels_rgba32", &ImFontAtlas::TexPixelsRGBA32, "4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth  TexHeight  4")
        .def_readwrite("tex_width", &ImFontAtlas::TexWidth, "Texture width calculated during Build().")
        .def_readwrite("tex_height", &ImFontAtlas::TexHeight, "Texture height calculated during Build().")
        .def_readwrite("tex_uv_scale", &ImFontAtlas::TexUvScale, "= (1.0f/TexWidth, 1.0f/TexHeight)")
        .def_readwrite("tex_uv_white_pixel", &ImFontAtlas::TexUvWhitePixel, "Texture coordinates to a white pixel")
        .def_readwrite("fonts", &ImFontAtlas::Fonts, "Hold all the fonts returned by AddFont. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.")
        .def_readwrite("custom_rects", &ImFontAtlas::CustomRects, "Rectangles for packing custom texture data into the atlas.")
        .def_readwrite("config_data", &ImFontAtlas::ConfigData, "Configuration data")
        .def_readwrite("tex_uv_lines[im_drawlist_tex_lines_width_max + 1]", &ImFontAtlas::TexUvLines[IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1], "UVs for baked anti-aliased lines")
        .def_readwrite("font_builder_io", &ImFontAtlas::FontBuilderIO, "Opaque interface to a font builder (default to stb_truetype, can be changed to use FreeType by defining IMGUI_ENABLE_FREETYPE).")
        .def_readwrite("font_builder_flags", &ImFontAtlas::FontBuilderFlags, "Shared flags (for all fonts) for custom font builder. THIS IS BUILD IMPLEMENTATION DEPENDENT. Per-font override is also available in ImFontConfig.")
        .def_readwrite("pack_id_mouse_cursors", &ImFontAtlas::PackIdMouseCursors, "Custom texture rectangle ID for white pixel and mouse cursors")
        .def_readwrite("pack_id_lines", &ImFontAtlas::PackIdLines, "Custom texture rectangle ID for baked anti-aliased lines")
        ; 



    auto pyClassImFont = py::class_<ImFont>
        (m, "ImFont", "Font runtime data and rendering\nImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().")
        .def(py::init<>() // implicit default constructor
        .def_readwrite("index_advance_x", &ImFont::IndexAdvanceX, "12-16 // out //            // Sparse. Glyphs->AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this this info, and are often bottleneck in large UI).")
        .def_readwrite("fallback_advance_x", &ImFont::FallbackAdvanceX, "4     // out // = FallbackGlyph->AdvanceX")
        .def_readwrite("font_size", &ImFont::FontSize, "4     // in  //            // Height of characters/line, set during loading (don't change after loading)")
        .def_readwrite("index_lookup", &ImFont::IndexLookup, "12-16 // out //            // Sparse. Index glyphs by Unicode code-point.")
        .def_readwrite("glyphs", &ImFont::Glyphs, "12-16 // out //            // All glyphs.")
        .def_readwrite("fallback_glyph", &ImFont::FallbackGlyph, "4-8   // out // = FindGlyph(FontFallbackChar)")
        .def_readwrite("container_atlas", &ImFont::ContainerAtlas, "4-8   // out //            // What we has been loaded into")
        .def_readwrite("config_data", &ImFont::ConfigData, "4-8   // in  //            // Pointer within ContainerAtlas->ConfigData")
        .def_readwrite("config_data_count", &ImFont::ConfigDataCount, "2     // in  // ~ 1        // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.")
        .def_readwrite("fallback_char", &ImFont::FallbackChar, "2     // out // = FFFD/'?' // Character used if a glyph isn't found.")
        .def_readwrite("ellipsis_char", &ImFont::EllipsisChar, "2     // out // = '...'    // Character used for ellipsis rendering.")
        .def_readwrite("dot_char", &ImFont::DotChar, "2     // out // = '.'      // Character used for ellipsis rendering (if a single '...' character isn't found)")
        .def_readwrite("dirty_lookup_tables", &ImFont::DirtyLookupTables, "1     // out //")
        .def_readwrite("scale", &ImFont::Scale, "4     // in  // = 1.f      // Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()")
        .def_readwrite("ascent", &ImFont::Ascent, "4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]")
        .def_readwrite("descent", &ImFont::Descent, "4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]")
        .def_readwrite("metrics_total_surface", &ImFont::MetricsTotalSurface, "4     // out //            // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)")
        .def_readwrite("used4k_pages_map[(im_unicode_codepoint_max+1)/4096/8]", &ImFont::Used4kPagesMap[(IM_UNICODE_CODEPOINT_MAX+1)/4096/8], "2 bytes if ImWchar=ImWchar16, 34 bytes if ImWchar==ImWchar32. Store 1-bit for each block of 4K codepoints that has one active glyph. This is mainly used to facilitate iterations across all used codepoints.")
        .def("im_font",    // :2874
            [](ImFont & self)
            {
                return self.ImFont();
            },
            "Methods"
        )

        .def("find_glyph",    // :2876
            [](ImFont & self, ImWchar c)
            {
                return self.FindGlyph(c);
            },
            py::arg("c")
        )

        .def("find_glyph_no_fallback",    // :2877
            [](ImFont & self, ImWchar c)
            {
                return self.FindGlyphNoFallback(c);
            },
            py::arg("c")
        )

        .def("get_char_advance",    // :2878
            [](ImFont & self, ImWchar c)
            {
                return self.GetCharAdvance(c);
            },
            py::arg("c")
        )

        .def("is_loaded",    // :2879
            [](ImFont & self)
            {
                return self.IsLoaded();
            }
        )

        .def("get_debug_name",    // :2880
            [](ImFont & self)
            {
                return self.GetDebugName();
            }
        )

        .def("calc_text_size_a",    // :2884
            [](ImFont & self, float size, float max_width, float wrap_width, const char * text_begin, const char * text_end = NULL, const char * * remaining = NULL)
            {
                return self.CalcTextSizeA(size, max_width, wrap_width, text_begin, text_end, remaining);
            },
            py::arg("size"),
            py::arg("max_width"),
            py::arg("wrap_width"),
            py::arg("text_begin"),
            py::arg("text_end") = NULL,
            py::arg("remaining") = NULL,
            "utf8"
        )

        .def("calc_word_wrap_position_a",    // :2885
            [](ImFont & self, float scale, const char * text, const char * text_end, float wrap_width)
            {
                return self.CalcWordWrapPositionA(scale, text, text_end, wrap_width);
            },
            py::arg("scale"),
            py::arg("text"),
            py::arg("text_end"),
            py::arg("wrap_width")
        )

        .def("render_char",    // :2886
            [](ImFont & self, ImDrawList * draw_list, float size, const ImVec2 & pos, ImU32 col, ImWchar c)
            {
                return self.RenderChar(draw_list, size, pos, col, c);
            },
            py::arg("draw_list"),
            py::arg("size"),
            py::arg("pos"),
            py::arg("col"),
            py::arg("c")
        )

        .def("render_text",    // :2887
            [](ImFont & self, ImDrawList * draw_list, float size, const ImVec2 & pos, ImU32 col, const ImVec4 & clip_rect, const char * text_begin, const char * text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false)
            {
                return self.RenderText(draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip);
            },
            py::arg("draw_list"),
            py::arg("size"),
            py::arg("pos"),
            py::arg("col"),
            py::arg("clip_rect"),
            py::arg("text_begin"),
            py::arg("text_end"),
            py::arg("wrap_width") = 0.0f,
            py::arg("cpu_fine_clip") = false
        )

        .def("build_lookup_table",    // :2890
            [](ImFont & self)
            {
                return self.BuildLookupTable();
            },
            "[Internal] Don't use!"
        )

        .def("clear_output_data",    // :2891
            [](ImFont & self)
            {
                return self.ClearOutputData();
            }
        )

        .def("grow_index",    // :2892
            [](ImFont & self, int new_size)
            {
                return self.GrowIndex(new_size);
            },
            py::arg("new_size")
        )

        .def("add_glyph",    // :2893
            [](ImFont & self, const ImFontConfig * src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
            {
                return self.AddGlyph(src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x);
            },
            py::arg("src_cfg"),
            py::arg("c"),
            py::arg("x0"),
            py::arg("y0"),
            py::arg("x1"),
            py::arg("y1"),
            py::arg("u0"),
            py::arg("v0"),
            py::arg("u1"),
            py::arg("v1"),
            py::arg("advance_x")
        )

        .def("add_remap_char",    // :2894
            [](ImFont & self, ImWchar dst, ImWchar src, bool overwrite_dst = true)
            {
                return self.AddRemapChar(dst, src, overwrite_dst);
            },
            py::arg("dst"),
            py::arg("src"),
            py::arg("overwrite_dst") = true,
            "Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built."
        )

        .def("set_glyph_visible",    // :2895
            [](ImFont & self, ImWchar c, bool visible)
            {
                return self.SetGlyphVisible(c, visible);
            },
            py::arg("c"),
            py::arg("visible")
        )

        .def("is_glyph_range_unused",    // :2896
            [](ImFont & self, unsigned int c_begin, unsigned int c_last)
            {
                return self.IsGlyphRangeUnused(c_begin, c_last);
            },
            py::arg("c_begin"),
            py::arg("c_last")
        )

        ; 



    py::enum_<ImGuiViewportFlags_>(m, "ImGuiViewportFlags_", py::arithmetic(), "Flags stored in ImGuiViewport::Flags, giving indications to the platform backends.")
        .value("none", ImGuiViewportFlags_None, "")
        .value("is_platform_window", ImGuiViewportFlags_IsPlatformWindow, "Represent a Platform Window")
        .value("is_platform_monitor", ImGuiViewportFlags_IsPlatformMonitor, "Represent a Platform Monitor (unused yet)")
        .value("owned_by_app", ImGuiViewportFlags_OwnedByApp, "Platform Window: is created/managed by the application (rather than a dear imgui backend)");



    auto pyClassImGuiViewport = py::class_<ImGuiViewport>
        (m, "ImGuiViewport", "- Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.\n- In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports.\n- In the future we will extend this concept further to also represent Platform Monitor and support a \"no main platform window\" operation mode.\n- About Main Area vs Work Area:\n- Main Area = entire viewport.\n- Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).\n- Windows are generally trying to stay within the Work Area of their host viewport.")
        .def_readwrite("flags", &ImGuiViewport::Flags, "See ImGuiViewportFlags_")
        .def_readwrite("pos", &ImGuiViewport::Pos, "Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktop/native coordinates)")
        .def_readwrite("size", &ImGuiViewport::Size, "Main Area: Size of the viewport.")
        .def_readwrite("work_pos", &ImGuiViewport::WorkPos, "Work Area: Position of the viewport minus task bars, menus bars, status bars (>= Pos)")
        .def_readwrite("work_size", &ImGuiViewport::WorkSize, "Work Area: Size of the viewport minus task bars, menu bars, status bars (<= Size)")
        .def_readwrite("platform_handle_raw", &ImGuiViewport::PlatformHandleRaw, "None to hold lower-level, platform-native window handle (under Win32 this is expected to be a HWND, unused for other platforms)")
        .def(py::init<>())
        .def("get_center",    // :2933
            [](ImGuiViewport & self)
            {
                return self.GetCenter();
            },
            "Helpers"
        )

        .def("get_work_center",    // :2934
            [](ImGuiViewport & self)
            {
                return self.GetWorkCenter();
            }
        )

        ; 



    auto pyClassImGuiPlatformImeData = py::class_<ImGuiPlatformImeData>
        (m, "ImGuiPlatformImeData", "(Optional) Support for IME (Input Method Editor) via the io.SetPlatformImeDataFn() function.")
        .def_readwrite("want_visible", &ImGuiPlatformImeData::WantVisible, "A widget wants the IME to be visible")
        .def_readwrite("input_pos", &ImGuiPlatformImeData::InputPos, "Position of the input cursor")
        .def_readwrite("input_line_height", &ImGuiPlatformImeData::InputLineHeight, "Line height")
        .def(py::init<>())
        ; 



    // <namespace ImGui>
    // </namespace ImGui>

    // </autogen:pydef_cpp> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}