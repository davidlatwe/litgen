#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>

#include "imgui.h"
#include "misc/cpp/imgui_stdlib.h"
#include "imgui_internal.h"
#include "imgui_boxed_types.h"

namespace py = pybind11;


using namespace ImGui;

void py_init_module_imgui(py::module& m)
{
    py::class_<ImGuiContext>(m, "ImGuiContext", "ImGuiContext is an opaque pointer!");

    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    // <Autogenerated_Boxed_Types>
    auto pyClassBoxedBool = py::class_<BoxedBool>    // imgui.h:1
        (m, "BoxedBool", "")
        .def_readwrite("value", &BoxedBool::value, "")    // imgui.h:3
        .def(py::init<bool>(),    // imgui.h:4
            py::arg("v") = false)
        .def("__repr__",    // imgui.h:5
            &BoxedBool::__repr__)
        ;
    auto pyClassBoxedInt = py::class_<BoxedInt>    // imgui.h:1
        (m, "BoxedInt", "")
        .def_readwrite("value", &BoxedInt::value, "")    // imgui.h:3
        .def(py::init<int>(),    // imgui.h:4
            py::arg("v") = 0)
        .def("__repr__",    // imgui.h:5
            &BoxedInt::__repr__)
        ;
    auto pyClassBoxedUnsignedInt = py::class_<BoxedUnsignedInt>    // imgui.h:1
        (m, "BoxedUnsignedInt", "")
        .def_readwrite("value", &BoxedUnsignedInt::value, "")    // imgui.h:3
        .def(py::init<unsigned int>(),    // imgui.h:4
            py::arg("v") = 0)
        .def("__repr__",    // imgui.h:5
            &BoxedUnsignedInt::__repr__)
        ;
    auto pyClassBoxedFloat = py::class_<BoxedFloat>    // imgui.h:1
        (m, "BoxedFloat", "")
        .def_readwrite("value", &BoxedFloat::value, "")    // imgui.h:3
        .def(py::init<float>(),    // imgui.h:4
            py::arg("v") = 0.)
        .def("__repr__",    // imgui.h:5
            &BoxedFloat::__repr__)
        ;
    auto pyClassBoxedDouble = py::class_<BoxedDouble>    // imgui.h:1
        (m, "BoxedDouble", "")
        .def_readwrite("value", &BoxedDouble::value, "")    // imgui.h:3
        .def(py::init<double>(),    // imgui.h:4
            py::arg("v") = 0.)
        .def("__repr__",    // imgui.h:5
            &BoxedDouble::__repr__)
        ;
    // </Autogenerated_Boxed_Types>


    auto pyClassImVec2 = py::class_<ImVec2>    // imgui.h:249
        (m, "ImVec2", "")
        .def_readwrite("x", &ImVec2::x, "")    // imgui.h:251
        .def_readwrite("y", &ImVec2::y, "")    // imgui.h:251
        .def(py::init<>())    // imgui.h:252
        .def(py::init<float, float>(),    // imgui.h:253
            py::arg("_x"), py::arg("_y"))
        ;


    auto pyClassImVec4 = py::class_<ImVec4>    // imgui.h:262
        (m, "ImVec4", "ImVec4: 4D vector used to store clipping rectangles, colors etc. [Compile-time configurable type]")
        .def_readwrite("x", &ImVec4::x, "")    // imgui.h:264
        .def_readwrite("y", &ImVec4::y, "")    // imgui.h:264
        .def_readwrite("z", &ImVec4::z, "")    // imgui.h:264
        .def_readwrite("w", &ImVec4::w, "")    // imgui.h:264
        .def(py::init<>())    // imgui.h:265
        .def(py::init<float, float, float, float>(),    // imgui.h:266
            py::arg("_x"), py::arg("_y"), py::arg("_z"), py::arg("_w"))
        ;


    // <namespace ImGui>    // imgui.h:278
    m.def("CreateContext",    // imgui.h:284
        CreateContext,
        py::arg("shared_font_atlas") = py::none(),
        pybind11::return_value_policy::reference);

    m.def("DestroyContext",    // imgui.h:285
        DestroyContext,
        py::arg("ctx") = py::none(),
        "None = destroy current context");

    m.def("GetCurrentContext",    // imgui.h:286
        GetCurrentContext, pybind11::return_value_policy::reference);

    m.def("SetCurrentContext",    // imgui.h:287
        SetCurrentContext, py::arg("ctx"));

    m.def("GetIO",    // imgui.h:290
        GetIO,
        "access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)",
        pybind11::return_value_policy::reference);

    m.def("GetStyle",    // imgui.h:291
        GetStyle,
        "access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame!",
        pybind11::return_value_policy::reference);

    m.def("NewFrame",    // imgui.h:292
        NewFrame, "start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().");

    m.def("EndFrame",    // imgui.h:293
        EndFrame, "ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!");

    m.def("Render",    // imgui.h:294
        Render, "ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData().");

    m.def("GetDrawData",    // imgui.h:295
        GetDrawData,
        "valid after Render() and until the next call to NewFrame(). this is what you have to render.",
        pybind11::return_value_policy::reference);

    m.def("ShowDemoWindow",    // imgui.h:298
        [](BoxedBool * p_open = nullptr)
        {
            auto ShowDemoWindow_adapt_modifiable_immutable = [](BoxedBool * p_open = nullptr)
            {
                bool * p_open_boxed_value = nullptr;
                if (p_open != nullptr)
                    p_open_boxed_value = & (p_open->value);

                ShowDemoWindow(p_open_boxed_value);
            };

            ShowDemoWindow_adapt_modifiable_immutable(p_open);
        },
        py::arg("p_open") = py::none(),
        "create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!");

    m.def("ShowMetricsWindow",    // imgui.h:299
        [](BoxedBool * p_open = nullptr)
        {
            auto ShowMetricsWindow_adapt_modifiable_immutable = [](BoxedBool * p_open = nullptr)
            {
                bool * p_open_boxed_value = nullptr;
                if (p_open != nullptr)
                    p_open_boxed_value = & (p_open->value);

                ShowMetricsWindow(p_open_boxed_value);
            };

            ShowMetricsWindow_adapt_modifiable_immutable(p_open);
        },
        py::arg("p_open") = py::none(),
        "create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.");

    m.def("ShowStackToolWindow",    // imgui.h:300
        [](BoxedBool * p_open = nullptr)
        {
            auto ShowStackToolWindow_adapt_modifiable_immutable = [](BoxedBool * p_open = nullptr)
            {
                bool * p_open_boxed_value = nullptr;
                if (p_open != nullptr)
                    p_open_boxed_value = & (p_open->value);

                ShowStackToolWindow(p_open_boxed_value);
            };

            ShowStackToolWindow_adapt_modifiable_immutable(p_open);
        },
        py::arg("p_open") = py::none(),
        "create Stack Tool window. hover items with mouse to query information about the source of their unique ID.");

    m.def("ShowAboutWindow",    // imgui.h:301
        [](BoxedBool * p_open = nullptr)
        {
            auto ShowAboutWindow_adapt_modifiable_immutable = [](BoxedBool * p_open = nullptr)
            {
                bool * p_open_boxed_value = nullptr;
                if (p_open != nullptr)
                    p_open_boxed_value = & (p_open->value);

                ShowAboutWindow(p_open_boxed_value);
            };

            ShowAboutWindow_adapt_modifiable_immutable(p_open);
        },
        py::arg("p_open") = py::none(),
        "create About window. display Dear ImGui version, credits and build/system information.");

    m.def("ShowStyleEditor",    // imgui.h:302
        ShowStyleEditor,
        py::arg("ref") = py::none(),
        "add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)");

    m.def("ShowStyleSelector",    // imgui.h:303
        ShowStyleSelector,
        py::arg("label"),
        "add style selector block (not a window), essentially a combo listing the default styles.");

    m.def("ShowFontSelector",    // imgui.h:304
        ShowFontSelector,
        py::arg("label"),
        "add font selector block (not a window), essentially a combo listing the loaded fonts.");

    m.def("ShowUserGuide",    // imgui.h:305
        ShowUserGuide, "add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls).");

    m.def("GetVersion",    // imgui.h:306
        GetVersion,
        "get the compiled version string e.g. \"1.80 WIP\" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)",
        pybind11::return_value_policy::reference);

    m.def("StyleColorsDark",    // imgui.h:309
        StyleColorsDark,
        py::arg("dst") = py::none(),
        "new, recommended style (default)");

    m.def("StyleColorsLight",    // imgui.h:310
        StyleColorsLight,
        py::arg("dst") = py::none(),
        "best used with borders and a custom, thicker font");

    m.def("StyleColorsClassic",    // imgui.h:311
        StyleColorsClassic,
        py::arg("dst") = py::none(),
        "classic imgui style");

    m.def("Begin",    // imgui.h:325
        [](const char * name, BoxedBool * p_open = nullptr, ImGuiWindowFlags flags = 0) -> bool
        {
            auto Begin_adapt_modifiable_immutable = [](const char * name, BoxedBool * p_open = nullptr, ImGuiWindowFlags flags = 0) -> bool
            {
                bool * p_open_boxed_value = nullptr;
                if (p_open != nullptr)
                    p_open_boxed_value = & (p_open->value);

                auto r = Begin(name, p_open_boxed_value, flags);
                return r;
            };

            return Begin_adapt_modifiable_immutable(name, p_open, flags);
        },     py::arg("name"), py::arg("p_open") = py::none(), py::arg("flags") = 0);

    m.def("End",    // imgui.h:326
        End);

    m.def("BeginChild",    // imgui.h:336
        py::overload_cast<const char *, const ImVec2 &, bool, ImGuiWindowFlags>(BeginChild), py::arg("str_id"), py::arg("size") = ImVec2(0, 0), py::arg("border") = false, py::arg("flags") = 0);

    m.def("BeginChild",    // imgui.h:337
        py::overload_cast<ImGuiID, const ImVec2 &, bool, ImGuiWindowFlags>(BeginChild), py::arg("id"), py::arg("size") = ImVec2(0, 0), py::arg("border") = false, py::arg("flags") = 0);

    m.def("EndChild",    // imgui.h:338
        EndChild);

    m.def("IsWindowAppearing",    // imgui.h:342
        IsWindowAppearing);

    m.def("IsWindowCollapsed",    // imgui.h:343
        IsWindowCollapsed);

    m.def("IsWindowFocused",    // imgui.h:344
        IsWindowFocused,
        py::arg("flags") = 0,
        "is current window focused? or its root/child, depending on flags. see flags for options.");

    m.def("IsWindowHovered",    // imgui.h:345
        IsWindowHovered,
        py::arg("flags") = 0,
        "is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!");

    m.def("GetWindowDrawList",    // imgui.h:346
        py::overload_cast<>(GetWindowDrawList),
        "get draw list associated to the current window, to append your own drawing primitives",
        pybind11::return_value_policy::reference);

    m.def("GetWindowPos",    // imgui.h:347
        GetWindowPos, "get current window position in screen space (useful if you want to do your own drawing via the DrawList API)");

    m.def("GetWindowSize",    // imgui.h:348
        GetWindowSize, "get current window size");

    m.def("GetWindowWidth",    // imgui.h:349
        GetWindowWidth, "get current window width (shortcut for GetWindowSize().x)");

    m.def("GetWindowHeight",    // imgui.h:350
        GetWindowHeight, "get current window height (shortcut for GetWindowSize().y)");

    m.def("SetNextWindowPos",    // imgui.h:354
        SetNextWindowPos,
        py::arg("pos"), py::arg("cond") = 0, py::arg("pivot") = ImVec2(0, 0),
        "set next window position. call before Begin(). use pivot=(0.5,0.5) to center on given point, etc.");

    m.def("SetNextWindowSize",    // imgui.h:355
        SetNextWindowSize,
        py::arg("size"), py::arg("cond") = 0,
        "set next window size. set axis to 0.0 to force an auto-fit on this axis. call before Begin()");

    m.def("SetNextWindowSizeConstraints",    // imgui.h:356
        SetNextWindowSizeConstraints,
        py::arg("size_min"), py::arg("size_max"), py::arg("custom_callback") = py::none(), py::arg("custom_callback_data") = py::none(),
        "set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints.");

    m.def("SetNextWindowContentSize",    // imgui.h:357
        SetNextWindowContentSize,
        py::arg("size"),
        "set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0 to leave it automatic. call before Begin()");

    m.def("SetNextWindowCollapsed",    // imgui.h:358
        SetNextWindowCollapsed,
        py::arg("collapsed"), py::arg("cond") = 0,
        "set next window collapsed state. call before Begin()");

    m.def("SetNextWindowFocus",    // imgui.h:359
        SetNextWindowFocus, "set next window to be focused / top-most. call before Begin()");

    m.def("SetNextWindowBgAlpha",    // imgui.h:360
        SetNextWindowBgAlpha,
        py::arg("alpha"),
        "set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.");

    m.def("SetWindowPos",    // imgui.h:361
        py::overload_cast<const ImVec2 &, ImGuiCond>(SetWindowPos),
        py::arg("pos"), py::arg("cond") = 0,
        "(not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.");

    m.def("SetWindowSize",    // imgui.h:362
        py::overload_cast<const ImVec2 &, ImGuiCond>(SetWindowSize),
        py::arg("size"), py::arg("cond") = 0,
        "(not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.");

    m.def("SetWindowCollapsed",    // imgui.h:363
        py::overload_cast<bool, ImGuiCond>(SetWindowCollapsed),
        py::arg("collapsed"), py::arg("cond") = 0,
        "(not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().");

    m.def("SetWindowFocus",    // imgui.h:364
        py::overload_cast<>(SetWindowFocus), "(not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus().");

    m.def("SetWindowFontScale",    // imgui.h:365
        SetWindowFontScale,
        py::arg("scale"),
        "[OBSOLETE] set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes().");

    m.def("SetWindowPos",    // imgui.h:366
        py::overload_cast<const char *, const ImVec2 &, ImGuiCond>(SetWindowPos),
        py::arg("name"), py::arg("pos"), py::arg("cond") = 0,
        "set named window position.");

    m.def("SetWindowSize",    // imgui.h:367
        py::overload_cast<const char *, const ImVec2 &, ImGuiCond>(SetWindowSize),
        py::arg("name"), py::arg("size"), py::arg("cond") = 0,
        "set named window size. set axis to 0.0 to force an auto-fit on this axis.");

    m.def("SetWindowCollapsed",    // imgui.h:368
        py::overload_cast<const char *, bool, ImGuiCond>(SetWindowCollapsed),
        py::arg("name"), py::arg("collapsed"), py::arg("cond") = 0,
        "set named window collapsed state");

    m.def("SetWindowFocus",    // imgui.h:369
        py::overload_cast<const char *>(SetWindowFocus),
        py::arg("name"),
        "set named window to be focused / top-most. use None to remove focus.");

    m.def("GetContentRegionAvail",    // imgui.h:374
        GetContentRegionAvail, "== GetContentRegionMax() - GetCursorPos()");

    m.def("GetContentRegionMax",    // imgui.h:375
        GetContentRegionMax, "current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates");

    m.def("GetWindowContentRegionMin",    // imgui.h:376
        GetWindowContentRegionMin, "content boundaries min for the full window (roughly (0,0)-Scroll), in window coordinates");

    m.def("GetWindowContentRegionMax",    // imgui.h:377
        GetWindowContentRegionMax, "content boundaries max for the full window (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates");

    m.def("GetScrollX",    // imgui.h:380
        GetScrollX, "get scrolling amount [0 .. GetScrollMaxX()]");

    m.def("GetScrollY",    // imgui.h:381
        GetScrollY, "get scrolling amount [0 .. GetScrollMaxY()]");

    m.def("SetScrollX",    // imgui.h:382
        py::overload_cast<float>(SetScrollX),
        py::arg("scroll_x"),
        "set scrolling amount [0 .. GetScrollMaxX()]");

    m.def("SetScrollY",    // imgui.h:383
        py::overload_cast<float>(SetScrollY),
        py::arg("scroll_y"),
        "set scrolling amount [0 .. GetScrollMaxY()]");

    m.def("GetScrollMaxX",    // imgui.h:384
        GetScrollMaxX, "get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x");

    m.def("GetScrollMaxY",    // imgui.h:385
        GetScrollMaxY, "get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y");

    m.def("SetScrollHereX",    // imgui.h:386
        py::overload_cast<float>(SetScrollHereX),
        py::arg("center_x_ratio") = 0.5f,
        "adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead.");

    m.def("SetScrollHereY",    // imgui.h:387
        py::overload_cast<float>(SetScrollHereY),
        py::arg("center_y_ratio") = 0.5f,
        "adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead.");

    m.def("SetScrollFromPosX",    // imgui.h:388
        py::overload_cast<float, float>(SetScrollFromPosX),
        py::arg("local_x"), py::arg("center_x_ratio") = 0.5f,
        "adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.");

    m.def("SetScrollFromPosY",    // imgui.h:389
        py::overload_cast<float, float>(SetScrollFromPosY),
        py::arg("local_y"), py::arg("center_y_ratio") = 0.5f,
        "adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.");

    m.def("PushFont",    // imgui.h:392
        PushFont,
        py::arg("font"),
        "use None as a shortcut to push default font");

    m.def("PopFont",    // imgui.h:393
        PopFont);

    m.def("PushStyleColor",    // imgui.h:394
        py::overload_cast<ImGuiCol, ImU32>(PushStyleColor),
        py::arg("idx"), py::arg("col"),
        "modify a style color. always use this if you modify the style after NewFrame().");

    m.def("PushStyleColor",    // imgui.h:395
        py::overload_cast<ImGuiCol, const ImVec4 &>(PushStyleColor), py::arg("idx"), py::arg("col"));

    m.def("PopStyleColor",    // imgui.h:396
        PopStyleColor, py::arg("count") = 1);

    m.def("PushStyleVar",    // imgui.h:397
        py::overload_cast<ImGuiStyleVar, float>(PushStyleVar),
        py::arg("idx"), py::arg("val"),
        "modify a style float variable. always use this if you modify the style after NewFrame().");

    m.def("PushStyleVar",    // imgui.h:398
        py::overload_cast<ImGuiStyleVar, const ImVec2 &>(PushStyleVar),
        py::arg("idx"), py::arg("val"),
        "modify a style ImVec2 variable. always use this if you modify the style after NewFrame().");

    m.def("PopStyleVar",    // imgui.h:399
        PopStyleVar, py::arg("count") = 1);

    m.def("PushAllowKeyboardFocus",    // imgui.h:400
        PushAllowKeyboardFocus,
        py::arg("allow_keyboard_focus"),
        "== tab stop enable. Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets");

    m.def("PopAllowKeyboardFocus",    // imgui.h:401
        PopAllowKeyboardFocus);

    m.def("PushButtonRepeat",    // imgui.h:402
        PushButtonRepeat,
        py::arg("repeat"),
        "in 'repeat' mode, Button*() functions return repeated True in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.");

    m.def("PopButtonRepeat",    // imgui.h:403
        PopButtonRepeat);

    m.def("PushItemWidth",    // imgui.h:406
        PushItemWidth,
        py::arg("item_width"),
        "push width of items for common large \"item+label\" widgets. >0.0: width in pixels, <0.0 align xx pixels to the right of window (so -FLT_MIN always align width to the right side).");

    m.def("PopItemWidth",    // imgui.h:407
        PopItemWidth);

    m.def("SetNextItemWidth",    // imgui.h:408
        SetNextItemWidth,
        py::arg("item_width"),
        "set width of the _next_ common large \"item+label\" widget. >0.0: width in pixels, <0.0 align xx pixels to the right of window (so -FLT_MIN always align width to the right side)");

    m.def("CalcItemWidth",    // imgui.h:409
        CalcItemWidth, "width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.");

    m.def("PushTextWrapPos",    // imgui.h:410
        PushTextWrapPos,
        py::arg("wrap_local_pos_x") = 0.0f,
        "push word-wrapping position for Text*() commands. < 0.0: no wrapping; 0.0: wrap to end of window (or column); > 0.0: wrap at 'wrap_pos_x' position in window local space");

    m.def("PopTextWrapPos",    // imgui.h:411
        PopTextWrapPos);

    m.def("GetFont",    // imgui.h:415
        GetFont,
        "get current font",
        pybind11::return_value_policy::reference);

    m.def("GetFontSize",    // imgui.h:416
        GetFontSize, "get current font size (= height in pixels) of current font with current scale applied");

    m.def("GetFontTexUvWhitePixel",    // imgui.h:417
        GetFontTexUvWhitePixel, "get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API");

    m.def("GetColorU32",    // imgui.h:418
        py::overload_cast<ImGuiCol, float>(GetColorU32),
        py::arg("idx"), py::arg("alpha_mul") = 1.0f,
        "retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList");

    m.def("GetColorU32",    // imgui.h:419
        py::overload_cast<const ImVec4 &>(GetColorU32),
        py::arg("col"),
        "retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList");

    m.def("GetColorU32",    // imgui.h:420
        py::overload_cast<ImU32>(GetColorU32),
        py::arg("col"),
        "retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList");

    m.def("GetStyleColorVec4",    // imgui.h:421
        GetStyleColorVec4,
        py::arg("idx"),
        "retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.",
        pybind11::return_value_policy::reference);

    m.def("Separator",    // imgui.h:430
        Separator, "separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.");

    m.def("SameLine",    // imgui.h:431
        SameLine,
        py::arg("offset_from_start_x") = 0.0f, py::arg("spacing") = -1.0f,
        "call between widgets or groups to layout them horizontally. X position given in window coordinates.");

    m.def("NewLine",    // imgui.h:432
        NewLine, "undo a SameLine() or force a new line when in an horizontal-layout context.");

    m.def("Spacing",    // imgui.h:433
        Spacing, "add vertical spacing.");

    m.def("Dummy",    // imgui.h:434
        Dummy,
        py::arg("size"),
        "add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.");

    m.def("Indent",    // imgui.h:435
        Indent,
        py::arg("indent_w") = 0.0f,
        "move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0");

    m.def("Unindent",    // imgui.h:436
        Unindent,
        py::arg("indent_w") = 0.0f,
        "move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0");

    m.def("BeginGroup",    // imgui.h:437
        BeginGroup, "lock horizontal starting position");

    m.def("EndGroup",    // imgui.h:438
        EndGroup, "unlock horizontal starting position + capture the whole group bounding box into one \"item\" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)");

    m.def("GetCursorPos",    // imgui.h:439
        GetCursorPos, "cursor position in window coordinates (relative to window position)");

    m.def("GetCursorPosX",    // imgui.h:440
        GetCursorPosX, "(some functions are using window-relative coordinates, such as: GetCursorPos, GetCursorStartPos, GetContentRegionMax, GetWindowContentRegion* etc.");

    m.def("GetCursorPosY",    // imgui.h:441
        GetCursorPosY, "other functions such as GetCursorScreenPos or everything in ImDrawList::");

    m.def("SetCursorPos",    // imgui.h:442
        SetCursorPos,
        py::arg("local_pos"),
        "are using the main, absolute coordinate system.");

    m.def("SetCursorPosX",    // imgui.h:443
        SetCursorPosX,
        py::arg("local_x"),
        "GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)");

    m.def("SetCursorPosY",    // imgui.h:444
        SetCursorPosY, py::arg("local_y"));

    m.def("GetCursorStartPos",    // imgui.h:445
        GetCursorStartPos, "initial cursor position in window coordinates");

    m.def("GetCursorScreenPos",    // imgui.h:446
        GetCursorScreenPos, "cursor position in absolute coordinates (useful to work with ImDrawList API). generally top-left == GetMainViewport()->Pos == (0,0) in single viewport mode, and bottom-right == GetMainViewport()->Pos+Size == io.DisplaySize in single-viewport mode.");

    m.def("SetCursorScreenPos",    // imgui.h:447
        SetCursorScreenPos,
        py::arg("pos"),
        "cursor position in absolute coordinates");

    m.def("AlignTextToFramePadding",    // imgui.h:448
        AlignTextToFramePadding, "vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)");

    m.def("GetTextLineHeight",    // imgui.h:449
        GetTextLineHeight, "~ FontSize");

    m.def("GetTextLineHeightWithSpacing",    // imgui.h:450
        GetTextLineHeightWithSpacing, "~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)");

    m.def("GetFrameHeight",    // imgui.h:451
        GetFrameHeight, "~ FontSize + style.FramePadding.y * 2");

    m.def("GetFrameHeightWithSpacing",    // imgui.h:452
        GetFrameHeightWithSpacing, "~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)");

    m.def("PushID",    // imgui.h:465
        py::overload_cast<const char *>(PushID),
        py::arg("str_id"),
        "push string into the ID stack (will hash string).");

    m.def("PushID",    // imgui.h:466
        py::overload_cast<const char *, const char *>(PushID),
        py::arg("str_id_begin"), py::arg("str_id_end"),
        "push string into the ID stack (will hash string).");

    m.def("PushID",    // imgui.h:467
        py::overload_cast<const void *>(PushID),
        py::arg("ptr_id"),
        "push pointer into the ID stack (will hash pointer).");

    m.def("PushID",    // imgui.h:468
        py::overload_cast<int>(PushID),
        py::arg("int_id"),
        "push integer into the ID stack (will hash integer).");

    m.def("PopID",    // imgui.h:469
        PopID, "pop from the ID stack.");

    m.def("GetID",    // imgui.h:470
        py::overload_cast<const char *>(GetID),
        py::arg("str_id"),
        "calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself");

    m.def("GetID",    // imgui.h:471
        py::overload_cast<const char *, const char *>(GetID), py::arg("str_id_begin"), py::arg("str_id_end"));

    m.def("GetID",    // imgui.h:472
        py::overload_cast<const void *>(GetID), py::arg("ptr_id"));

    m.def("TextUnformatted",    // imgui.h:475
        TextUnformatted,
        py::arg("text"), py::arg("text_end") = py::none(),
        "raw text without formatting. Roughly equivalent to Text(\"%s\", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.");

    m.def("Text",    // imgui.h:476
        [](const char * fmt)
        {
            auto Text_adapt_variadic_format = [](const char * fmt)
            {
                Text("%s", fmt);
            };

            Text_adapt_variadic_format(fmt);
        },
        py::arg("fmt"),
        "formatted text");

    m.def("TextColored",    // imgui.h:478
        [](const ImVec4 & col, const char * fmt)
        {
            auto TextColored_adapt_variadic_format = [](const ImVec4 & col, const char * fmt)
            {
                TextColored(col, "%s", fmt);
            };

            TextColored_adapt_variadic_format(col, fmt);
        },
        py::arg("col"), py::arg("fmt"),
        "shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();");

    m.def("TextDisabled",    // imgui.h:480
        [](const char * fmt)
        {
            auto TextDisabled_adapt_variadic_format = [](const char * fmt)
            {
                TextDisabled("%s", fmt);
            };

            TextDisabled_adapt_variadic_format(fmt);
        },
        py::arg("fmt"),
        "shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();");

    m.def("TextWrapped",    // imgui.h:482
        [](const char * fmt)
        {
            auto TextWrapped_adapt_variadic_format = [](const char * fmt)
            {
                TextWrapped("%s", fmt);
            };

            TextWrapped_adapt_variadic_format(fmt);
        },
        py::arg("fmt"),
        "shortcut for PushTextWrapPos(0.0); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().");

    m.def("LabelText",    // imgui.h:484
        [](const char * label, const char * fmt)
        {
            auto LabelText_adapt_variadic_format = [](const char * label, const char * fmt)
            {
                LabelText(label, "%s", fmt);
            };

            LabelText_adapt_variadic_format(label, fmt);
        },
        py::arg("label"), py::arg("fmt"),
        "display text+label aligned the same way as value+label widgets");

    m.def("BulletText",    // imgui.h:486
        [](const char * fmt)
        {
            auto BulletText_adapt_variadic_format = [](const char * fmt)
            {
                BulletText("%s", fmt);
            };

            BulletText_adapt_variadic_format(fmt);
        },
        py::arg("fmt"),
        "shortcut for Bullet()+Text()");

    m.def("Button",    // imgui.h:492
        Button,
        py::arg("label"), py::arg("size") = ImVec2(0, 0),
        "button");

    m.def("SmallButton",    // imgui.h:493
        SmallButton,
        py::arg("label"),
        "button with FramePadding=(0,0) to easily embed within text");

    m.def("InvisibleButton",    // imgui.h:494
        InvisibleButton,
        py::arg("str_id"), py::arg("size"), py::arg("flags") = 0,
        "flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)");

    m.def("ArrowButton",    // imgui.h:495
        ArrowButton,
        py::arg("str_id"), py::arg("dir"),
        "square button with an arrow shape");

    m.def("Image",    // imgui.h:496
        Image, py::arg("user_texture_id"), py::arg("size"), py::arg("uv0") = ImVec2(0, 0), py::arg("uv1") = ImVec2(1,1), py::arg("tint_col") = ImVec4(1,1,1,1), py::arg("border_col") = ImVec4(0,0,0,0));

    m.def("ImageButton",    // imgui.h:497
        ImageButton,
        py::arg("user_texture_id"), py::arg("size"), py::arg("uv0") = ImVec2(0, 0), py::arg("uv1") = ImVec2(1,1), py::arg("frame_padding") = -1, py::arg("bg_col") = ImVec4(0,0,0,0), py::arg("tint_col") = ImVec4(1,1,1,1),
        "<0 frame_padding uses default frame padding settings. 0 for no padding");

    m.def("Checkbox",    // imgui.h:498
        [](const char * label, BoxedBool & v) -> bool
        {
            auto Checkbox_adapt_modifiable_immutable = [](const char * label, BoxedBool & v) -> bool
            {
                bool * v_boxed_value = & (v.value);

                auto r = Checkbox(label, v_boxed_value);
                return r;
            };

            return Checkbox_adapt_modifiable_immutable(label, v);
        },     py::arg("label"), py::arg("v"));

    m.def("CheckboxFlags",    // imgui.h:499
        [](const char * label, BoxedInt & flags, int flags_value) -> bool
        {
            auto CheckboxFlags_adapt_modifiable_immutable = [](const char * label, BoxedInt & flags, int flags_value) -> bool
            {
                int * flags_boxed_value = & (flags.value);

                auto r = CheckboxFlags(label, flags_boxed_value, flags_value);
                return r;
            };

            return CheckboxFlags_adapt_modifiable_immutable(label, flags, flags_value);
        },     py::arg("label"), py::arg("flags"), py::arg("flags_value"));

    m.def("CheckboxFlags",    // imgui.h:500
        [](const char * label, BoxedUnsignedInt & flags, unsigned int flags_value) -> bool
        {
            auto CheckboxFlags_adapt_modifiable_immutable = [](const char * label, BoxedUnsignedInt & flags, unsigned int flags_value) -> bool
            {
                unsigned int * flags_boxed_value = & (flags.value);

                auto r = CheckboxFlags(label, flags_boxed_value, flags_value);
                return r;
            };

            return CheckboxFlags_adapt_modifiable_immutable(label, flags, flags_value);
        },     py::arg("label"), py::arg("flags"), py::arg("flags_value"));

    m.def("RadioButton",    // imgui.h:501
        py::overload_cast<const char *, bool>(RadioButton),
        py::arg("label"), py::arg("active"),
        "use with e.g. if (RadioButton(\"one\", my_value==1)) { my_value = 1; }");

    m.def("RadioButton",    // imgui.h:502
        [](const char * label, BoxedInt & v, int v_button) -> bool
        {
            auto RadioButton_adapt_modifiable_immutable = [](const char * label, BoxedInt & v, int v_button) -> bool
            {
                int * v_boxed_value = & (v.value);

                auto r = RadioButton(label, v_boxed_value, v_button);
                return r;
            };

            return RadioButton_adapt_modifiable_immutable(label, v, v_button);
        },
        py::arg("label"), py::arg("v"), py::arg("v_button"),
        "shortcut to handle the above pattern when value is an integer");

    m.def("ProgressBar",    // imgui.h:503
        ProgressBar, py::arg("fraction"), py::arg("size_arg") = ImVec2(-FLT_MIN, 0), py::arg("overlay") = py::none());

    m.def("Bullet",    // imgui.h:504
        Bullet, "draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses");

    m.def("BeginCombo",    // imgui.h:509
        BeginCombo, py::arg("label"), py::arg("preview_value"), py::arg("flags") = 0);

    m.def("EndCombo",    // imgui.h:510
        EndCombo, "only call EndCombo() if BeginCombo() returns True!");

    m.def("Combo",    // imgui.h:511
        [](const char * label, BoxedInt & current_item, const std::vector<std::string> & items, int popup_max_height_in_items = -1) -> bool
        {
            auto Combo_adapt_modifiable_immutable = [](const char * label, BoxedInt & current_item, const char * const items[], int items_count, int popup_max_height_in_items = -1) -> bool
            {
                int * current_item_boxed_value = & (current_item.value);

                auto r = Combo(label, current_item_boxed_value, items, items_count, popup_max_height_in_items);
                return r;
            };
            auto Combo_adapt_c_string_list = [&Combo_adapt_modifiable_immutable](const char * label, BoxedInt & current_item, const std::vector<std::string> & items, int popup_max_height_in_items = -1) -> bool
            {
                std::vector<const char *> items_ptrs;
                for (const auto& v: items)
                    items_ptrs.push_back(v.c_str());
                int items_count = static_cast<int>(items.size());

                auto r = Combo_adapt_modifiable_immutable(label, current_item, items_ptrs.data(), items_count, popup_max_height_in_items);
                return r;
            };

            return Combo_adapt_c_string_list(label, current_item, items, popup_max_height_in_items);
        },     py::arg("label"), py::arg("current_item"), py::arg("items"), py::arg("popup_max_height_in_items") = -1);

    m.def("Combo",    // imgui.h:512
        [](const char * label, BoxedInt & current_item, const char * items_separated_by_zeros, int popup_max_height_in_items = -1) -> bool
        {
            auto Combo_adapt_modifiable_immutable = [](const char * label, BoxedInt & current_item, const char * items_separated_by_zeros, int popup_max_height_in_items = -1) -> bool
            {
                int * current_item_boxed_value = & (current_item.value);

                auto r = Combo(label, current_item_boxed_value, items_separated_by_zeros, popup_max_height_in_items);
                return r;
            };

            return Combo_adapt_modifiable_immutable(label, current_item, items_separated_by_zeros, popup_max_height_in_items);
        },
        py::arg("label"), py::arg("current_item"), py::arg("items_separated_by_zeros"), py::arg("popup_max_height_in_items") = -1,
        "Separate items with \\0 within a string, end item-list with \\0\\0. e.g. \"One\\0Two\\0Three\\0\"");

    m.def("DragFloat",    // imgui.h:527
        [](const char * label, BoxedFloat & v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragFloat_adapt_modifiable_immutable = [](const char * label, BoxedFloat & v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
            {
                float * v_boxed_value = & (v.value);

                auto r = DragFloat(label, v_boxed_value, v_speed, v_min, v_max, format, flags);
                return r;
            };

            return DragFloat_adapt_modifiable_immutable(label, v, v_speed, v_min, v_max, format, flags);
        },
        py::arg("label"), py::arg("v"), py::arg("v_speed") = 1.0f, py::arg("v_min") = 0.0f, py::arg("v_max") = 0.0f, py::arg("format") = "%.3f", py::arg("flags") = 0,
        "If v_min >= v_max we have no bound");

    m.def("DragFloat2",    // imgui.h:528
        [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragFloat2_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
            {
                float v_raw[2];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;

                auto r = DragFloat2(label, v_raw, v_speed, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                return r;
            };

            return DragFloat2_adapt_fixed_size_c_arrays(label, v_0, v_1, v_speed, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_speed") = 1.0f, py::arg("v_min") = 0.0f, py::arg("v_max") = 0.0f, py::arg("format") = "%.3f", py::arg("flags") = 0);

    m.def("DragFloat3",    // imgui.h:529
        [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragFloat3_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
            {
                float v_raw[3];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;

                auto r = DragFloat3(label, v_raw, v_speed, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                return r;
            };

            return DragFloat3_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, v_speed, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("v_speed") = 1.0f, py::arg("v_min") = 0.0f, py::arg("v_max") = 0.0f, py::arg("format") = "%.3f", py::arg("flags") = 0);

    m.def("DragFloat4",    // imgui.h:530
        [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, BoxedFloat & v_3, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragFloat4_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, BoxedFloat & v_3, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
            {
                float v_raw[4];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;
                v_raw[3] = v_3.value;

                auto r = DragFloat4(label, v_raw, v_speed, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                v_3.value = v_raw[3];
                return r;
            };

            return DragFloat4_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, v_3, v_speed, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("v_3"), py::arg("v_speed") = 1.0f, py::arg("v_min") = 0.0f, py::arg("v_max") = 0.0f, py::arg("format") = "%.3f", py::arg("flags") = 0);

    m.def("DragFloatRange2",    // imgui.h:531
        [](const char * label, BoxedFloat & v_current_min, BoxedFloat & v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", const char * format_max = NULL, ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragFloatRange2_adapt_modifiable_immutable = [](const char * label, BoxedFloat & v_current_min, BoxedFloat & v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", const char * format_max = NULL, ImGuiSliderFlags flags = 0) -> bool
            {
                float * v_current_min_boxed_value = & (v_current_min.value);
                float * v_current_max_boxed_value = & (v_current_max.value);

                auto r = DragFloatRange2(label, v_current_min_boxed_value, v_current_max_boxed_value, v_speed, v_min, v_max, format, format_max, flags);
                return r;
            };

            return DragFloatRange2_adapt_modifiable_immutable(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
        },     py::arg("label"), py::arg("v_current_min"), py::arg("v_current_max"), py::arg("v_speed") = 1.0f, py::arg("v_min") = 0.0f, py::arg("v_max") = 0.0f, py::arg("format") = "%.3f", py::arg("format_max") = py::none(), py::arg("flags") = 0);

    m.def("DragInt",    // imgui.h:532
        [](const char * label, BoxedInt & v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragInt_adapt_modifiable_immutable = [](const char * label, BoxedInt & v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
            {
                int * v_boxed_value = & (v.value);

                auto r = DragInt(label, v_boxed_value, v_speed, v_min, v_max, format, flags);
                return r;
            };

            return DragInt_adapt_modifiable_immutable(label, v, v_speed, v_min, v_max, format, flags);
        },
        py::arg("label"), py::arg("v"), py::arg("v_speed") = 1.0f, py::arg("v_min") = 0, py::arg("v_max") = 0, py::arg("format") = "%d", py::arg("flags") = 0,
        "If v_min >= v_max we have no bound");

    m.def("DragInt2",    // imgui.h:533
        [](const char * label, BoxedInt & v_0, BoxedInt & v_1, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragInt2_adapt_fixed_size_c_arrays = [](const char * label, BoxedInt & v_0, BoxedInt & v_1, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
            {
                int v_raw[2];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;

                auto r = DragInt2(label, v_raw, v_speed, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                return r;
            };

            return DragInt2_adapt_fixed_size_c_arrays(label, v_0, v_1, v_speed, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_speed") = 1.0f, py::arg("v_min") = 0, py::arg("v_max") = 0, py::arg("format") = "%d", py::arg("flags") = 0);

    m.def("DragInt3",    // imgui.h:534
        [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragInt3_adapt_fixed_size_c_arrays = [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
            {
                int v_raw[3];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;

                auto r = DragInt3(label, v_raw, v_speed, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                return r;
            };

            return DragInt3_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, v_speed, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("v_speed") = 1.0f, py::arg("v_min") = 0, py::arg("v_max") = 0, py::arg("format") = "%d", py::arg("flags") = 0);

    m.def("DragInt4",    // imgui.h:535
        [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, BoxedInt & v_3, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragInt4_adapt_fixed_size_c_arrays = [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, BoxedInt & v_3, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
            {
                int v_raw[4];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;
                v_raw[3] = v_3.value;

                auto r = DragInt4(label, v_raw, v_speed, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                v_3.value = v_raw[3];
                return r;
            };

            return DragInt4_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, v_3, v_speed, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("v_3"), py::arg("v_speed") = 1.0f, py::arg("v_min") = 0, py::arg("v_max") = 0, py::arg("format") = "%d", py::arg("flags") = 0);

    m.def("DragIntRange2",    // imgui.h:536
        [](const char * label, BoxedInt & v_current_min, BoxedInt & v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", const char * format_max = NULL, ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragIntRange2_adapt_modifiable_immutable = [](const char * label, BoxedInt & v_current_min, BoxedInt & v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", const char * format_max = NULL, ImGuiSliderFlags flags = 0) -> bool
            {
                int * v_current_min_boxed_value = & (v_current_min.value);
                int * v_current_max_boxed_value = & (v_current_max.value);

                auto r = DragIntRange2(label, v_current_min_boxed_value, v_current_max_boxed_value, v_speed, v_min, v_max, format, format_max, flags);
                return r;
            };

            return DragIntRange2_adapt_modifiable_immutable(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
        },     py::arg("label"), py::arg("v_current_min"), py::arg("v_current_max"), py::arg("v_speed") = 1.0f, py::arg("v_min") = 0, py::arg("v_max") = 0, py::arg("format") = "%d", py::arg("format_max") = py::none(), py::arg("flags") = 0);

    m.def("DragScalar",    // imgui.h:537
        py::overload_cast<const char *, ImGuiDataType, void *, float, const void *, const void *, const char *, ImGuiSliderFlags>(DragScalar), py::arg("label"), py::arg("data_type"), py::arg("p_data"), py::arg("v_speed") = 1.0f, py::arg("p_min") = py::none(), py::arg("p_max") = py::none(), py::arg("format") = py::none(), py::arg("flags") = 0);

    m.def("DragScalarN",    // imgui.h:538
        py::overload_cast<const char *, ImGuiDataType, void *, int, float, const void *, const void *, const char *, ImGuiSliderFlags>(DragScalarN), py::arg("label"), py::arg("data_type"), py::arg("p_data"), py::arg("components"), py::arg("v_speed") = 1.0f, py::arg("p_min") = py::none(), py::arg("p_max") = py::none(), py::arg("format") = py::none(), py::arg("flags") = 0);

    m.def("SliderFloat",    // imgui.h:546
        [](const char * label, BoxedFloat & v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
        {
            auto SliderFloat_adapt_modifiable_immutable = [](const char * label, BoxedFloat & v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
            {
                float * v_boxed_value = & (v.value);

                auto r = SliderFloat(label, v_boxed_value, v_min, v_max, format, flags);
                return r;
            };

            return SliderFloat_adapt_modifiable_immutable(label, v, v_min, v_max, format, flags);
        },
        py::arg("label"), py::arg("v"), py::arg("v_min"), py::arg("v_max"), py::arg("format") = "%.3f", py::arg("flags") = 0,
        "adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display.");

    m.def("SliderFloat2",    // imgui.h:547
        [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
        {
            auto SliderFloat2_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
            {
                float v_raw[2];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;

                auto r = SliderFloat2(label, v_raw, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                return r;
            };

            return SliderFloat2_adapt_fixed_size_c_arrays(label, v_0, v_1, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_min"), py::arg("v_max"), py::arg("format") = "%.3f", py::arg("flags") = 0);

    m.def("SliderFloat3",    // imgui.h:548
        [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
        {
            auto SliderFloat3_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
            {
                float v_raw[3];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;

                auto r = SliderFloat3(label, v_raw, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                return r;
            };

            return SliderFloat3_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("v_min"), py::arg("v_max"), py::arg("format") = "%.3f", py::arg("flags") = 0);

    m.def("SliderFloat4",    // imgui.h:549
        [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, BoxedFloat & v_3, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
        {
            auto SliderFloat4_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, BoxedFloat & v_3, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
            {
                float v_raw[4];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;
                v_raw[3] = v_3.value;

                auto r = SliderFloat4(label, v_raw, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                v_3.value = v_raw[3];
                return r;
            };

            return SliderFloat4_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, v_3, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("v_3"), py::arg("v_min"), py::arg("v_max"), py::arg("format") = "%.3f", py::arg("flags") = 0);

    m.def("SliderAngle",    // imgui.h:550
        [](const char * label, BoxedFloat & v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char * format = "%.0f deg", ImGuiSliderFlags flags = 0) -> bool
        {
            auto SliderAngle_adapt_modifiable_immutable = [](const char * label, BoxedFloat & v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char * format = "%.0f deg", ImGuiSliderFlags flags = 0) -> bool
            {
                float * v_rad_boxed_value = & (v_rad.value);

                auto r = SliderAngle(label, v_rad_boxed_value, v_degrees_min, v_degrees_max, format, flags);
                return r;
            };

            return SliderAngle_adapt_modifiable_immutable(label, v_rad, v_degrees_min, v_degrees_max, format, flags);
        },     py::arg("label"), py::arg("v_rad"), py::arg("v_degrees_min") = -360.0f, py::arg("v_degrees_max") = +360.0f, py::arg("format") = "%.0f deg", py::arg("flags") = 0);

    m.def("SliderInt",    // imgui.h:551
        [](const char * label, BoxedInt & v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
        {
            auto SliderInt_adapt_modifiable_immutable = [](const char * label, BoxedInt & v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
            {
                int * v_boxed_value = & (v.value);

                auto r = SliderInt(label, v_boxed_value, v_min, v_max, format, flags);
                return r;
            };

            return SliderInt_adapt_modifiable_immutable(label, v, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v"), py::arg("v_min"), py::arg("v_max"), py::arg("format") = "%d", py::arg("flags") = 0);

    m.def("SliderInt2",    // imgui.h:552
        [](const char * label, BoxedInt & v_0, BoxedInt & v_1, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
        {
            auto SliderInt2_adapt_fixed_size_c_arrays = [](const char * label, BoxedInt & v_0, BoxedInt & v_1, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
            {
                int v_raw[2];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;

                auto r = SliderInt2(label, v_raw, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                return r;
            };

            return SliderInt2_adapt_fixed_size_c_arrays(label, v_0, v_1, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_min"), py::arg("v_max"), py::arg("format") = "%d", py::arg("flags") = 0);

    m.def("SliderInt3",    // imgui.h:553
        [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
        {
            auto SliderInt3_adapt_fixed_size_c_arrays = [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
            {
                int v_raw[3];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;

                auto r = SliderInt3(label, v_raw, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                return r;
            };

            return SliderInt3_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("v_min"), py::arg("v_max"), py::arg("format") = "%d", py::arg("flags") = 0);

    m.def("SliderInt4",    // imgui.h:554
        [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, BoxedInt & v_3, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
        {
            auto SliderInt4_adapt_fixed_size_c_arrays = [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, BoxedInt & v_3, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
            {
                int v_raw[4];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;
                v_raw[3] = v_3.value;

                auto r = SliderInt4(label, v_raw, v_min, v_max, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                v_3.value = v_raw[3];
                return r;
            };

            return SliderInt4_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, v_3, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("v_3"), py::arg("v_min"), py::arg("v_max"), py::arg("format") = "%d", py::arg("flags") = 0);

    m.def("SliderScalar",    // imgui.h:555
        py::overload_cast<const char *, ImGuiDataType, void *, const void *, const void *, const char *, ImGuiSliderFlags>(SliderScalar), py::arg("label"), py::arg("data_type"), py::arg("p_data"), py::arg("p_min"), py::arg("p_max"), py::arg("format") = py::none(), py::arg("flags") = 0);

    m.def("SliderScalarN",    // imgui.h:556
        py::overload_cast<const char *, ImGuiDataType, void *, int, const void *, const void *, const char *, ImGuiSliderFlags>(SliderScalarN), py::arg("label"), py::arg("data_type"), py::arg("p_data"), py::arg("components"), py::arg("p_min"), py::arg("p_max"), py::arg("format") = py::none(), py::arg("flags") = 0);

    m.def("VSliderFloat",    // imgui.h:557
        [](const char * label, const ImVec2 & size, BoxedFloat & v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
        {
            auto VSliderFloat_adapt_modifiable_immutable = [](const char * label, const ImVec2 & size, BoxedFloat & v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> bool
            {
                float * v_boxed_value = & (v.value);

                auto r = VSliderFloat(label, size, v_boxed_value, v_min, v_max, format, flags);
                return r;
            };

            return VSliderFloat_adapt_modifiable_immutable(label, size, v, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("size"), py::arg("v"), py::arg("v_min"), py::arg("v_max"), py::arg("format") = "%.3f", py::arg("flags") = 0);

    m.def("VSliderInt",    // imgui.h:558
        [](const char * label, const ImVec2 & size, BoxedInt & v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
        {
            auto VSliderInt_adapt_modifiable_immutable = [](const char * label, const ImVec2 & size, BoxedInt & v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> bool
            {
                int * v_boxed_value = & (v.value);

                auto r = VSliderInt(label, size, v_boxed_value, v_min, v_max, format, flags);
                return r;
            };

            return VSliderInt_adapt_modifiable_immutable(label, size, v, v_min, v_max, format, flags);
        },     py::arg("label"), py::arg("size"), py::arg("v"), py::arg("v_min"), py::arg("v_max"), py::arg("format") = "%d", py::arg("flags") = 0);

    m.def("VSliderScalar",    // imgui.h:559
        VSliderScalar, py::arg("label"), py::arg("size"), py::arg("data_type"), py::arg("p_data"), py::arg("p_min"), py::arg("p_max"), py::arg("format") = py::none(), py::arg("flags") = 0);

    m.def("InputText",    // imgui.h:564
        py::overload_cast<const char *, char *, size_t, ImGuiInputTextFlags, ImGuiInputTextCallback, void *>(InputText), py::arg("label"), py::arg("buf"), py::arg("buf_size"), py::arg("flags") = 0, py::arg("callback") = py::none(), py::arg("user_data") = py::none());

    m.def("InputTextMultiline",    // imgui.h:565
        py::overload_cast<const char *, char *, size_t, const ImVec2 &, ImGuiInputTextFlags, ImGuiInputTextCallback, void *>(InputTextMultiline), py::arg("label"), py::arg("buf"), py::arg("buf_size"), py::arg("size") = ImVec2(0, 0), py::arg("flags") = 0, py::arg("callback") = py::none(), py::arg("user_data") = py::none());

    m.def("InputTextWithHint",    // imgui.h:566
        py::overload_cast<const char *, const char *, char *, size_t, ImGuiInputTextFlags, ImGuiInputTextCallback, void *>(InputTextWithHint), py::arg("label"), py::arg("hint"), py::arg("buf"), py::arg("buf_size"), py::arg("flags") = 0, py::arg("callback") = py::none(), py::arg("user_data") = py::none());

    m.def("InputFloat",    // imgui.h:567
        [](const char * label, BoxedFloat & v, float step = 0.0f, float step_fast = 0.0f, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> bool
        {
            auto InputFloat_adapt_modifiable_immutable = [](const char * label, BoxedFloat & v, float step = 0.0f, float step_fast = 0.0f, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> bool
            {
                float * v_boxed_value = & (v.value);

                auto r = InputFloat(label, v_boxed_value, step, step_fast, format, flags);
                return r;
            };

            return InputFloat_adapt_modifiable_immutable(label, v, step, step_fast, format, flags);
        },     py::arg("label"), py::arg("v"), py::arg("step") = 0.0f, py::arg("step_fast") = 0.0f, py::arg("format") = "%.3f", py::arg("flags") = 0);

    m.def("InputFloat2",    // imgui.h:568
        [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> bool
        {
            auto InputFloat2_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> bool
            {
                float v_raw[2];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;

                auto r = InputFloat2(label, v_raw, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                return r;
            };

            return InputFloat2_adapt_fixed_size_c_arrays(label, v_0, v_1, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("format") = "%.3f", py::arg("flags") = 0);

    m.def("InputFloat3",    // imgui.h:569
        [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> bool
        {
            auto InputFloat3_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> bool
            {
                float v_raw[3];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;

                auto r = InputFloat3(label, v_raw, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                return r;
            };

            return InputFloat3_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("format") = "%.3f", py::arg("flags") = 0);

    m.def("InputFloat4",    // imgui.h:570
        [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, BoxedFloat & v_3, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> bool
        {
            auto InputFloat4_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & v_0, BoxedFloat & v_1, BoxedFloat & v_2, BoxedFloat & v_3, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> bool
            {
                float v_raw[4];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;
                v_raw[3] = v_3.value;

                auto r = InputFloat4(label, v_raw, format, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                v_3.value = v_raw[3];
                return r;
            };

            return InputFloat4_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, v_3, format, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("v_3"), py::arg("format") = "%.3f", py::arg("flags") = 0);

    m.def("InputInt",    // imgui.h:571
        [](const char * label, BoxedInt & v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0) -> bool
        {
            auto InputInt_adapt_modifiable_immutable = [](const char * label, BoxedInt & v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0) -> bool
            {
                int * v_boxed_value = & (v.value);

                auto r = InputInt(label, v_boxed_value, step, step_fast, flags);
                return r;
            };

            return InputInt_adapt_modifiable_immutable(label, v, step, step_fast, flags);
        },     py::arg("label"), py::arg("v"), py::arg("step") = 1, py::arg("step_fast") = 100, py::arg("flags") = 0);

    m.def("InputInt2",    // imgui.h:572
        [](const char * label, BoxedInt & v_0, BoxedInt & v_1, ImGuiInputTextFlags flags = 0) -> bool
        {
            auto InputInt2_adapt_fixed_size_c_arrays = [](const char * label, BoxedInt & v_0, BoxedInt & v_1, ImGuiInputTextFlags flags = 0) -> bool
            {
                int v_raw[2];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;

                auto r = InputInt2(label, v_raw, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                return r;
            };

            return InputInt2_adapt_fixed_size_c_arrays(label, v_0, v_1, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("flags") = 0);

    m.def("InputInt3",    // imgui.h:573
        [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, ImGuiInputTextFlags flags = 0) -> bool
        {
            auto InputInt3_adapt_fixed_size_c_arrays = [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, ImGuiInputTextFlags flags = 0) -> bool
            {
                int v_raw[3];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;

                auto r = InputInt3(label, v_raw, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                return r;
            };

            return InputInt3_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("flags") = 0);

    m.def("InputInt4",    // imgui.h:574
        [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, BoxedInt & v_3, ImGuiInputTextFlags flags = 0) -> bool
        {
            auto InputInt4_adapt_fixed_size_c_arrays = [](const char * label, BoxedInt & v_0, BoxedInt & v_1, BoxedInt & v_2, BoxedInt & v_3, ImGuiInputTextFlags flags = 0) -> bool
            {
                int v_raw[4];
                v_raw[0] = v_0.value;
                v_raw[1] = v_1.value;
                v_raw[2] = v_2.value;
                v_raw[3] = v_3.value;

                auto r = InputInt4(label, v_raw, flags);

                v_0.value = v_raw[0];
                v_1.value = v_raw[1];
                v_2.value = v_raw[2];
                v_3.value = v_raw[3];
                return r;
            };

            return InputInt4_adapt_fixed_size_c_arrays(label, v_0, v_1, v_2, v_3, flags);
        },     py::arg("label"), py::arg("v_0"), py::arg("v_1"), py::arg("v_2"), py::arg("v_3"), py::arg("flags") = 0);

    m.def("InputDouble",    // imgui.h:575
        [](const char * label, BoxedDouble & v, double step = 0.0, double step_fast = 0.0, const char * format = "%.6f", ImGuiInputTextFlags flags = 0) -> bool
        {
            auto InputDouble_adapt_modifiable_immutable = [](const char * label, BoxedDouble & v, double step = 0.0, double step_fast = 0.0, const char * format = "%.6f", ImGuiInputTextFlags flags = 0) -> bool
            {
                double * v_boxed_value = & (v.value);

                auto r = InputDouble(label, v_boxed_value, step, step_fast, format, flags);
                return r;
            };

            return InputDouble_adapt_modifiable_immutable(label, v, step, step_fast, format, flags);
        },     py::arg("label"), py::arg("v"), py::arg("step") = 0.0, py::arg("step_fast") = 0.0, py::arg("format") = "%.6f", py::arg("flags") = 0);

    m.def("InputScalar",    // imgui.h:576
        InputScalar, py::arg("label"), py::arg("data_type"), py::arg("p_data"), py::arg("p_step") = py::none(), py::arg("p_step_fast") = py::none(), py::arg("format") = py::none(), py::arg("flags") = 0);

    m.def("InputScalarN",    // imgui.h:577
        InputScalarN, py::arg("label"), py::arg("data_type"), py::arg("p_data"), py::arg("components"), py::arg("p_step") = py::none(), py::arg("p_step_fast") = py::none(), py::arg("format") = py::none(), py::arg("flags") = 0);

    m.def("ColorEdit3",    // imgui.h:582
        [](const char * label, BoxedFloat & col_0, BoxedFloat & col_1, BoxedFloat & col_2, ImGuiColorEditFlags flags = 0) -> bool
        {
            auto ColorEdit3_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & col_0, BoxedFloat & col_1, BoxedFloat & col_2, ImGuiColorEditFlags flags = 0) -> bool
            {
                float col_raw[3];
                col_raw[0] = col_0.value;
                col_raw[1] = col_1.value;
                col_raw[2] = col_2.value;

                auto r = ColorEdit3(label, col_raw, flags);

                col_0.value = col_raw[0];
                col_1.value = col_raw[1];
                col_2.value = col_raw[2];
                return r;
            };

            return ColorEdit3_adapt_fixed_size_c_arrays(label, col_0, col_1, col_2, flags);
        },     py::arg("label"), py::arg("col_0"), py::arg("col_1"), py::arg("col_2"), py::arg("flags") = 0);

    m.def("ColorEdit4",    // imgui.h:583
        [](const char * label, BoxedFloat & col_0, BoxedFloat & col_1, BoxedFloat & col_2, BoxedFloat & col_3, ImGuiColorEditFlags flags = 0) -> bool
        {
            auto ColorEdit4_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & col_0, BoxedFloat & col_1, BoxedFloat & col_2, BoxedFloat & col_3, ImGuiColorEditFlags flags = 0) -> bool
            {
                float col_raw[4];
                col_raw[0] = col_0.value;
                col_raw[1] = col_1.value;
                col_raw[2] = col_2.value;
                col_raw[3] = col_3.value;

                auto r = ColorEdit4(label, col_raw, flags);

                col_0.value = col_raw[0];
                col_1.value = col_raw[1];
                col_2.value = col_raw[2];
                col_3.value = col_raw[3];
                return r;
            };

            return ColorEdit4_adapt_fixed_size_c_arrays(label, col_0, col_1, col_2, col_3, flags);
        },     py::arg("label"), py::arg("col_0"), py::arg("col_1"), py::arg("col_2"), py::arg("col_3"), py::arg("flags") = 0);

    m.def("ColorPicker3",    // imgui.h:584
        [](const char * label, BoxedFloat & col_0, BoxedFloat & col_1, BoxedFloat & col_2, ImGuiColorEditFlags flags = 0) -> bool
        {
            auto ColorPicker3_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & col_0, BoxedFloat & col_1, BoxedFloat & col_2, ImGuiColorEditFlags flags = 0) -> bool
            {
                float col_raw[3];
                col_raw[0] = col_0.value;
                col_raw[1] = col_1.value;
                col_raw[2] = col_2.value;

                auto r = ColorPicker3(label, col_raw, flags);

                col_0.value = col_raw[0];
                col_1.value = col_raw[1];
                col_2.value = col_raw[2];
                return r;
            };

            return ColorPicker3_adapt_fixed_size_c_arrays(label, col_0, col_1, col_2, flags);
        },     py::arg("label"), py::arg("col_0"), py::arg("col_1"), py::arg("col_2"), py::arg("flags") = 0);

    m.def("ColorPicker4",    // imgui.h:585
        [](const char * label, BoxedFloat & col_0, BoxedFloat & col_1, BoxedFloat & col_2, BoxedFloat & col_3, ImGuiColorEditFlags flags = 0, const float * ref_col = NULL) -> bool
        {
            auto ColorPicker4_adapt_fixed_size_c_arrays = [](const char * label, BoxedFloat & col_0, BoxedFloat & col_1, BoxedFloat & col_2, BoxedFloat & col_3, ImGuiColorEditFlags flags = 0, const float * ref_col = NULL) -> bool
            {
                float col_raw[4];
                col_raw[0] = col_0.value;
                col_raw[1] = col_1.value;
                col_raw[2] = col_2.value;
                col_raw[3] = col_3.value;

                auto r = ColorPicker4(label, col_raw, flags, ref_col);

                col_0.value = col_raw[0];
                col_1.value = col_raw[1];
                col_2.value = col_raw[2];
                col_3.value = col_raw[3];
                return r;
            };

            return ColorPicker4_adapt_fixed_size_c_arrays(label, col_0, col_1, col_2, col_3, flags, ref_col);
        },     py::arg("label"), py::arg("col_0"), py::arg("col_1"), py::arg("col_2"), py::arg("col_3"), py::arg("flags") = 0, py::arg("ref_col") = py::none());

    m.def("ColorButton",    // imgui.h:586
        ColorButton,
        py::arg("desc_id"), py::arg("col"), py::arg("flags") = 0, py::arg("size") = ImVec2(0, 0),
        "display a color square/button, hover for details, return True when pressed.");

    m.def("SetColorEditOptions",    // imgui.h:587
        SetColorEditOptions,
        py::arg("flags"),
        "initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.");

    m.def("TreeNode",    // imgui.h:591
        py::overload_cast<const char *>(TreeNode), py::arg("label"));

    m.def("TreeNode",    // imgui.h:592
        [](const char * str_id, const char * fmt) -> bool
        {
            auto TreeNode_adapt_variadic_format = [](const char * str_id, const char * fmt) -> bool
            {
                auto r = TreeNode(str_id, "%s", fmt);
                return r;
            };

            return TreeNode_adapt_variadic_format(str_id, fmt);
        },
        py::arg("str_id"), py::arg("fmt"),
        "helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().");

    m.def("TreeNode",    // imgui.h:593
        [](const void * ptr_id, const char * fmt) -> bool
        {
            auto TreeNode_adapt_variadic_format = [](const void * ptr_id, const char * fmt) -> bool
            {
                auto r = TreeNode(ptr_id, "%s", fmt);
                return r;
            };

            return TreeNode_adapt_variadic_format(ptr_id, fmt);
        },
        py::arg("ptr_id"), py::arg("fmt"),
        "\"");

    m.def("TreeNodeEx",    // imgui.h:596
        py::overload_cast<const char *, ImGuiTreeNodeFlags>(TreeNodeEx), py::arg("label"), py::arg("flags") = 0);

    m.def("TreeNodeEx",    // imgui.h:597
        [](const char * str_id, ImGuiTreeNodeFlags flags, const char * fmt) -> bool
        {
            auto TreeNodeEx_adapt_variadic_format = [](const char * str_id, ImGuiTreeNodeFlags flags, const char * fmt) -> bool
            {
                auto r = TreeNodeEx(str_id, flags, "%s", fmt);
                return r;
            };

            return TreeNodeEx_adapt_variadic_format(str_id, flags, fmt);
        },     py::arg("str_id"), py::arg("flags"), py::arg("fmt"));

    m.def("TreeNodeEx",    // imgui.h:598
        [](const void * ptr_id, ImGuiTreeNodeFlags flags, const char * fmt) -> bool
        {
            auto TreeNodeEx_adapt_variadic_format = [](const void * ptr_id, ImGuiTreeNodeFlags flags, const char * fmt) -> bool
            {
                auto r = TreeNodeEx(ptr_id, flags, "%s", fmt);
                return r;
            };

            return TreeNodeEx_adapt_variadic_format(ptr_id, flags, fmt);
        },     py::arg("ptr_id"), py::arg("flags"), py::arg("fmt"));

    m.def("TreePush",    // imgui.h:601
        py::overload_cast<const char *>(TreePush),
        py::arg("str_id"),
        "~ Indent()+PushId(). Already called by TreeNode() when returning True, but you can call TreePush/TreePop yourself if desired.");

    m.def("TreePush",    // imgui.h:602
        py::overload_cast<const void *>(TreePush),
        py::arg("ptr_id") = py::none(),
        "\"");

    m.def("TreePop",    // imgui.h:603
        TreePop, "~ Unindent()+PopId()");

    m.def("GetTreeNodeToLabelSpacing",    // imgui.h:604
        GetTreeNodeToLabelSpacing, "horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode");

    m.def("CollapsingHeader",    // imgui.h:605
        py::overload_cast<const char *, ImGuiTreeNodeFlags>(CollapsingHeader),
        py::arg("label"), py::arg("flags") = 0,
        "if returning 'True' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().");

    m.def("CollapsingHeader",    // imgui.h:606
        [](const char * label, BoxedBool & p_visible, ImGuiTreeNodeFlags flags = 0) -> bool
        {
            auto CollapsingHeader_adapt_modifiable_immutable = [](const char * label, BoxedBool & p_visible, ImGuiTreeNodeFlags flags = 0) -> bool
            {
                bool * p_visible_boxed_value = & (p_visible.value);

                auto r = CollapsingHeader(label, p_visible_boxed_value, flags);
                return r;
            };

            return CollapsingHeader_adapt_modifiable_immutable(label, p_visible, flags);
        },
        py::arg("label"), py::arg("p_visible"), py::arg("flags") = 0,
        "when 'p_visible != None': if '*p_visible==True' display an additional small close button on upper right of the header which will set the bool to False when clicked, if '*p_visible==False' don't display the header.");

    m.def("SetNextItemOpen",    // imgui.h:607
        SetNextItemOpen,
        py::arg("is_open"), py::arg("cond") = 0,
        "set next TreeNode/CollapsingHeader open state.");

    m.def("Selectable",    // imgui.h:612
        py::overload_cast<const char *, bool, ImGuiSelectableFlags, const ImVec2 &>(Selectable),
        py::arg("label"), py::arg("selected") = false, py::arg("flags") = 0, py::arg("size") = ImVec2(0, 0),
        "\"bool selected\" carry the selection state (read-only). Selectable() is clicked is returns True so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height");

    m.def("Selectable",    // imgui.h:613
        [](const char * label, BoxedBool & p_selected, ImGuiSelectableFlags flags = 0, const ImVec2 & size = ImVec2(0, 0)) -> bool
        {
            auto Selectable_adapt_modifiable_immutable = [](const char * label, BoxedBool & p_selected, ImGuiSelectableFlags flags = 0, const ImVec2 & size = ImVec2(0, 0)) -> bool
            {
                bool * p_selected_boxed_value = & (p_selected.value);

                auto r = Selectable(label, p_selected_boxed_value, flags, size);
                return r;
            };

            return Selectable_adapt_modifiable_immutable(label, p_selected, flags, size);
        },
        py::arg("label"), py::arg("p_selected"), py::arg("flags") = 0, py::arg("size") = ImVec2(0, 0),
        "\"bool* p_selected\" point to the selection state (read-write), as a convenient helper.");

    m.def("BeginListBox",    // imgui.h:621
        BeginListBox,
        py::arg("label"), py::arg("size") = ImVec2(0, 0),
        "open a framed scrolling region");

    m.def("EndListBox",    // imgui.h:622
        EndListBox, "only call EndListBox() if BeginListBox() returned True!");

    m.def("ListBox",    // imgui.h:623
        [](const char * label, BoxedInt & current_item, const std::vector<std::string> & items, int height_in_items = -1) -> bool
        {
            auto ListBox_adapt_modifiable_immutable = [](const char * label, BoxedInt & current_item, const char * const items[], int items_count, int height_in_items = -1) -> bool
            {
                int * current_item_boxed_value = & (current_item.value);

                auto r = ListBox(label, current_item_boxed_value, items, items_count, height_in_items);
                return r;
            };
            auto ListBox_adapt_c_string_list = [&ListBox_adapt_modifiable_immutable](const char * label, BoxedInt & current_item, const std::vector<std::string> & items, int height_in_items = -1) -> bool
            {
                std::vector<const char *> items_ptrs;
                for (const auto& v: items)
                    items_ptrs.push_back(v.c_str());
                int items_count = static_cast<int>(items.size());

                auto r = ListBox_adapt_modifiable_immutable(label, current_item, items_ptrs.data(), items_count, height_in_items);
                return r;
            };

            return ListBox_adapt_c_string_list(label, current_item, items, height_in_items);
        },     py::arg("label"), py::arg("current_item"), py::arg("items"), py::arg("height_in_items") = -1);

    m.def("PlotLines",    // imgui.h:628
        [](const char * label, const py::array & values, int values_offset = 0, const char * overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = -1)
        {
            auto PlotLines_adapt_c_buffers = [](const char * label, const py::array & values, int values_offset = 0, const char * overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = -1)
            {
                // convert py::array to C standard buffer (const)
                const void * values_from_pyarray = values.data();
                py::ssize_t values_count = values.shape()[0];
                char values_type = values.dtype().char_();
                if (values_type != 'f')
                    throw std::runtime_error(std::string(R"msg(
                            Bad type!  Expected a numpy array of native type:
                                        const float *
                                    Which is equivalent to
                                        f
                                    (using py::array::dtype().char_() as an id)
                        )msg"));

                // process stride default value (which was a sizeof in C++)
                int values_stride = stride;
                if (values_stride == -1)
                    values_stride = (int)values.itemsize();

                PlotLines(label, static_cast<const float *>(values_from_pyarray), static_cast<int>(values_count), values_offset, overlay_text, scale_min, scale_max, graph_size, values_stride);
            };

            PlotLines_adapt_c_buffers(label, values, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
        },     py::arg("label"), py::arg("values"), py::arg("values_offset") = 0, py::arg("overlay_text") = py::none(), py::arg("scale_min") = FLT_MAX, py::arg("scale_max") = FLT_MAX, py::arg("graph_size") = ImVec2(0, 0), py::arg("stride") = -1);

    m.def("PlotHistogram",    // imgui.h:630
        [](const char * label, const py::array & values, int values_offset = 0, const char * overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = -1)
        {
            auto PlotHistogram_adapt_c_buffers = [](const char * label, const py::array & values, int values_offset = 0, const char * overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = -1)
            {
                // convert py::array to C standard buffer (const)
                const void * values_from_pyarray = values.data();
                py::ssize_t values_count = values.shape()[0];
                char values_type = values.dtype().char_();
                if (values_type != 'f')
                    throw std::runtime_error(std::string(R"msg(
                            Bad type!  Expected a numpy array of native type:
                                        const float *
                                    Which is equivalent to
                                        f
                                    (using py::array::dtype().char_() as an id)
                        )msg"));

                // process stride default value (which was a sizeof in C++)
                int values_stride = stride;
                if (values_stride == -1)
                    values_stride = (int)values.itemsize();

                PlotHistogram(label, static_cast<const float *>(values_from_pyarray), static_cast<int>(values_count), values_offset, overlay_text, scale_min, scale_max, graph_size, values_stride);
            };

            PlotHistogram_adapt_c_buffers(label, values, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
        },     py::arg("label"), py::arg("values"), py::arg("values_offset") = 0, py::arg("overlay_text") = py::none(), py::arg("scale_min") = FLT_MAX, py::arg("scale_max") = FLT_MAX, py::arg("graph_size") = ImVec2(0, 0), py::arg("stride") = -1);

    m.def("Value",    // imgui.h:635
        py::overload_cast<const char *, bool>(Value), py::arg("prefix"), py::arg("b"));

    m.def("Value",    // imgui.h:636
        py::overload_cast<const char *, int>(Value), py::arg("prefix"), py::arg("v"));

    m.def("Value",    // imgui.h:637
        py::overload_cast<const char *, unsigned int>(Value), py::arg("prefix"), py::arg("v"));

    m.def("Value",    // imgui.h:638
        py::overload_cast<const char *, float, const char *>(Value), py::arg("prefix"), py::arg("v"), py::arg("float_format") = py::none());

    m.def("BeginMenuBar",    // imgui.h:645
        BeginMenuBar, "append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).");

    m.def("EndMenuBar",    // imgui.h:646
        EndMenuBar, "only call EndMenuBar() if BeginMenuBar() returns True!");

    m.def("BeginMainMenuBar",    // imgui.h:647
        BeginMainMenuBar, "create and append to a full screen menu-bar.");

    m.def("EndMainMenuBar",    // imgui.h:648
        EndMainMenuBar, "only call EndMainMenuBar() if BeginMainMenuBar() returns True!");

    m.def("BeginMenu",    // imgui.h:649
        BeginMenu,
        py::arg("label"), py::arg("enabled") = true,
        "create a sub-menu entry. only call EndMenu() if this returns True!");

    m.def("EndMenu",    // imgui.h:650
        EndMenu, "only call EndMenu() if BeginMenu() returns True!");

    m.def("MenuItem",    // imgui.h:651
        py::overload_cast<const char *, const char *, bool, bool>(MenuItem),
        py::arg("label"), py::arg("shortcut") = py::none(), py::arg("selected") = false, py::arg("enabled") = true,
        "return True when activated.");

    m.def("MenuItem",    // imgui.h:652
        [](const char * label, const char * shortcut, BoxedBool & p_selected, bool enabled = true) -> bool
        {
            auto MenuItem_adapt_modifiable_immutable = [](const char * label, const char * shortcut, BoxedBool & p_selected, bool enabled = true) -> bool
            {
                bool * p_selected_boxed_value = & (p_selected.value);

                auto r = MenuItem(label, shortcut, p_selected_boxed_value, enabled);
                return r;
            };

            return MenuItem_adapt_modifiable_immutable(label, shortcut, p_selected, enabled);
        },
        py::arg("label"), py::arg("shortcut"), py::arg("p_selected"), py::arg("enabled") = true,
        "return True when activated + toggle (*p_selected) if p_selected != None");

    m.def("BeginTooltip",    // imgui.h:656
        BeginTooltip, "begin/append a tooltip window. to create full-featured tooltip (with any kind of items).");

    m.def("EndTooltip",    // imgui.h:657
        EndTooltip);

    m.def("SetTooltip",    // imgui.h:658
        [](const char * fmt)
        {
            auto SetTooltip_adapt_variadic_format = [](const char * fmt)
            {
                SetTooltip("%s", fmt);
            };

            SetTooltip_adapt_variadic_format(fmt);
        },
        py::arg("fmt"),
        "set a text-only tooltip, typically use with ImGui::IsItemHovered(). override any previous call to SetTooltip().");

    m.def("BeginPopup",    // imgui.h:673
        py::overload_cast<const char *, ImGuiWindowFlags>(BeginPopup),
        py::arg("str_id"), py::arg("flags") = 0,
        "return True if the popup is open, and you can start outputting to it.");

    m.def("BeginPopupModal",    // imgui.h:674
        [](const char * name, BoxedBool * p_open = nullptr, ImGuiWindowFlags flags = 0) -> bool
        {
            auto BeginPopupModal_adapt_modifiable_immutable = [](const char * name, BoxedBool * p_open = nullptr, ImGuiWindowFlags flags = 0) -> bool
            {
                bool * p_open_boxed_value = nullptr;
                if (p_open != nullptr)
                    p_open_boxed_value = & (p_open->value);

                auto r = BeginPopupModal(name, p_open_boxed_value, flags);
                return r;
            };

            return BeginPopupModal_adapt_modifiable_immutable(name, p_open, flags);
        },
        py::arg("name"), py::arg("p_open") = py::none(), py::arg("flags") = 0,
        "return True if the modal is open, and you can start outputting to it.");

    m.def("EndPopup",    // imgui.h:675
        py::overload_cast<>(EndPopup), "only call EndPopup() if BeginPopupXXX() returns True!");

    m.def("OpenPopup",    // imgui.h:685
        py::overload_cast<const char *, ImGuiPopupFlags>(OpenPopup),
        py::arg("str_id"), py::arg("popup_flags") = 0,
        "call to mark popup as open (don't call every frame!).");

    m.def("OpenPopup",    // imgui.h:686
        py::overload_cast<ImGuiID, ImGuiPopupFlags>(OpenPopup),
        py::arg("id"), py::arg("popup_flags") = 0,
        "id overload to facilitate calling from nested stacks");

    m.def("OpenPopupOnItemClick",    // imgui.h:687
        py::overload_cast<const char *, ImGuiPopupFlags>(OpenPopupOnItemClick),
        py::arg("str_id") = py::none(), py::arg("popup_flags") = 1,
        "helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)");

    m.def("CloseCurrentPopup",    // imgui.h:688
        py::overload_cast<>(CloseCurrentPopup), "manually close the popup we have begin-ed into.");

    m.def("BeginPopupContextItem",    // imgui.h:695
        py::overload_cast<const char *, ImGuiPopupFlags>(BeginPopupContextItem),
        py::arg("str_id") = py::none(), py::arg("popup_flags") = 1,
        "open+begin popup when clicked on last item. Use str_id==None to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!");

    m.def("BeginPopupContextWindow",    // imgui.h:696
        py::overload_cast<const char *, ImGuiPopupFlags>(BeginPopupContextWindow),
        py::arg("str_id") = py::none(), py::arg("popup_flags") = 1,
        "open+begin popup when clicked on current window.");

    m.def("BeginPopupContextVoid",    // imgui.h:697
        py::overload_cast<const char *, ImGuiPopupFlags>(BeginPopupContextVoid),
        py::arg("str_id") = py::none(), py::arg("popup_flags") = 1,
        "open+begin popup when clicked in None (where there are no windows).");

    m.def("IsPopupOpen",    // imgui.h:703
        py::overload_cast<const char *, ImGuiPopupFlags>(IsPopupOpen),
        py::arg("str_id"), py::arg("flags") = 0,
        "return True if the popup is open.");

    m.def("BeginTable",    // imgui.h:728
        BeginTable, py::arg("str_id"), py::arg("column"), py::arg("flags") = 0, py::arg("outer_size") = ImVec2(0.0f, 0.0f), py::arg("inner_width") = 0.0f);

    m.def("EndTable",    // imgui.h:729
        EndTable, "only call EndTable() if BeginTable() returns True!");

    m.def("TableNextRow",    // imgui.h:730
        py::overload_cast<ImGuiTableRowFlags, float>(TableNextRow),
        py::arg("row_flags") = 0, py::arg("min_row_height") = 0.0f,
        "append into the first cell of a new row.");

    m.def("TableNextColumn",    // imgui.h:731
        py::overload_cast<>(TableNextColumn), "append into the next column (or first column of next row if currently in last column). Return True when column is visible.");

    m.def("TableSetColumnIndex",    // imgui.h:732
        py::overload_cast<int>(TableSetColumnIndex),
        py::arg("column_n"),
        "append into the specified column. Return True when column is visible.");

    m.def("TableSetupColumn",    // imgui.h:742
        py::overload_cast<const char *, ImGuiTableColumnFlags, float, ImGuiID>(TableSetupColumn), py::arg("label"), py::arg("flags") = 0, py::arg("init_width_or_weight") = 0.0f, py::arg("user_id") = 0);

    m.def("TableSetupScrollFreeze",    // imgui.h:743
        py::overload_cast<int, int>(TableSetupScrollFreeze),
        py::arg("cols"), py::arg("rows"),
        "lock columns/rows so they stay visible when scrolled.");

    m.def("TableHeadersRow",    // imgui.h:744
        py::overload_cast<>(TableHeadersRow), "submit all headers cells based on data provided to TableSetupColumn() + submit context menu");

    m.def("TableHeader",    // imgui.h:745
        py::overload_cast<const char *>(TableHeader),
        py::arg("label"),
        "submit one header cell manually (rarely used)");

    m.def("TableGetSortSpecs",    // imgui.h:753
        py::overload_cast<>(TableGetSortSpecs),
        "get latest sort specs for the table (None if not sorting).  Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().",
        pybind11::return_value_policy::reference);

    m.def("TableGetColumnCount",    // imgui.h:754
        py::overload_cast<>(TableGetColumnCount), "return number of columns (value passed to BeginTable)");

    m.def("TableGetColumnIndex",    // imgui.h:755
        py::overload_cast<>(TableGetColumnIndex), "return current column index.");

    m.def("TableGetRowIndex",    // imgui.h:756
        py::overload_cast<>(TableGetRowIndex), "return current row index.");

    m.def("TableGetColumnName",    // imgui.h:757
        py::overload_cast<int>(TableGetColumnName),
        py::arg("column_n") = -1,
        "return \"\" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.",
        pybind11::return_value_policy::reference);

    m.def("TableGetColumnFlags",    // imgui.h:758
        py::overload_cast<int>(TableGetColumnFlags),
        py::arg("column_n") = -1,
        "return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.");

    m.def("TableSetColumnEnabled",    // imgui.h:759
        py::overload_cast<int, bool>(TableSetColumnEnabled),
        py::arg("column_n"), py::arg("v"),
        "change user accessible enabled/disabled state of a column. Set to False to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)");

    m.def("TableSetBgColor",    // imgui.h:760
        py::overload_cast<ImGuiTableBgTarget, ImU32, int>(TableSetBgColor),
        py::arg("target"), py::arg("color"), py::arg("column_n") = -1,
        "change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.");

    m.def("Columns",    // imgui.h:764
        Columns, py::arg("count") = 1, py::arg("id") = py::none(), py::arg("border") = true);

    m.def("NextColumn",    // imgui.h:765
        NextColumn, "next column, defaults to current row or next row if the current row is finished");

    m.def("GetColumnIndex",    // imgui.h:766
        GetColumnIndex, "get current column index");

    m.def("GetColumnWidth",    // imgui.h:767
        GetColumnWidth,
        py::arg("column_index") = -1,
        "get column width (in pixels). pass -1 to use current column");

    m.def("SetColumnWidth",    // imgui.h:768
        SetColumnWidth,
        py::arg("column_index"), py::arg("width"),
        "set column width (in pixels). pass -1 to use current column");

    m.def("GetColumnOffset",    // imgui.h:769
        GetColumnOffset,
        py::arg("column_index") = -1,
        "get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0");

    m.def("SetColumnOffset",    // imgui.h:770
        SetColumnOffset,
        py::arg("column_index"), py::arg("offset_x"),
        "set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column");

    m.def("GetColumnsCount",    // imgui.h:771
        GetColumnsCount);

    m.def("BeginTabBar",    // imgui.h:774
        BeginTabBar,
        py::arg("str_id"), py::arg("flags") = 0,
        "create and append into a TabBar");

    m.def("EndTabBar",    // imgui.h:775
        EndTabBar, "only call EndTabBar() if BeginTabBar() returns True!");

    m.def("BeginTabItem",    // imgui.h:776
        [](const char * label, BoxedBool * p_open = nullptr, ImGuiTabItemFlags flags = 0) -> bool
        {
            auto BeginTabItem_adapt_modifiable_immutable = [](const char * label, BoxedBool * p_open = nullptr, ImGuiTabItemFlags flags = 0) -> bool
            {
                bool * p_open_boxed_value = nullptr;
                if (p_open != nullptr)
                    p_open_boxed_value = & (p_open->value);

                auto r = BeginTabItem(label, p_open_boxed_value, flags);
                return r;
            };

            return BeginTabItem_adapt_modifiable_immutable(label, p_open, flags);
        },
        py::arg("label"), py::arg("p_open") = py::none(), py::arg("flags") = 0,
        "create a Tab. Returns True if the Tab is selected.");

    m.def("EndTabItem",    // imgui.h:777
        EndTabItem, "only call EndTabItem() if BeginTabItem() returns True!");

    m.def("TabItemButton",    // imgui.h:778
        TabItemButton,
        py::arg("label"), py::arg("flags") = 0,
        "create a Tab behaving like a button. return True when clicked. cannot be selected in the tab bar.");

    m.def("SetTabItemClosed",    // imgui.h:779
        SetTabItemClosed,
        py::arg("tab_or_docked_window_label"),
        "notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.");

    m.def("LogToTTY",    // imgui.h:783
        LogToTTY,
        py::arg("auto_open_depth") = -1,
        "start logging to tty (stdout)");

    m.def("LogToFile",    // imgui.h:784
        LogToFile,
        py::arg("auto_open_depth") = -1, py::arg("filename") = py::none(),
        "start logging to file");

    m.def("LogToClipboard",    // imgui.h:785
        LogToClipboard,
        py::arg("auto_open_depth") = -1,
        "start logging to OS clipboard");

    m.def("LogFinish",    // imgui.h:786
        LogFinish, "stop logging (close file, etc.)");

    m.def("LogButtons",    // imgui.h:787
        LogButtons, "helper to display buttons for logging to tty/file/clipboard");

    m.def("LogText",    // imgui.h:788
        [](const char * fmt)
        {
            auto LogText_adapt_variadic_format = [](const char * fmt)
            {
                LogText("%s", fmt);
            };

            LogText_adapt_variadic_format(fmt);
        },
        py::arg("fmt"),
        "pass text data straight to log (without being displayed)");

    m.def("BeginDragDropSource",    // imgui.h:796
        BeginDragDropSource,
        py::arg("flags") = 0,
        "call after submitting an item which may be dragged. when this return True, you can call SetDragDropPayload() + EndDragDropSource()");

    m.def("SetDragDropPayload",    // imgui.h:797
        SetDragDropPayload,
        py::arg("type"), py::arg("data"), py::arg("sz"), py::arg("cond") = 0,
        "type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui. Return True when payload has been accepted.");

    m.def("EndDragDropSource",    // imgui.h:798
        EndDragDropSource, "only call EndDragDropSource() if BeginDragDropSource() returns True!");

    m.def("BeginDragDropTarget",    // imgui.h:799
        BeginDragDropTarget, "call after submitting an item that may receive a payload. If this returns True, you can call AcceptDragDropPayload() + EndDragDropTarget()");

    m.def("AcceptDragDropPayload",    // imgui.h:800
        AcceptDragDropPayload,
        py::arg("type"), py::arg("flags") = 0,
        "accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.",
        pybind11::return_value_policy::reference);

    m.def("EndDragDropTarget",    // imgui.h:801
        EndDragDropTarget, "only call EndDragDropTarget() if BeginDragDropTarget() returns True!");

    m.def("GetDragDropPayload",    // imgui.h:802
        GetDragDropPayload,
        "peek directly into the current payload from anywhere. may return None. use ImGuiPayload::IsDataType() to test for the payload type.",
        pybind11::return_value_policy::reference);

    m.def("BeginDisabled",    // imgui.h:808
        BeginDisabled, py::arg("disabled") = true);

    m.def("EndDisabled",    // imgui.h:809
        EndDisabled);

    m.def("PushClipRect",    // imgui.h:813
        PushClipRect, py::arg("clip_rect_min"), py::arg("clip_rect_max"), py::arg("intersect_with_current_clip_rect"));

    m.def("PopClipRect",    // imgui.h:814
        PopClipRect);

    m.def("SetItemDefaultFocus",    // imgui.h:818
        SetItemDefaultFocus, "make last item the default focused item of a window.");

    m.def("SetKeyboardFocusHere",    // imgui.h:819
        SetKeyboardFocusHere,
        py::arg("offset") = 0,
        "focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.");

    m.def("IsItemHovered",    // imgui.h:824
        IsItemHovered,
        py::arg("flags") = 0,
        "is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.");

    m.def("IsItemActive",    // imgui.h:825
        IsItemActive, "is the last item active? (e.g. button being held, text field being edited. This will continuously return True while holding mouse button on an item. Items that don't interact will always return False)");

    m.def("IsItemFocused",    // imgui.h:826
        IsItemFocused, "is the last item focused for keyboard/gamepad navigation?");

    m.def("IsItemClicked",    // imgui.h:827
        IsItemClicked,
        py::arg("mouse_button") = 0,
        "is the last item hovered and mouse clicked on? (**)  == IsMouseClicked(mouse_button) && IsItemHovered()Important. (**) this it NOT equivalent to the behavior of e.g. Button(). Read comments in function definition.");

    m.def("IsItemVisible",    // imgui.h:828
        IsItemVisible, "is the last item visible? (items may be out of sight because of clipping/scrolling)");

    m.def("IsItemEdited",    // imgui.h:829
        IsItemEdited, "did the last item modify its underlying value this frame? or was pressed? This is generally the same as the \"bool\" return value of many widgets.");

    m.def("IsItemActivated",    // imgui.h:830
        IsItemActivated, "was the last item just made active (item was previously inactive).");

    m.def("IsItemDeactivated",    // imgui.h:831
        IsItemDeactivated, "was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing.");

    m.def("IsItemDeactivatedAfterEdit",    // imgui.h:832
        IsItemDeactivatedAfterEdit, "was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get False positives (some widgets such as Combo()/ListBox()/Selectable() will return True even when clicking an already selected item).");

    m.def("IsItemToggledOpen",    // imgui.h:833
        IsItemToggledOpen, "was the last item open state toggled? set by TreeNode().");

    m.def("IsAnyItemHovered",    // imgui.h:834
        IsAnyItemHovered, "is any item hovered?");

    m.def("IsAnyItemActive",    // imgui.h:835
        IsAnyItemActive, "is any item active?");

    m.def("IsAnyItemFocused",    // imgui.h:836
        IsAnyItemFocused, "is any item focused?");

    m.def("GetItemRectMin",    // imgui.h:837
        GetItemRectMin, "get upper-left bounding rectangle of the last item (screen space)");

    m.def("GetItemRectMax",    // imgui.h:838
        GetItemRectMax, "get lower-right bounding rectangle of the last item (screen space)");

    m.def("GetItemRectSize",    // imgui.h:839
        GetItemRectSize, "get size of last item");

    m.def("SetItemAllowOverlap",    // imgui.h:840
        SetItemAllowOverlap, "allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area.");

    m.def("GetMainViewport",    // imgui.h:846
        GetMainViewport,
        "return primary/default viewport. This can never be None.",
        pybind11::return_value_policy::reference);

    m.def("GetBackgroundDrawList",    // imgui.h:849
        py::overload_cast<>(GetBackgroundDrawList),
        "this draw list will be the first rendered one. Useful to quickly draw shapes/text behind dear imgui contents.",
        pybind11::return_value_policy::reference);

    m.def("GetForegroundDrawList",    // imgui.h:850
        py::overload_cast<>(GetForegroundDrawList),
        "this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.",
        pybind11::return_value_policy::reference);

    m.def("IsRectVisible",    // imgui.h:853
        py::overload_cast<const ImVec2 &>(IsRectVisible),
        py::arg("size"),
        "test if rectangle (of given size, starting from cursor position) is visible / not clipped.");

    m.def("IsRectVisible",    // imgui.h:854
        py::overload_cast<const ImVec2 &, const ImVec2 &>(IsRectVisible),
        py::arg("rect_min"), py::arg("rect_max"),
        "test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.");

    m.def("GetTime",    // imgui.h:855
        GetTime, "get global imgui time. incremented by io.DeltaTime every frame.");

    m.def("GetFrameCount",    // imgui.h:856
        GetFrameCount, "get global imgui frame count. incremented by 1 every frame.");

    m.def("GetDrawListSharedData",    // imgui.h:857
        py::overload_cast<>(GetDrawListSharedData),
        "you may use this when creating your own ImDrawList instances.",
        pybind11::return_value_policy::reference);

    m.def("GetStyleColorName",    // imgui.h:858
        GetStyleColorName,
        py::arg("idx"),
        "get a string corresponding to the enum value (for display, saving, etc.).",
        pybind11::return_value_policy::reference);

    m.def("SetStateStorage",    // imgui.h:859
        SetStateStorage,
        py::arg("storage"),
        "replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)");

    m.def("GetStateStorage",    // imgui.h:860
        GetStateStorage, pybind11::return_value_policy::reference);

    m.def("BeginChildFrame",    // imgui.h:861
        BeginChildFrame,
        py::arg("id"), py::arg("size"), py::arg("flags") = 0,
        "helper to create a child window / scrolling region that looks like a normal widget frame");

    m.def("EndChildFrame",    // imgui.h:862
        EndChildFrame, "always call EndChildFrame() regardless of BeginChildFrame() return values (which indicates a collapsed/clipped window)");

    m.def("CalcTextSize",    // imgui.h:865
        CalcTextSize,
        py::arg("text"), py::arg("text_end") = py::none(), py::arg("hide_text_after_double_hash") = false, py::arg("wrap_width") = -1.0f,
        "Text Utilities");

    m.def("ColorConvertU32ToFloat4",    // imgui.h:868
        ColorConvertU32ToFloat4, py::arg("in_"));

    m.def("ColorConvertFloat4ToU32",    // imgui.h:869
        ColorConvertFloat4ToU32, py::arg("in_"));

    m.def("ColorConvertHSVtoRGB",    // imgui.h:871
        [](float h, float s, float v, BoxedFloat & out_r, BoxedFloat & out_g, BoxedFloat & out_b)
        {
            auto ColorConvertHSVtoRGB_adapt_modifiable_immutable = [](float h, float s, float v, BoxedFloat & out_r, BoxedFloat & out_g, BoxedFloat & out_b)
            {
                float & out_r_boxed_value = out_r.value;
                float & out_g_boxed_value = out_g.value;
                float & out_b_boxed_value = out_b.value;

                ColorConvertHSVtoRGB(h, s, v, out_r_boxed_value, out_g_boxed_value, out_b_boxed_value);
            };

            ColorConvertHSVtoRGB_adapt_modifiable_immutable(h, s, v, out_r, out_g, out_b);
        },     py::arg("h"), py::arg("s"), py::arg("v"), py::arg("out_r"), py::arg("out_g"), py::arg("out_b"));

    m.def("IsKeyDown",    // imgui.h:879
        IsKeyDown,
        py::arg("key"),
        "is key being held.");

    m.def("IsKeyPressed",    // imgui.h:880
        IsKeyPressed,
        py::arg("key"), py::arg("repeat") = true,
        "was key pressed (went from !Down to Down)? if repeat=True, uses io.KeyRepeatDelay / KeyRepeatRate");

    m.def("IsKeyReleased",    // imgui.h:881
        IsKeyReleased,
        py::arg("key"),
        "was key released (went from Down to !Down)?");

    m.def("GetKeyPressedAmount",    // imgui.h:882
        GetKeyPressedAmount,
        py::arg("key"), py::arg("repeat_delay"), py::arg("rate"),
        "uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate");

    m.def("GetKeyName",    // imgui.h:883
        GetKeyName,
        py::arg("key"),
        "[DEBUG] returns English name of the key. Those names a provided for debugging purpose and are not meant to be saved persistently not compared.",
        pybind11::return_value_policy::reference);

    m.def("SetNextFrameWantCaptureKeyboard",    // imgui.h:884
        SetNextFrameWantCaptureKeyboard,
        py::arg("want_capture_keyboard"),
        "Override io.WantCaptureKeyboard flag next frame (said flag is left for your application to handle, typically when True it instructs your app to ignore inputs). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting \"io.WantCaptureKeyboard = want_capture_keyboard\"; after the next NewFrame() call.");

    m.def("IsMouseDown",    // imgui.h:890
        IsMouseDown,
        py::arg("button"),
        "is mouse button held?");

    m.def("IsMouseClicked",    // imgui.h:891
        IsMouseClicked,
        py::arg("button"), py::arg("repeat") = false,
        "did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1.");

    m.def("IsMouseReleased",    // imgui.h:892
        IsMouseReleased,
        py::arg("button"),
        "did mouse button released? (went from Down to !Down)");

    m.def("IsMouseDoubleClicked",    // imgui.h:893
        IsMouseDoubleClicked,
        py::arg("button"),
        "did mouse button double-clicked? Same as GetMouseClickedCount() == 2. (note that a double-click will also report IsMouseClicked() == True)");

    m.def("GetMouseClickedCount",    // imgui.h:894
        GetMouseClickedCount,
        py::arg("button"),
        "return the number of successive mouse-clicks at the time where a click happen (otherwise 0).");

    m.def("IsMouseHoveringRect",    // imgui.h:895
        IsMouseHoveringRect,
        py::arg("r_min"), py::arg("r_max"), py::arg("clip") = true,
        "is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.");

    m.def("IsMousePosValid",    // imgui.h:896
        IsMousePosValid,
        py::arg("mouse_pos") = py::none(),
        "by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available");

    m.def("IsAnyMouseDown",    // imgui.h:897
        IsAnyMouseDown, "[WILL OBSOLETE] is any mouse button held? This was designed for backends, but prefer having backend maintain a mask of held mouse buttons, because upcoming input queue system will make this invalid.");

    m.def("GetMousePos",    // imgui.h:898
        GetMousePos, "shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls");

    m.def("GetMousePosOnOpeningCurrentPopup",    // imgui.h:899
        py::overload_cast<>(GetMousePosOnOpeningCurrentPopup), "retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)");

    m.def("IsMouseDragging",    // imgui.h:900
        IsMouseDragging,
        py::arg("button"), py::arg("lock_threshold") = -1.0f,
        "is mouse dragging? (if lock_threshold < -1.0, uses io.MouseDraggingThreshold)");

    m.def("GetMouseDragDelta",    // imgui.h:901
        GetMouseDragDelta,
        py::arg("button") = 0, py::arg("lock_threshold") = -1.0f,
        "return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0 until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0, uses io.MouseDraggingThreshold)");

    m.def("ResetMouseDragDelta",    // imgui.h:902
        ResetMouseDragDelta, py::arg("button") = 0);

    m.def("GetMouseCursor",    // imgui.h:903
        GetMouseCursor, "get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you");

    m.def("SetMouseCursor",    // imgui.h:904
        SetMouseCursor,
        py::arg("cursor_type"),
        "set desired cursor type");

    m.def("SetNextFrameWantCaptureMouse",    // imgui.h:905
        SetNextFrameWantCaptureMouse,
        py::arg("want_capture_mouse"),
        "Override io.WantCaptureMouse flag next frame (said flag is left for your application to handle, typical when True it instucts your app to ignore inputs). This is equivalent to setting \"io.WantCaptureMouse = want_capture_mouse;\" after the next NewFrame() call.");

    m.def("GetClipboardText",    // imgui.h:909
        GetClipboardText, pybind11::return_value_policy::reference);

    m.def("SetClipboardText",    // imgui.h:910
        SetClipboardText, py::arg("text"));

    m.def("LoadIniSettingsFromDisk",    // imgui.h:916
        LoadIniSettingsFromDisk,
        py::arg("ini_filename"),
        "call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).");

    m.def("LoadIniSettingsFromMemory",    // imgui.h:917
        LoadIniSettingsFromMemory,
        py::arg("ini_data"), py::arg("ini_size") = 0,
        "call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.");

    m.def("SaveIniSettingsToDisk",    // imgui.h:918
        SaveIniSettingsToDisk,
        py::arg("ini_filename"),
        "this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).");

    m.def("SaveIniSettingsToMemory",    // imgui.h:919
        SaveIniSettingsToMemory,
        py::arg("out_ini_size") = py::none(),
        "return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.",
        pybind11::return_value_policy::reference);

    m.def("DebugTextEncoding",    // imgui.h:922
        DebugTextEncoding, py::arg("text"));

    m.def("DebugCheckVersionAndDataLayout",    // imgui.h:923
        DebugCheckVersionAndDataLayout,
        py::arg("version_str"), py::arg("sz_io"), py::arg("sz_style"), py::arg("sz_vec2"), py::arg("sz_vec4"), py::arg("sz_drawvert"), py::arg("sz_drawidx"),
        "This is called by IMGUI_CHECKVERSION() macro.");
    // </namespace ImGui>


    py::enum_<ImGuiWindowFlags_>(m, "ImGuiWindowFlags_", py::arithmetic(), "Flags for ImGui::Begin()")    // imgui.h:941
        .value("None_", ImGuiWindowFlags_None, "")
        .value("NoTitleBar", ImGuiWindowFlags_NoTitleBar, "Disable title-bar")
        .value("NoResize", ImGuiWindowFlags_NoResize, "Disable user resizing with the lower-right grip")
        .value("NoMove", ImGuiWindowFlags_NoMove, "Disable user moving the window")
        .value("NoScrollbar", ImGuiWindowFlags_NoScrollbar, "Disable scrollbars (window can still scroll with mouse or programmatically)")
        .value("NoScrollWithMouse", ImGuiWindowFlags_NoScrollWithMouse, "Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.")
        .value("NoCollapse", ImGuiWindowFlags_NoCollapse, "Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).")
        .value("AlwaysAutoResize", ImGuiWindowFlags_AlwaysAutoResize, "Resize every window to its content every frame")
        .value("NoBackground", ImGuiWindowFlags_NoBackground, "Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0).")
        .value("NoSavedSettings", ImGuiWindowFlags_NoSavedSettings, "Never load/save settings in .ini file")
        .value("NoMouseInputs", ImGuiWindowFlags_NoMouseInputs, "Disable catching mouse, hovering test with pass through.")
        .value("MenuBar", ImGuiWindowFlags_MenuBar, "Has a menu-bar")
        .value("HorizontalScrollbar", ImGuiWindowFlags_HorizontalScrollbar, "Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0)); prior to calling Begin() to specify width. Read code in imgui_demo in the \"Horizontal Scrolling\" section.")
        .value("NoFocusOnAppearing", ImGuiWindowFlags_NoFocusOnAppearing, "Disable taking focus when transitioning from hidden to visible state")
        .value("NoBringToFrontOnFocus", ImGuiWindowFlags_NoBringToFrontOnFocus, "Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)")
        .value("AlwaysVerticalScrollbar", ImGuiWindowFlags_AlwaysVerticalScrollbar, "Always show vertical scrollbar (even if ContentSize.y < Size.y)")
        .value("AlwaysHorizontalScrollbar", ImGuiWindowFlags_AlwaysHorizontalScrollbar, "Always show horizontal scrollbar (even if ContentSize.x < Size.x)")
        .value("AlwaysUseWindowPadding", ImGuiWindowFlags_AlwaysUseWindowPadding, "Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)")
        .value("NoNavInputs", ImGuiWindowFlags_NoNavInputs, "No gamepad/keyboard navigation within the window")
        .value("NoNavFocus", ImGuiWindowFlags_NoNavFocus, "No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)")
        .value("UnsavedDocument", ImGuiWindowFlags_UnsavedDocument, "Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.")
        .value("NoNav", ImGuiWindowFlags_NoNav, "")
        .value("NoDecoration", ImGuiWindowFlags_NoDecoration, "")
        .value("NoInputs", ImGuiWindowFlags_NoInputs, "")
        .value("NavFlattened", ImGuiWindowFlags_NavFlattened, "[BETA] On child window: allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows.")
        .value("ChildWindow", ImGuiWindowFlags_ChildWindow, "Don't use! For internal use by BeginChild()")
        .value("Tooltip", ImGuiWindowFlags_Tooltip, "Don't use! For internal use by BeginTooltip()")
        .value("Popup", ImGuiWindowFlags_Popup, "Don't use! For internal use by BeginPopup()")
        .value("Modal", ImGuiWindowFlags_Modal, "Don't use! For internal use by BeginPopupModal()")
        .value("ChildMenu", ImGuiWindowFlags_ChildMenu, "Don't use! For internal use by BeginMenu()");


    py::enum_<ImGuiInputTextFlags_>(m, "ImGuiInputTextFlags_", py::arithmetic(), "Flags for ImGui::InputText()")    // imgui.h:979
        .value("None_", ImGuiInputTextFlags_None, "")
        .value("CharsDecimal", ImGuiInputTextFlags_CharsDecimal, "Allow 0123456789.+-*/")
        .value("CharsHexadecimal", ImGuiInputTextFlags_CharsHexadecimal, "Allow 0123456789ABCDEFabcdef")
        .value("CharsUppercase", ImGuiInputTextFlags_CharsUppercase, "Turn a..z into A..Z")
        .value("CharsNoBlank", ImGuiInputTextFlags_CharsNoBlank, "Filter out spaces, tabs")
        .value("AutoSelectAll", ImGuiInputTextFlags_AutoSelectAll, "Select entire text when first taking mouse focus")
        .value("EnterReturnsTrue", ImGuiInputTextFlags_EnterReturnsTrue, "Return 'True' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.")
        .value("CallbackCompletion", ImGuiInputTextFlags_CallbackCompletion, "Callback on pressing TAB (for completion handling)")
        .value("CallbackHistory", ImGuiInputTextFlags_CallbackHistory, "Callback on pressing Up/Down arrows (for history handling)")
        .value("CallbackAlways", ImGuiInputTextFlags_CallbackAlways, "Callback on each iteration. User code may query cursor position, modify text buffer.")
        .value("CallbackCharFilter", ImGuiInputTextFlags_CallbackCharFilter, "Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.")
        .value("AllowTabInput", ImGuiInputTextFlags_AllowTabInput, "Pressing TAB input a '\t' character into the text field")
        .value("CtrlEnterForNewLine", ImGuiInputTextFlags_CtrlEnterForNewLine, "In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).")
        .value("NoHorizontalScroll", ImGuiInputTextFlags_NoHorizontalScroll, "Disable following the cursor horizontally")
        .value("AlwaysOverwrite", ImGuiInputTextFlags_AlwaysOverwrite, "Overwrite mode")
        .value("ReadOnly", ImGuiInputTextFlags_ReadOnly, "Read-only mode")
        .value("Password", ImGuiInputTextFlags_Password, "Password mode, display all characters as '*'")
        .value("NoUndoRedo", ImGuiInputTextFlags_NoUndoRedo, "Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().")
        .value("CharsScientific", ImGuiInputTextFlags_CharsScientific, "Allow 0123456789.+-*/eE (Scientific notation input)")
        .value("CallbackResize", ImGuiInputTextFlags_CallbackResize, "Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)")
        .value("CallbackEdit", ImGuiInputTextFlags_CallbackEdit, "");


    py::enum_<ImGuiTreeNodeFlags_>(m, "ImGuiTreeNodeFlags_", py::arithmetic(), "Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()")    // imgui.h:1010
        .value("None_", ImGuiTreeNodeFlags_None, "")
        .value("Selected", ImGuiTreeNodeFlags_Selected, "Draw as selected")
        .value("Framed", ImGuiTreeNodeFlags_Framed, "Draw frame with background (e.g. for CollapsingHeader)")
        .value("AllowItemOverlap", ImGuiTreeNodeFlags_AllowItemOverlap, "Hit testing to allow subsequent widgets to overlap this one")
        .value("NoTreePushOnOpen", ImGuiTreeNodeFlags_NoTreePushOnOpen, "Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack")
        .value("NoAutoOpenOnLog", ImGuiTreeNodeFlags_NoAutoOpenOnLog, "Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)")
        .value("DefaultOpen", ImGuiTreeNodeFlags_DefaultOpen, "Default node to be open")
        .value("OpenOnDoubleClick", ImGuiTreeNodeFlags_OpenOnDoubleClick, "Need double-click to open node")
        .value("OpenOnArrow", ImGuiTreeNodeFlags_OpenOnArrow, "Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.")
        .value("Leaf", ImGuiTreeNodeFlags_Leaf, "No collapsing, no arrow (use as a convenience for leaf nodes).")
        .value("Bullet", ImGuiTreeNodeFlags_Bullet, "Display a bullet instead of arrow")
        .value("FramePadding", ImGuiTreeNodeFlags_FramePadding, "Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().")
        .value("SpanAvailWidth", ImGuiTreeNodeFlags_SpanAvailWidth, "Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.")
        .value("SpanFullWidth", ImGuiTreeNodeFlags_SpanFullWidth, "Extend hit box to the left-most and right-most edges (bypass the indented area).")
        .value("NavLeftJumpsBackHere", ImGuiTreeNodeFlags_NavLeftJumpsBackHere, "(WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)")
        .value("CollapsingHeader", ImGuiTreeNodeFlags_CollapsingHeader, "ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 14,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible");


    py::enum_<ImGuiPopupFlags_>(m, "ImGuiPopupFlags_", py::arithmetic(), " Flags for OpenPopup*(), BeginPopupContext*(), IsPopupOpen() functions.\n - To be backward compatible with older API which took an 'int mouse_button = 1' argument, we need to treat\n   small flags values as a mouse button index, so we encode the mouse button in the first few bits of the flags.\n   It is therefore guaranteed to be legal to pass a mouse button index in ImGuiPopupFlags.\n - For the same reason, we exceptionally default the ImGuiPopupFlags argument of BeginPopupContextXXX functions to 1 instead of 0.\n   IMPORTANT: because the default parameter is 1 (==ImGuiPopupFlags_MouseButtonRight), if you rely on the default parameter\n   and want to another another flag, you need to pass in the ImGuiPopupFlags_MouseButtonRight flag.\n - Multiple buttons currently cannot be combined/or-ed in those functions (we could allow it later).")    // imgui.h:1039
        .value("None_", ImGuiPopupFlags_None, "")
        .value("MouseButtonLeft", ImGuiPopupFlags_MouseButtonLeft, "For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)")
        .value("MouseButtonRight", ImGuiPopupFlags_MouseButtonRight, "For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)")
        .value("MouseButtonMiddle", ImGuiPopupFlags_MouseButtonMiddle, "For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)")
        .value("MouseButtonMask_", ImGuiPopupFlags_MouseButtonMask_, "")
        .value("MouseButtonDefault_", ImGuiPopupFlags_MouseButtonDefault_, "")
        .value("NoOpenOverExistingPopup", ImGuiPopupFlags_NoOpenOverExistingPopup, "For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack")
        .value("NoOpenOverItems", ImGuiPopupFlags_NoOpenOverItems, "For BeginPopupContextWindow(): don't return True when hovering items, only when hovering empty space")
        .value("AnyPopupId", ImGuiPopupFlags_AnyPopupId, "For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.")
        .value("AnyPopupLevel", ImGuiPopupFlags_AnyPopupLevel, "For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)")
        .value("AnyPopup", ImGuiPopupFlags_AnyPopup, "");


    py::enum_<ImGuiSelectableFlags_>(m, "ImGuiSelectableFlags_", py::arithmetic(), "Flags for ImGui::Selectable()")    // imgui.h:1055
        .value("None_", ImGuiSelectableFlags_None, "")
        .value("DontClosePopups", ImGuiSelectableFlags_DontClosePopups, "Clicking this don't close parent popup window")
        .value("SpanAllColumns", ImGuiSelectableFlags_SpanAllColumns, "Selectable frame can span all columns (text will still fit in current column)")
        .value("AllowDoubleClick", ImGuiSelectableFlags_AllowDoubleClick, "Generate press events on double clicks too")
        .value("Disabled", ImGuiSelectableFlags_Disabled, "Cannot be selected, display grayed out text")
        .value("AllowItemOverlap", ImGuiSelectableFlags_AllowItemOverlap, "(WIP) Hit testing to allow subsequent widgets to overlap this one");


    py::enum_<ImGuiComboFlags_>(m, "ImGuiComboFlags_", py::arithmetic(), "Flags for ImGui::BeginCombo()")    // imgui.h:1066
        .value("None_", ImGuiComboFlags_None, "")
        .value("PopupAlignLeft", ImGuiComboFlags_PopupAlignLeft, "Align the popup toward the left by default")
        .value("HeightSmall", ImGuiComboFlags_HeightSmall, "Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()")
        .value("HeightRegular", ImGuiComboFlags_HeightRegular, "Max ~8 items visible (default)")
        .value("HeightLarge", ImGuiComboFlags_HeightLarge, "Max ~20 items visible")
        .value("HeightLargest", ImGuiComboFlags_HeightLargest, "As many fitting items as possible")
        .value("NoArrowButton", ImGuiComboFlags_NoArrowButton, "Display on the preview box without the square arrow button")
        .value("NoPreview", ImGuiComboFlags_NoPreview, "Display only a square arrow button")
        .value("HeightMask_", ImGuiComboFlags_HeightMask_, "");


    py::enum_<ImGuiTabBarFlags_>(m, "ImGuiTabBarFlags_", py::arithmetic(), "Flags for ImGui::BeginTabBar()")    // imgui.h:1080
        .value("None_", ImGuiTabBarFlags_None, "")
        .value("Reorderable", ImGuiTabBarFlags_Reorderable, "Allow manually dragging tabs to re-order them + New tabs are appended at the end of list")
        .value("AutoSelectNewTabs", ImGuiTabBarFlags_AutoSelectNewTabs, "Automatically select new tabs when they appear")
        .value("TabListPopupButton", ImGuiTabBarFlags_TabListPopupButton, "Disable buttons to open the tab list popup")
        .value("NoCloseWithMiddleMouseButton", ImGuiTabBarFlags_NoCloseWithMiddleMouseButton, "Disable behavior of closing tabs (that are submitted with p_open != None) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = False.")
        .value("NoTabListScrollingButtons", ImGuiTabBarFlags_NoTabListScrollingButtons, "Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)")
        .value("NoTooltip", ImGuiTabBarFlags_NoTooltip, "Disable tooltips when hovering a tab")
        .value("FittingPolicyResizeDown", ImGuiTabBarFlags_FittingPolicyResizeDown, "Resize tabs when they don't fit")
        .value("FittingPolicyScroll", ImGuiTabBarFlags_FittingPolicyScroll, "Add scroll buttons when tabs don't fit")
        .value("FittingPolicyMask_", ImGuiTabBarFlags_FittingPolicyMask_, "")
        .value("FittingPolicyDefault_", ImGuiTabBarFlags_FittingPolicyDefault_, "");


    py::enum_<ImGuiTabItemFlags_>(m, "ImGuiTabItemFlags_", py::arithmetic(), "Flags for ImGui::BeginTabItem()")    // imgui.h:1096
        .value("None_", ImGuiTabItemFlags_None, "")
        .value("UnsavedDocument", ImGuiTabItemFlags_UnsavedDocument, "Display a dot next to the title + tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.")
        .value("SetSelected", ImGuiTabItemFlags_SetSelected, "Trigger flag to programmatically make the tab selected when calling BeginTabItem()")
        .value("NoCloseWithMiddleMouseButton", ImGuiTabItemFlags_NoCloseWithMiddleMouseButton, "Disable behavior of closing tabs (that are submitted with p_open != None) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = False.")
        .value("NoPushId", ImGuiTabItemFlags_NoPushId, "Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem()")
        .value("NoTooltip", ImGuiTabItemFlags_NoTooltip, "Disable tooltip for the given tab")
        .value("NoReorder", ImGuiTabItemFlags_NoReorder, "Disable reordering this tab or having another tab cross over this tab")
        .value("Leading", ImGuiTabItemFlags_Leading, "Enforce the tab position to the left of the tab bar (after the tab list popup button)")
        .value("Trailing", ImGuiTabItemFlags_Trailing, "Enforce the tab position to the right of the tab bar (before the scrolling buttons)");


    py::enum_<ImGuiTableFlags_>(m, "ImGuiTableFlags_", py::arithmetic(), " Flags for ImGui::BeginTable()\n - Important! Sizing policies have complex and subtle side effects, much more so than you would expect.\n   Read comments/demos carefully + experiment with live demos to get acquainted with them.\n - The DEFAULT sizing policies are:\n    - Default to ImGuiTableFlags_SizingFixedFit    if ScrollX is on, or if host window has ImGuiWindowFlags_AlwaysAutoResize.\n    - Default to ImGuiTableFlags_SizingStretchSame if ScrollX is off.\n - When ScrollX is off:\n    - Table defaults to ImGuiTableFlags_SizingStretchSame -> all Columns defaults to ImGuiTableColumnFlags_WidthStretch with same weight.\n    - Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n    - Fixed Columns (if any) will generally obtain their requested width (unless the table cannot fit them all).\n    - Stretch Columns will share the remaining width according to their respective weight.\n    - Mixed Fixed/Stretch columns is possible but has various side-effects on resizing behaviors.\n      The typical use of mixing sizing policies is: any number of LEADING Fixed columns, followed by one or two TRAILING Stretch columns.\n      (this is because the visible order of columns have subtle but necessary effects on how they react to manual resizing).\n - When ScrollX is on:\n    - Table defaults to ImGuiTableFlags_SizingFixedFit -> all Columns defaults to ImGuiTableColumnFlags_WidthFixed\n    - Columns sizing policy allowed: Fixed/Auto mostly.\n    - Fixed Columns can be enlarged as needed. Table will show an horizontal scrollbar if needed.\n    - When using auto-resizing (non-resizable) fixed columns, querying the content width to use item right-alignment e.g. SetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n    - Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on, UNLESS you have specified a value for 'inner_width' in BeginTable().\n      If you specify a value for 'inner_width' then effectively the scrolling space is known and Stretch or mixed Fixed/Stretch columns become meaningful again.\n - Read on documentation at the top of imgui_tables.cpp for details.")    // imgui.h:1131
        .value("None_", ImGuiTableFlags_None, "")
        .value("Resizable", ImGuiTableFlags_Resizable, "Enable resizing columns.")
        .value("Reorderable", ImGuiTableFlags_Reorderable, "Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)")
        .value("Hideable", ImGuiTableFlags_Hideable, "Enable hiding/disabling columns in context menu.")
        .value("Sortable", ImGuiTableFlags_Sortable, "Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.")
        .value("NoSavedSettings", ImGuiTableFlags_NoSavedSettings, "Disable persisting columns order, width and sort settings in the .ini file.")
        .value("ContextMenuInBody", ImGuiTableFlags_ContextMenuInBody, "Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().")
        .value("RowBg", ImGuiTableFlags_RowBg, "Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)")
        .value("BordersInnerH", ImGuiTableFlags_BordersInnerH, "Draw horizontal borders between rows.")
        .value("BordersOuterH", ImGuiTableFlags_BordersOuterH, "Draw horizontal borders at the top and bottom.")
        .value("BordersInnerV", ImGuiTableFlags_BordersInnerV, "Draw vertical borders between columns.")
        .value("BordersOuterV", ImGuiTableFlags_BordersOuterV, "Draw vertical borders on the left and right sides.")
        .value("BordersH", ImGuiTableFlags_BordersH, "Draw horizontal borders.")
        .value("BordersV", ImGuiTableFlags_BordersV, "Draw vertical borders.")
        .value("BordersInner", ImGuiTableFlags_BordersInner, "Draw inner borders.")
        .value("BordersOuter", ImGuiTableFlags_BordersOuter, "Draw outer borders.")
        .value("Borders", ImGuiTableFlags_Borders, "Draw all borders.")
        .value("NoBordersInBody", ImGuiTableFlags_NoBordersInBody, "[ALPHA] Disable vertical borders in columns Body (borders will always appears in Headers). -> May move to style")
        .value("NoBordersInBodyUntilResize", ImGuiTableFlags_NoBordersInBodyUntilResize, "[ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appears in Headers). -> May move to style")
        .value("SizingFixedFit", ImGuiTableFlags_SizingFixedFit, "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.")
        .value("SizingFixedSame", ImGuiTableFlags_SizingFixedSame, "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.")
        .value("SizingStretchProp", ImGuiTableFlags_SizingStretchProp, "Columns default to _WidthStretch with default weights proportional to each columns contents widths.")
        .value("SizingStretchSame", ImGuiTableFlags_SizingStretchSame, "Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().")
        .value("NoHostExtendX", ImGuiTableFlags_NoHostExtendX, "Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.")
        .value("NoHostExtendY", ImGuiTableFlags_NoHostExtendY, "Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.")
        .value("NoKeepColumnsVisible", ImGuiTableFlags_NoKeepColumnsVisible, "Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.")
        .value("PreciseWidths", ImGuiTableFlags_PreciseWidths, "Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.")
        .value("NoClip", ImGuiTableFlags_NoClip, "Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().")
        .value("PadOuterX", ImGuiTableFlags_PadOuterX, "Default if BordersOuterV is on. Enable outer-most padding. Generally desirable if you have headers.")
        .value("NoPadOuterX", ImGuiTableFlags_NoPadOuterX, "Default if BordersOuterV is off. Disable outer-most padding.")
        .value("NoPadInnerX", ImGuiTableFlags_NoPadInnerX, "Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).")
        .value("ScrollX", ImGuiTableFlags_ScrollX, "Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this create a child window, ScrollY is currently generally recommended when using ScrollX.")
        .value("ScrollY", ImGuiTableFlags_ScrollY, "Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.")
        .value("SortMulti", ImGuiTableFlags_SortMulti, "Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).")
        .value("SortTristate", ImGuiTableFlags_SortTristate, "Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).")
        .value("SizingMask_", ImGuiTableFlags_SizingMask_, "[Internal] Combinations and masks");


    py::enum_<ImGuiTableColumnFlags_>(m, "ImGuiTableColumnFlags_", py::arithmetic(), "Flags for ImGui::TableSetupColumn()")    // imgui.h:1188
        .value("None_", ImGuiTableColumnFlags_None, "")
        .value("Disabled", ImGuiTableColumnFlags_Disabled, "Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)")
        .value("DefaultHide", ImGuiTableColumnFlags_DefaultHide, "Default as a hidden/disabled column.")
        .value("DefaultSort", ImGuiTableColumnFlags_DefaultSort, "Default as a sorting column.")
        .value("WidthStretch", ImGuiTableColumnFlags_WidthStretch, "Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).")
        .value("WidthFixed", ImGuiTableColumnFlags_WidthFixed, "Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).")
        .value("NoResize", ImGuiTableColumnFlags_NoResize, "Disable manual resizing.")
        .value("NoReorder", ImGuiTableColumnFlags_NoReorder, "Disable manual reordering this column, this will also prevent other columns from crossing over this column.")
        .value("NoHide", ImGuiTableColumnFlags_NoHide, "Disable ability to hide/disable this column.")
        .value("NoClip", ImGuiTableColumnFlags_NoClip, "Disable clipping for this column (all NoClip columns will render in a same draw command).")
        .value("NoSort", ImGuiTableColumnFlags_NoSort, "Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).")
        .value("NoSortAscending", ImGuiTableColumnFlags_NoSortAscending, "Disable ability to sort in the ascending direction.")
        .value("NoSortDescending", ImGuiTableColumnFlags_NoSortDescending, "Disable ability to sort in the descending direction.")
        .value("NoHeaderLabel", ImGuiTableColumnFlags_NoHeaderLabel, "TableHeadersRow() will not submit label for this column. Convenient for some small columns. Name will still appear in context menu.")
        .value("NoHeaderWidth", ImGuiTableColumnFlags_NoHeaderWidth, "Disable header text width contribution to automatic column width.")
        .value("PreferSortAscending", ImGuiTableColumnFlags_PreferSortAscending, "Make the initial sort direction Ascending when first sorting on this column (default).")
        .value("PreferSortDescending", ImGuiTableColumnFlags_PreferSortDescending, "Make the initial sort direction Descending when first sorting on this column.")
        .value("IndentEnable", ImGuiTableColumnFlags_IndentEnable, "Use current Indent value when entering cell (default for column 0).")
        .value("IndentDisable", ImGuiTableColumnFlags_IndentDisable, "Ignore current Indent value when entering cell (default for columns > 0). Indentation changes _within_ the cell will still be honored.")
        .value("IsEnabled", ImGuiTableColumnFlags_IsEnabled, "Status: is enabled == not hidden by user/api (referred to as \"Hide\" in _DefaultHide and _NoHide) flags.")
        .value("IsVisible", ImGuiTableColumnFlags_IsVisible, "Status: is visible == is enabled AND not clipped by scrolling.")
        .value("IsSorted", ImGuiTableColumnFlags_IsSorted, "Status: is currently part of the sort specs")
        .value("IsHovered", ImGuiTableColumnFlags_IsHovered, "Status: is hovered by mouse")
        .value("WidthMask_", ImGuiTableColumnFlags_WidthMask_, "")
        .value("IndentMask_", ImGuiTableColumnFlags_IndentMask_, "")
        .value("StatusMask_", ImGuiTableColumnFlags_StatusMask_, "")
        .value("NoDirectResize_", ImGuiTableColumnFlags_NoDirectResize_, "");


    py::enum_<ImGuiTableRowFlags_>(m, "ImGuiTableRowFlags_", py::arithmetic(), "Flags for ImGui::TableNextRow()")    // imgui.h:1230
        .value("None_", ImGuiTableRowFlags_None, "")
        .value("Headers", ImGuiTableRowFlags_Headers, "Identify header row (set default background color + width of its contents accounted differently for auto column width)");


    py::enum_<ImGuiTableBgTarget_>(m, "ImGuiTableBgTarget_", py::arithmetic(), " Enum for ImGui::TableSetBgColor()\n Background colors are rendering in 3 layers:\n  - Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.\n  - Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.\n  - Layer 2: draw with CellBg color if set.\n The purpose of the two row/columns layers is to let you decide if a background color changes should override or blend with the existing color.\n When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.\n If you set the color of RowBg0 target, your color will override the existing RowBg0 color.\n If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.")    // imgui.h:1245
        .value("None_", ImGuiTableBgTarget_None, "")
        .value("RowBg0", ImGuiTableBgTarget_RowBg0, "Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)")
        .value("RowBg1", ImGuiTableBgTarget_RowBg1, "Set row background color 1 (generally used for selection marking)")
        .value("CellBg", ImGuiTableBgTarget_CellBg, "Set cell background color (top-most color)");


    py::enum_<ImGuiFocusedFlags_>(m, "ImGuiFocusedFlags_", py::arithmetic(), "Flags for ImGui::IsWindowFocused()")    // imgui.h:1254
        .value("None_", ImGuiFocusedFlags_None, "")
        .value("ChildWindows", ImGuiFocusedFlags_ChildWindows, "Return True if any children of the window is focused")
        .value("RootWindow", ImGuiFocusedFlags_RootWindow, "Test from root window (top most parent of the current hierarchy)")
        .value("AnyWindow", ImGuiFocusedFlags_AnyWindow, "Return True if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!")
        .value("NoPopupHierarchy", ImGuiFocusedFlags_NoPopupHierarchy, "Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)")
        .value("RootAndChildWindows", ImGuiFocusedFlags_RootAndChildWindows, "ImGuiFocusedFlags_DockHierarchy               = 1 << 4,   // Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)");


    py::enum_<ImGuiHoveredFlags_>(m, "ImGuiHoveredFlags_", py::arithmetic(), " Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()\n Note: if you are trying to check whether your mouse should be dispatched to Dear ImGui or to your app, you should use 'io.WantCaptureMouse' instead! Please read the FAQ!\n Note: windows with the ImGuiWindowFlags_NoInputs flag are ignored by IsWindowHovered() calls.")    // imgui.h:1268
        .value("None_", ImGuiHoveredFlags_None, "Return True if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.")
        .value("ChildWindows", ImGuiHoveredFlags_ChildWindows, "IsWindowHovered() only: Return True if any children of the window is hovered")
        .value("RootWindow", ImGuiHoveredFlags_RootWindow, "IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)")
        .value("AnyWindow", ImGuiHoveredFlags_AnyWindow, "IsWindowHovered() only: Return True if any window is hovered")
        .value("NoPopupHierarchy", ImGuiHoveredFlags_NoPopupHierarchy, "IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)")
        .value("AllowWhenBlockedByPopup", ImGuiHoveredFlags_AllowWhenBlockedByPopup, "Return True even if a popup window is normally blocking access to this item/window")
        .value("AllowWhenBlockedByActiveItem", ImGuiHoveredFlags_AllowWhenBlockedByActiveItem, "Return True even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.")
        .value("AllowWhenOverlapped", ImGuiHoveredFlags_AllowWhenOverlapped, "IsItemHovered() only: Return True even if the position is obstructed or overlapped by another window")
        .value("AllowWhenDisabled", ImGuiHoveredFlags_AllowWhenDisabled, "IsItemHovered() only: Return True even if the item is disabled")
        .value("NoNavOverride", ImGuiHoveredFlags_NoNavOverride, "Disable using gamepad/keyboard navigation state when active, always query mouse.")
        .value("RectOnly", ImGuiHoveredFlags_RectOnly, "")
        .value("RootAndChildWindows", ImGuiHoveredFlags_RootAndChildWindows, "");


    py::enum_<ImGuiDragDropFlags_>(m, "ImGuiDragDropFlags_", py::arithmetic(), "Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()")    // imgui.h:1287
        .value("None_", ImGuiDragDropFlags_None, "")
        .value("SourceNoPreviewTooltip", ImGuiDragDropFlags_SourceNoPreviewTooltip, "By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disable this behavior.")
        .value("SourceNoDisableHover", ImGuiDragDropFlags_SourceNoDisableHover, "By default, when dragging we clear data so that IsItemHovered() will return False, to avoid subsequent user code submitting tooltips. This flag disable this behavior so you can still call IsItemHovered() on the source item.")
        .value("SourceNoHoldToOpenOthers", ImGuiDragDropFlags_SourceNoHoldToOpenOthers, "Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.")
        .value("SourceAllowNullID", ImGuiDragDropFlags_SourceAllowNullID, "Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.")
        .value("SourceExtern", ImGuiDragDropFlags_SourceExtern, "External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return True. Only one Extern source can be active simultaneously.")
        .value("SourceAutoExpirePayload", ImGuiDragDropFlags_SourceAutoExpirePayload, "Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)")
        .value("AcceptBeforeDelivery", ImGuiDragDropFlags_AcceptBeforeDelivery, "AcceptDragDropPayload() will returns True even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.")
        .value("AcceptNoDrawDefaultRect", ImGuiDragDropFlags_AcceptNoDrawDefaultRect, "Do not draw the default highlight rectangle when hovering over target.")
        .value("AcceptNoPreviewTooltip", ImGuiDragDropFlags_AcceptNoPreviewTooltip, "Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.")
        .value("AcceptPeekOnly", ImGuiDragDropFlags_AcceptPeekOnly, "For peeking ahead and inspecting the payload before delivery.");


    py::enum_<ImGuiDataType_>(m, "ImGuiDataType_", py::arithmetic(), "A primary data type")    // imgui.h:1309
        .value("S8", ImGuiDataType_S8, "signed char / char (with sensible compilers)")
        .value("U8", ImGuiDataType_U8, "unsigned char")
        .value("S16", ImGuiDataType_S16, "short")
        .value("U16", ImGuiDataType_U16, "unsigned short")
        .value("S32", ImGuiDataType_S32, "int")
        .value("U32", ImGuiDataType_U32, "unsigned int")
        .value("S64", ImGuiDataType_S64, "long long / __int64")
        .value("U64", ImGuiDataType_U64, "unsigned long long / unsigned __int64")
        .value("Float", ImGuiDataType_Float, "float")
        .value("Double", ImGuiDataType_Double, "double")
        .value("COUNT", ImGuiDataType_COUNT, "");


    py::enum_<ImGuiDir_>(m, "ImGuiDir_", py::arithmetic(), "A cardinal direction")    // imgui.h:1325
        .value("None_", ImGuiDir_None, "")
        .value("Left", ImGuiDir_Left, "")
        .value("Right", ImGuiDir_Right, "")
        .value("Up", ImGuiDir_Up, "")
        .value("Down", ImGuiDir_Down, "")
        .value("COUNT", ImGuiDir_COUNT, "");


    py::enum_<ImGuiSortDirection_>(m, "ImGuiSortDirection_", py::arithmetic(), "A sorting direction")    // imgui.h:1336
        .value("None_", ImGuiSortDirection_None, "")
        .value("Ascending", ImGuiSortDirection_Ascending, "Ascending = 0->9, A->Z etc.")
        .value("Descending", ImGuiSortDirection_Descending, "Descending = 9->0, Z->A etc.");


    py::enum_<ImGuiKey_>(m, "ImGuiKey_", py::arithmetic(), " Keys value 0 to 511 are left unused as legacy native/opaque key values (< 1.87)\n Keys value >= 512 are named keys (>= 1.87)")    // imgui.h:1345
        .value("None_", ImGuiKey_None, "")
        .value("Tab", ImGuiKey_Tab, "== ImGuiKey_NamedKey_BEGIN")
        .value("LeftArrow", ImGuiKey_LeftArrow, "")
        .value("RightArrow", ImGuiKey_RightArrow, "")
        .value("UpArrow", ImGuiKey_UpArrow, "")
        .value("DownArrow", ImGuiKey_DownArrow, "")
        .value("PageUp", ImGuiKey_PageUp, "")
        .value("PageDown", ImGuiKey_PageDown, "")
        .value("Home", ImGuiKey_Home, "")
        .value("End", ImGuiKey_End, "")
        .value("Insert", ImGuiKey_Insert, "")
        .value("Delete", ImGuiKey_Delete, "")
        .value("Backspace", ImGuiKey_Backspace, "")
        .value("Space", ImGuiKey_Space, "")
        .value("Enter", ImGuiKey_Enter, "")
        .value("Escape", ImGuiKey_Escape, "")
        .value("LeftCtrl", ImGuiKey_LeftCtrl, "")
        .value("LeftShift", ImGuiKey_LeftShift, "")
        .value("LeftAlt", ImGuiKey_LeftAlt, "")
        .value("LeftSuper", ImGuiKey_LeftSuper, "")
        .value("RightCtrl", ImGuiKey_RightCtrl, "")
        .value("RightShift", ImGuiKey_RightShift, "")
        .value("RightAlt", ImGuiKey_RightAlt, "")
        .value("RightSuper", ImGuiKey_RightSuper, "")
        .value("Menu", ImGuiKey_Menu, "")
        .value("_0", ImGuiKey_0, "")
        .value("_1", ImGuiKey_1, "")
        .value("_2", ImGuiKey_2, "")
        .value("_3", ImGuiKey_3, "")
        .value("_4", ImGuiKey_4, "")
        .value("_5", ImGuiKey_5, "")
        .value("_6", ImGuiKey_6, "")
        .value("_7", ImGuiKey_7, "")
        .value("_8", ImGuiKey_8, "")
        .value("_9", ImGuiKey_9, "")
        .value("A", ImGuiKey_A, "")
        .value("B", ImGuiKey_B, "")
        .value("C", ImGuiKey_C, "")
        .value("D", ImGuiKey_D, "")
        .value("E", ImGuiKey_E, "")
        .value("F", ImGuiKey_F, "")
        .value("G", ImGuiKey_G, "")
        .value("H", ImGuiKey_H, "")
        .value("I", ImGuiKey_I, "")
        .value("J", ImGuiKey_J, "")
        .value("K", ImGuiKey_K, "")
        .value("L", ImGuiKey_L, "")
        .value("M", ImGuiKey_M, "")
        .value("N", ImGuiKey_N, "")
        .value("O", ImGuiKey_O, "")
        .value("P", ImGuiKey_P, "")
        .value("Q", ImGuiKey_Q, "")
        .value("R", ImGuiKey_R, "")
        .value("S", ImGuiKey_S, "")
        .value("T", ImGuiKey_T, "")
        .value("U", ImGuiKey_U, "")
        .value("V", ImGuiKey_V, "")
        .value("W", ImGuiKey_W, "")
        .value("X", ImGuiKey_X, "")
        .value("Y", ImGuiKey_Y, "")
        .value("Z", ImGuiKey_Z, "")
        .value("F1", ImGuiKey_F1, "")
        .value("F2", ImGuiKey_F2, "")
        .value("F3", ImGuiKey_F3, "")
        .value("F4", ImGuiKey_F4, "")
        .value("F5", ImGuiKey_F5, "")
        .value("F6", ImGuiKey_F6, "")
        .value("F7", ImGuiKey_F7, "")
        .value("F8", ImGuiKey_F8, "")
        .value("F9", ImGuiKey_F9, "")
        .value("F10", ImGuiKey_F10, "")
        .value("F11", ImGuiKey_F11, "")
        .value("F12", ImGuiKey_F12, "")
        .value("Apostrophe", ImGuiKey_Apostrophe, "'")
        .value("Comma", ImGuiKey_Comma, ",")
        .value("Minus", ImGuiKey_Minus, "-")
        .value("Period", ImGuiKey_Period, ".")
        .value("Slash", ImGuiKey_Slash, "/")
        .value("Semicolon", ImGuiKey_Semicolon, ";")
        .value("Equal", ImGuiKey_Equal, "=")
        .value("LeftBracket", ImGuiKey_LeftBracket, "[")
        .value("Backslash", ImGuiKey_Backslash, "\\ (this text inhibit multiline comment caused by backslash)")
        .value("RightBracket", ImGuiKey_RightBracket, "]")
        .value("GraveAccent", ImGuiKey_GraveAccent, "`")
        .value("CapsLock", ImGuiKey_CapsLock, "")
        .value("ScrollLock", ImGuiKey_ScrollLock, "")
        .value("NumLock", ImGuiKey_NumLock, "")
        .value("PrintScreen", ImGuiKey_PrintScreen, "")
        .value("Pause", ImGuiKey_Pause, "")
        .value("Keypad0", ImGuiKey_Keypad0, "")
        .value("Keypad1", ImGuiKey_Keypad1, "")
        .value("Keypad2", ImGuiKey_Keypad2, "")
        .value("Keypad3", ImGuiKey_Keypad3, "")
        .value("Keypad4", ImGuiKey_Keypad4, "")
        .value("Keypad5", ImGuiKey_Keypad5, "")
        .value("Keypad6", ImGuiKey_Keypad6, "")
        .value("Keypad7", ImGuiKey_Keypad7, "")
        .value("Keypad8", ImGuiKey_Keypad8, "")
        .value("Keypad9", ImGuiKey_Keypad9, "")
        .value("KeypadDecimal", ImGuiKey_KeypadDecimal, "")
        .value("KeypadDivide", ImGuiKey_KeypadDivide, "")
        .value("KeypadMultiply", ImGuiKey_KeypadMultiply, "")
        .value("KeypadSubtract", ImGuiKey_KeypadSubtract, "")
        .value("KeypadAdd", ImGuiKey_KeypadAdd, "")
        .value("KeypadEnter", ImGuiKey_KeypadEnter, "")
        .value("KeypadEqual", ImGuiKey_KeypadEqual, "")
        .value("GamepadStart", ImGuiKey_GamepadStart, "Menu (Xbox)          + (Switch)   Start/Options (PS) // --")
        .value("GamepadBack", ImGuiKey_GamepadBack, "View (Xbox)          - (Switch)   Share (PS)         // --")
        .value("GamepadFaceUp", ImGuiKey_GamepadFaceUp, "Y (Xbox)             X (Switch)   Triangle (PS)      // -> ImGuiNavInput_Input")
        .value("GamepadFaceDown", ImGuiKey_GamepadFaceDown, "A (Xbox)             B (Switch)   Cross (PS)         // -> ImGuiNavInput_Activate")
        .value("GamepadFaceLeft", ImGuiKey_GamepadFaceLeft, "X (Xbox)             Y (Switch)   Square (PS)        // -> ImGuiNavInput_Menu")
        .value("GamepadFaceRight", ImGuiKey_GamepadFaceRight, "B (Xbox)             A (Switch)   Circle (PS)        // -> ImGuiNavInput_Cancel")
        .value("GamepadDpadUp", ImGuiKey_GamepadDpadUp, "D-pad Up                                             // -> ImGuiNavInput_DpadUp")
        .value("GamepadDpadDown", ImGuiKey_GamepadDpadDown, "D-pad Down                                           // -> ImGuiNavInput_DpadDown")
        .value("GamepadDpadLeft", ImGuiKey_GamepadDpadLeft, "D-pad Left                                           // -> ImGuiNavInput_DpadLeft")
        .value("GamepadDpadRight", ImGuiKey_GamepadDpadRight, "D-pad Right                                          // -> ImGuiNavInput_DpadRight")
        .value("GamepadL1", ImGuiKey_GamepadL1, "L Bumper (Xbox)      L (Switch)   L1 (PS)            // -> ImGuiNavInput_FocusPrev + ImGuiNavInput_TweakSlow")
        .value("GamepadR1", ImGuiKey_GamepadR1, "R Bumper (Xbox)      R (Switch)   R1 (PS)            // -> ImGuiNavInput_FocusNext + ImGuiNavInput_TweakFast")
        .value("GamepadL2", ImGuiKey_GamepadL2, "L Trigger (Xbox)     ZL (Switch)  L2 (PS) [Analog]")
        .value("GamepadR2", ImGuiKey_GamepadR2, "R Trigger (Xbox)     ZR (Switch)  R2 (PS) [Analog]")
        .value("GamepadL3", ImGuiKey_GamepadL3, "L Thumbstick (Xbox)  L3 (Switch)  L3 (PS)")
        .value("GamepadR3", ImGuiKey_GamepadR3, "R Thumbstick (Xbox)  R3 (Switch)  R3 (PS)")
        .value("GamepadLStickUp", ImGuiKey_GamepadLStickUp, "[Analog]                                             // -> ImGuiNavInput_LStickUp")
        .value("GamepadLStickDown", ImGuiKey_GamepadLStickDown, "[Analog]                                             // -> ImGuiNavInput_LStickDown")
        .value("GamepadLStickLeft", ImGuiKey_GamepadLStickLeft, "[Analog]                                             // -> ImGuiNavInput_LStickLeft")
        .value("GamepadLStickRight", ImGuiKey_GamepadLStickRight, "[Analog]                                             // -> ImGuiNavInput_LStickRight")
        .value("GamepadRStickUp", ImGuiKey_GamepadRStickUp, "[Analog]")
        .value("GamepadRStickDown", ImGuiKey_GamepadRStickDown, "[Analog]")
        .value("GamepadRStickLeft", ImGuiKey_GamepadRStickLeft, "[Analog]")
        .value("GamepadRStickRight", ImGuiKey_GamepadRStickRight, "[Analog]")
        .value("ModCtrl", ImGuiKey_ModCtrl, " Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls)\n - This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing\n   them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc.\n - Code polling every keys (e.g. an interface to detect a key press for input mapping) might want to ignore those\n   and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiKey_ModCtrl).\n - In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys.\n   In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and\n   backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...")
        .value("ModShift", ImGuiKey_ModShift, "")
        .value("ModAlt", ImGuiKey_ModAlt, "")
        .value("ModSuper", ImGuiKey_ModSuper, "")
        .value("COUNT", ImGuiKey_COUNT, "No valid ImGuiKey is ever greater than this value")
        .value("NamedKey_BEGIN", ImGuiKey_NamedKey_BEGIN, "")
        .value("NamedKey_END", ImGuiKey_NamedKey_END, "")
        .value("NamedKey_COUNT", ImGuiKey_NamedKey_COUNT, "");


    py::enum_<ImGuiModFlags_>(m, "ImGuiModFlags_", py::arithmetic(), "Helper \"flags\" version of key-mods to store and compare multiple key-mods easily. Sometimes used for storage (e.g. io.KeyMods) but otherwise not much used in public API.")    // imgui.h:1457
        .value("None_", ImGuiModFlags_None, "")
        .value("Ctrl", ImGuiModFlags_Ctrl, "")
        .value("Shift", ImGuiModFlags_Shift, "")
        .value("Alt", ImGuiModFlags_Alt, "Menu")
        .value("Super", ImGuiModFlags_Super, "Cmd/Super/Windows key");


    py::enum_<ImGuiNavInput_>(m, "ImGuiNavInput_", py::arithmetic(), " Gamepad/Keyboard navigation\n Since >= 1.87 backends you generally don't need to care about this enum since io.NavInputs[] is setup automatically. This might become private/internal some day.\n Keyboard: Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard to enable. NewFrame() will automatically fill io.NavInputs[] based on your io.AddKeyEvent() calls.\n Gamepad:  Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad to enable. Backend: set ImGuiBackendFlags_HasGamepad and fill the io.NavInputs[] fields before calling NewFrame(). Note that io.NavInputs[] is cleared by EndFrame().\n Read instructions in imgui.cpp for more details. Download PNG/PSD at http://dearimgui.org/controls_sheets.")    // imgui.h:1471
        .value("Activate", ImGuiNavInput_Activate, "Activate / Open / Toggle / Tweak value       // e.g. Cross  (PS4), A (Xbox), A (Switch), Space (Keyboard)")
        .value("Cancel", ImGuiNavInput_Cancel, "Cancel / Close / Exit                        // e.g. Circle (PS4), B (Xbox), B (Switch), Escape (Keyboard)")
        .value("Input", ImGuiNavInput_Input, "Text input / On-Screen keyboard              // e.g. Triang.(PS4), Y (Xbox), X (Switch), Return (Keyboard)")
        .value("Menu", ImGuiNavInput_Menu, "Tap: Toggle menu / Hold: Focus, Move, Resize // e.g. Square (PS4), X (Xbox), Y (Switch), Alt (Keyboard)")
        .value("DpadLeft", ImGuiNavInput_DpadLeft, "Move / Tweak / Resize window (w/ PadMenu)    // e.g. D-pad Left/Right/Up/Down (Gamepads), Arrow keys (Keyboard)")
        .value("DpadRight", ImGuiNavInput_DpadRight, "")
        .value("DpadUp", ImGuiNavInput_DpadUp, "")
        .value("DpadDown", ImGuiNavInput_DpadDown, "")
        .value("LStickLeft", ImGuiNavInput_LStickLeft, "Scroll / Move window (w/ PadMenu)            // e.g. Left Analog Stick Left/Right/Up/Down")
        .value("LStickRight", ImGuiNavInput_LStickRight, "")
        .value("LStickUp", ImGuiNavInput_LStickUp, "")
        .value("LStickDown", ImGuiNavInput_LStickDown, "")
        .value("FocusPrev", ImGuiNavInput_FocusPrev, "Focus Next window (w/ PadMenu)               // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)")
        .value("FocusNext", ImGuiNavInput_FocusNext, "Focus Prev window (w/ PadMenu)               // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)")
        .value("TweakSlow", ImGuiNavInput_TweakSlow, "Slower tweaks                                // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)")
        .value("TweakFast", ImGuiNavInput_TweakFast, "Faster tweaks                                // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)")
        .value("KeyLeft_", ImGuiNavInput_KeyLeft_, "Move left                                    // = Arrow keys")
        .value("KeyRight_", ImGuiNavInput_KeyRight_, "Move right")
        .value("KeyUp_", ImGuiNavInput_KeyUp_, "Move up")
        .value("KeyDown_", ImGuiNavInput_KeyDown_, "Move down")
        .value("COUNT", ImGuiNavInput_COUNT, "");


    py::enum_<ImGuiConfigFlags_>(m, "ImGuiConfigFlags_", py::arithmetic(), "Configuration flags stored in io.ConfigFlags. Set by user/application.")    // imgui.h:1501
        .value("None_", ImGuiConfigFlags_None, "")
        .value("NavEnableKeyboard", ImGuiConfigFlags_NavEnableKeyboard, "Master keyboard navigation enable flag. NewFrame() will automatically fill io.NavInputs[] based on io.AddKeyEvent() calls")
        .value("NavEnableGamepad", ImGuiConfigFlags_NavEnableGamepad, "Master gamepad navigation enable flag. This is mostly to instruct your imgui backend to fill io.NavInputs[]. Backend also needs to set ImGuiBackendFlags_HasGamepad.")
        .value("NavEnableSetMousePos", ImGuiConfigFlags_NavEnableSetMousePos, "Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=True. If enabled you MUST honor io.WantSetMousePos requests in your backend, otherwise ImGui will react as if the mouse is jumping around back and forth.")
        .value("NavNoCaptureKeyboard", ImGuiConfigFlags_NavNoCaptureKeyboard, "Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.")
        .value("NoMouse", ImGuiConfigFlags_NoMouse, "Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the backend.")
        .value("NoMouseCursorChange", ImGuiConfigFlags_NoMouseCursorChange, "Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.")
        .value("IsSRGB", ImGuiConfigFlags_IsSRGB, "Application is SRGB-aware.")
        .value("IsTouchScreen", ImGuiConfigFlags_IsTouchScreen, "Application is using a touch screen instead of a mouse.");


    py::enum_<ImGuiBackendFlags_>(m, "ImGuiBackendFlags_", py::arithmetic(), "Backend capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom backend.")    // imgui.h:1517
        .value("None_", ImGuiBackendFlags_None, "")
        .value("HasGamepad", ImGuiBackendFlags_HasGamepad, "Backend Platform supports gamepad and currently has one connected.")
        .value("HasMouseCursors", ImGuiBackendFlags_HasMouseCursors, "Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.")
        .value("HasSetMousePos", ImGuiBackendFlags_HasSetMousePos, "Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).")
        .value("RendererHasVtxOffset", ImGuiBackendFlags_RendererHasVtxOffset, "Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.");


    py::enum_<ImGuiCol_>(m, "ImGuiCol_", py::arithmetic(), "Enumeration for PushStyleColor() / PopStyleColor()")    // imgui.h:1527
        .value("Text", ImGuiCol_Text, "")
        .value("TextDisabled", ImGuiCol_TextDisabled, "")
        .value("WindowBg", ImGuiCol_WindowBg, "Background of normal windows")
        .value("ChildBg", ImGuiCol_ChildBg, "Background of child windows")
        .value("PopupBg", ImGuiCol_PopupBg, "Background of popups, menus, tooltips windows")
        .value("Border", ImGuiCol_Border, "")
        .value("BorderShadow", ImGuiCol_BorderShadow, "")
        .value("FrameBg", ImGuiCol_FrameBg, "Background of checkbox, radio button, plot, slider, text input")
        .value("FrameBgHovered", ImGuiCol_FrameBgHovered, "")
        .value("FrameBgActive", ImGuiCol_FrameBgActive, "")
        .value("TitleBg", ImGuiCol_TitleBg, "")
        .value("TitleBgActive", ImGuiCol_TitleBgActive, "")
        .value("TitleBgCollapsed", ImGuiCol_TitleBgCollapsed, "")
        .value("MenuBarBg", ImGuiCol_MenuBarBg, "")
        .value("ScrollbarBg", ImGuiCol_ScrollbarBg, "")
        .value("ScrollbarGrab", ImGuiCol_ScrollbarGrab, "")
        .value("ScrollbarGrabHovered", ImGuiCol_ScrollbarGrabHovered, "")
        .value("ScrollbarGrabActive", ImGuiCol_ScrollbarGrabActive, "")
        .value("CheckMark", ImGuiCol_CheckMark, "")
        .value("SliderGrab", ImGuiCol_SliderGrab, "")
        .value("SliderGrabActive", ImGuiCol_SliderGrabActive, "")
        .value("Button", ImGuiCol_Button, "")
        .value("ButtonHovered", ImGuiCol_ButtonHovered, "")
        .value("ButtonActive", ImGuiCol_ButtonActive, "")
        .value("Header", ImGuiCol_Header, "Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem")
        .value("HeaderHovered", ImGuiCol_HeaderHovered, "")
        .value("HeaderActive", ImGuiCol_HeaderActive, "")
        .value("Separator", ImGuiCol_Separator, "")
        .value("SeparatorHovered", ImGuiCol_SeparatorHovered, "")
        .value("SeparatorActive", ImGuiCol_SeparatorActive, "")
        .value("ResizeGrip", ImGuiCol_ResizeGrip, "Resize grip in lower-right and lower-left corners of windows.")
        .value("ResizeGripHovered", ImGuiCol_ResizeGripHovered, "")
        .value("ResizeGripActive", ImGuiCol_ResizeGripActive, "")
        .value("Tab", ImGuiCol_Tab, "TabItem in a TabBar")
        .value("TabHovered", ImGuiCol_TabHovered, "")
        .value("TabActive", ImGuiCol_TabActive, "")
        .value("TabUnfocused", ImGuiCol_TabUnfocused, "")
        .value("TabUnfocusedActive", ImGuiCol_TabUnfocusedActive, "")
        .value("PlotLines", ImGuiCol_PlotLines, "")
        .value("PlotLinesHovered", ImGuiCol_PlotLinesHovered, "")
        .value("PlotHistogram", ImGuiCol_PlotHistogram, "")
        .value("PlotHistogramHovered", ImGuiCol_PlotHistogramHovered, "")
        .value("TableHeaderBg", ImGuiCol_TableHeaderBg, "Table header background")
        .value("TableBorderStrong", ImGuiCol_TableBorderStrong, "Table outer and header borders (prefer using Alpha=1.0 here)")
        .value("TableBorderLight", ImGuiCol_TableBorderLight, "Table inner borders (prefer using Alpha=1.0 here)")
        .value("TableRowBg", ImGuiCol_TableRowBg, "Table row background (even rows)")
        .value("TableRowBgAlt", ImGuiCol_TableRowBgAlt, "Table row background (odd rows)")
        .value("TextSelectedBg", ImGuiCol_TextSelectedBg, "")
        .value("DragDropTarget", ImGuiCol_DragDropTarget, "Rectangle highlighting a drop target")
        .value("NavHighlight", ImGuiCol_NavHighlight, "Gamepad/keyboard: current highlighted item")
        .value("NavWindowingHighlight", ImGuiCol_NavWindowingHighlight, "Highlight window when using CTRL+TAB")
        .value("NavWindowingDimBg", ImGuiCol_NavWindowingDimBg, "Darken/colorize entire screen behind the CTRL+TAB window list, when active")
        .value("ModalWindowDimBg", ImGuiCol_ModalWindowDimBg, "Darken/colorize entire screen behind a modal window, when one is active")
        .value("COUNT", ImGuiCol_COUNT, "");


    py::enum_<ImGuiStyleVar_>(m, "ImGuiStyleVar_", py::arithmetic(), " Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.\n - The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code.\n   During initialization or between frames, feel free to just poke into ImGuiStyle directly.\n - Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description.\n   In Visual Studio IDE: CTRL+comma (\"Edit.GoToAll\") can follow symbols in comments, whereas CTRL+F12 (\"Edit.GoToImplementation\") cannot.\n   With Visual Assist installed: ALT+G (\"VAssistX.GoToImplementation\") can also follow symbols in comments.\n - When changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.")    // imgui.h:1592
        .value("Alpha", ImGuiStyleVar_Alpha, "float     Alpha")
        .value("DisabledAlpha", ImGuiStyleVar_DisabledAlpha, "float     DisabledAlpha")
        .value("WindowPadding", ImGuiStyleVar_WindowPadding, "ImVec2    WindowPadding")
        .value("WindowRounding", ImGuiStyleVar_WindowRounding, "float     WindowRounding")
        .value("WindowBorderSize", ImGuiStyleVar_WindowBorderSize, "float     WindowBorderSize")
        .value("WindowMinSize", ImGuiStyleVar_WindowMinSize, "ImVec2    WindowMinSize")
        .value("WindowTitleAlign", ImGuiStyleVar_WindowTitleAlign, "ImVec2    WindowTitleAlign")
        .value("ChildRounding", ImGuiStyleVar_ChildRounding, "float     ChildRounding")
        .value("ChildBorderSize", ImGuiStyleVar_ChildBorderSize, "float     ChildBorderSize")
        .value("PopupRounding", ImGuiStyleVar_PopupRounding, "float     PopupRounding")
        .value("PopupBorderSize", ImGuiStyleVar_PopupBorderSize, "float     PopupBorderSize")
        .value("FramePadding", ImGuiStyleVar_FramePadding, "ImVec2    FramePadding")
        .value("FrameRounding", ImGuiStyleVar_FrameRounding, "float     FrameRounding")
        .value("FrameBorderSize", ImGuiStyleVar_FrameBorderSize, "float     FrameBorderSize")
        .value("ItemSpacing", ImGuiStyleVar_ItemSpacing, "ImVec2    ItemSpacing")
        .value("ItemInnerSpacing", ImGuiStyleVar_ItemInnerSpacing, "ImVec2    ItemInnerSpacing")
        .value("IndentSpacing", ImGuiStyleVar_IndentSpacing, "float     IndentSpacing")
        .value("CellPadding", ImGuiStyleVar_CellPadding, "ImVec2    CellPadding")
        .value("ScrollbarSize", ImGuiStyleVar_ScrollbarSize, "float     ScrollbarSize")
        .value("ScrollbarRounding", ImGuiStyleVar_ScrollbarRounding, "float     ScrollbarRounding")
        .value("GrabMinSize", ImGuiStyleVar_GrabMinSize, "float     GrabMinSize")
        .value("GrabRounding", ImGuiStyleVar_GrabRounding, "float     GrabRounding")
        .value("TabRounding", ImGuiStyleVar_TabRounding, "float     TabRounding")
        .value("ButtonTextAlign", ImGuiStyleVar_ButtonTextAlign, "ImVec2    ButtonTextAlign")
        .value("SelectableTextAlign", ImGuiStyleVar_SelectableTextAlign, "ImVec2    SelectableTextAlign")
        .value("COUNT", ImGuiStyleVar_COUNT, "");


    py::enum_<ImGuiButtonFlags_>(m, "ImGuiButtonFlags_", py::arithmetic(), "Flags for InvisibleButton() [extended in imgui_internal.h]")    // imgui.h:1624
        .value("None_", ImGuiButtonFlags_None, "")
        .value("MouseButtonLeft", ImGuiButtonFlags_MouseButtonLeft, "React on left mouse button (default)")
        .value("MouseButtonRight", ImGuiButtonFlags_MouseButtonRight, "React on right mouse button")
        .value("MouseButtonMiddle", ImGuiButtonFlags_MouseButtonMiddle, "React on center mouse button")
        .value("MouseButtonMask_", ImGuiButtonFlags_MouseButtonMask_, "")
        .value("MouseButtonDefault_", ImGuiButtonFlags_MouseButtonDefault_, "");


    py::enum_<ImGuiColorEditFlags_>(m, "ImGuiColorEditFlags_", py::arithmetic(), "Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()")    // imgui.h:1637
        .value("None_", ImGuiColorEditFlags_None, "")
        .value("NoAlpha", ImGuiColorEditFlags_NoAlpha, "// ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).")
        .value("NoPicker", ImGuiColorEditFlags_NoPicker, "// ColorEdit: disable picker when clicking on color square.")
        .value("NoOptions", ImGuiColorEditFlags_NoOptions, "// ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.")
        .value("NoSmallPreview", ImGuiColorEditFlags_NoSmallPreview, "// ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)")
        .value("NoInputs", ImGuiColorEditFlags_NoInputs, "// ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).")
        .value("NoTooltip", ImGuiColorEditFlags_NoTooltip, "// ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.")
        .value("NoLabel", ImGuiColorEditFlags_NoLabel, "// ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).")
        .value("NoSidePreview", ImGuiColorEditFlags_NoSidePreview, "// ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.")
        .value("NoDragDrop", ImGuiColorEditFlags_NoDragDrop, "// ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.")
        .value("NoBorder", ImGuiColorEditFlags_NoBorder, "// ColorButton: disable border (which is enforced by default)")
        .value("AlphaBar", ImGuiColorEditFlags_AlphaBar, "// ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.")
        .value("AlphaPreview", ImGuiColorEditFlags_AlphaPreview, "// ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.")
        .value("AlphaPreviewHalf", ImGuiColorEditFlags_AlphaPreviewHalf, "// ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.")
        .value("HDR", ImGuiColorEditFlags_HDR, "// (WIP) ColorEdit: Currently only disable 0.0..1.0 limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).")
        .value("DisplayRGB", ImGuiColorEditFlags_DisplayRGB, "[Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.")
        .value("DisplayHSV", ImGuiColorEditFlags_DisplayHSV, "[Display]    // \"")
        .value("DisplayHex", ImGuiColorEditFlags_DisplayHex, "[Display]    // \"")
        .value("Uint8", ImGuiColorEditFlags_Uint8, "[DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.")
        .value("Float", ImGuiColorEditFlags_Float, "[DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0..1.0 floats instead of 0..255 integers. No round-trip of value via integers.")
        .value("PickerHueBar", ImGuiColorEditFlags_PickerHueBar, "[Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.")
        .value("PickerHueWheel", ImGuiColorEditFlags_PickerHueWheel, "[Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.")
        .value("InputRGB", ImGuiColorEditFlags_InputRGB, "[Input]      // ColorEdit, ColorPicker: input and output data in RGB format.")
        .value("InputHSV", ImGuiColorEditFlags_InputHSV, "[Input]      // ColorEdit, ColorPicker: input and output data in HSV format.")
        .value("DefaultOptions_", ImGuiColorEditFlags_DefaultOptions_, " Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to\n override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.")
        .value("DisplayMask_", ImGuiColorEditFlags_DisplayMask_, "")
        .value("DataTypeMask_", ImGuiColorEditFlags_DataTypeMask_, "")
        .value("PickerMask_", ImGuiColorEditFlags_PickerMask_, "")
        .value("InputMask_", ImGuiColorEditFlags_InputMask_, "");


    py::enum_<ImGuiSliderFlags_>(m, "ImGuiSliderFlags_", py::arithmetic(), " Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.\n We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.")    // imgui.h:1682
        .value("None_", ImGuiSliderFlags_None, "")
        .value("AlwaysClamp", ImGuiSliderFlags_AlwaysClamp, "Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.")
        .value("Logarithmic", ImGuiSliderFlags_Logarithmic, "Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.")
        .value("NoRoundToFormat", ImGuiSliderFlags_NoRoundToFormat, "Disable rounding underlying value to match precision of the display format string (e.g. %.3 values are rounded to those 3 digits)")
        .value("NoInput", ImGuiSliderFlags_NoInput, "Disable CTRL+Click or Enter key allowing to input text directly into the widget")
        .value("InvalidMask_", ImGuiSliderFlags_InvalidMask_, "");


    py::enum_<ImGuiMouseButton_>(m, "ImGuiMouseButton_", py::arithmetic(), " Identify a mouse button.\n Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.")    // imgui.h:1699
        .value("Left", ImGuiMouseButton_Left, "")
        .value("Right", ImGuiMouseButton_Right, "")
        .value("Middle", ImGuiMouseButton_Middle, "")
        .value("COUNT", ImGuiMouseButton_COUNT, "");


    py::enum_<ImGuiMouseCursor_>(m, "ImGuiMouseCursor_", py::arithmetic(), " Enumeration for GetMouseCursor()\n User code may request backend to display given cursor by calling SetMouseCursor(), which is why we have some cursors that are marked unused here")    // imgui.h:1709
        .value("None_", ImGuiMouseCursor_None, "")
        .value("Arrow", ImGuiMouseCursor_Arrow, "")
        .value("TextInput", ImGuiMouseCursor_TextInput, "When hovering over InputText, etc.")
        .value("ResizeAll", ImGuiMouseCursor_ResizeAll, "(Unused by Dear ImGui functions)")
        .value("ResizeNS", ImGuiMouseCursor_ResizeNS, "When hovering over an horizontal border")
        .value("ResizeEW", ImGuiMouseCursor_ResizeEW, "When hovering over a vertical border or a column")
        .value("ResizeNESW", ImGuiMouseCursor_ResizeNESW, "When hovering over the bottom-left corner of a window")
        .value("ResizeNWSE", ImGuiMouseCursor_ResizeNWSE, "When hovering over the bottom-right corner of a window")
        .value("Hand", ImGuiMouseCursor_Hand, "(Unused by Dear ImGui functions. Use for e.g. hyperlinks)")
        .value("NotAllowed", ImGuiMouseCursor_NotAllowed, "When hovering something with disallowed interaction. Usually a crossed circle.")
        .value("COUNT", ImGuiMouseCursor_COUNT, "");


    py::enum_<ImGuiCond_>(m, "ImGuiCond_", py::arithmetic(), " Enumeration for ImGui::SetWindow***(), SetNextWindow***(), SetNextItem***() functions\n Represent a condition.\n Important: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always.")    // imgui.h:1727
        .value("None_", ImGuiCond_None, "No condition (always set the variable), same as _Always")
        .value("Always", ImGuiCond_Always, "No condition (always set the variable)")
        .value("Once", ImGuiCond_Once, "Set the variable once per runtime session (only the first call will succeed)")
        .value("FirstUseEver", ImGuiCond_FirstUseEver, "Set the variable if the object/window has no persistently saved data (no entry in .ini file)")
        .value("Appearing", ImGuiCond_Appearing, "Set the variable if the object/window is appearing after being hidden/inactive (or the first time)");


    auto pyClassImNewWrapper = py::class_<ImNewWrapper>    // imgui.h:1746
        (m, "ImNewWrapper", "")
        .def(py::init<>()) // implicit default constructor
        ;


    auto pyClassImGuiStyle = py::class_<ImGuiStyle>    // imgui.h:1838
        (m, "ImGuiStyle", "")
        .def_readwrite("Alpha", &ImGuiStyle::Alpha, "Global alpha applies to everything in Dear ImGui.")    // imgui.h:1840
        .def_readwrite("DisabledAlpha", &ImGuiStyle::DisabledAlpha, "Additional alpha multiplier applied by BeginDisabled(). Multiply over current value of Alpha.")    // imgui.h:1841
        .def_readwrite("WindowPadding", &ImGuiStyle::WindowPadding, "Padding within a window.")    // imgui.h:1842
        .def_readwrite("WindowRounding", &ImGuiStyle::WindowRounding, "Radius of window corners rounding. Set to 0.0 to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.")    // imgui.h:1843
        .def_readwrite("WindowBorderSize", &ImGuiStyle::WindowBorderSize, "Thickness of border around windows. Generally set to 0.0 or 1.0. (Other values are not well tested and more CPU/GPU costly).")    // imgui.h:1844
        .def_readwrite("WindowMinSize", &ImGuiStyle::WindowMinSize, "Minimum window size. This is a global setting. If you want to constraint individual windows, use SetNextWindowSizeConstraints().")    // imgui.h:1845
        .def_readwrite("WindowTitleAlign", &ImGuiStyle::WindowTitleAlign, "Alignment for title bar text. Defaults to (0.0,0.5) for left-aligned,vertically centered.")    // imgui.h:1846
        .def_readwrite("WindowMenuButtonPosition", &ImGuiStyle::WindowMenuButtonPosition, "Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left.")    // imgui.h:1847
        .def_readwrite("ChildRounding", &ImGuiStyle::ChildRounding, "Radius of child window corners rounding. Set to 0.0 to have rectangular windows.")    // imgui.h:1848
        .def_readwrite("ChildBorderSize", &ImGuiStyle::ChildBorderSize, "Thickness of border around child windows. Generally set to 0.0 or 1.0. (Other values are not well tested and more CPU/GPU costly).")    // imgui.h:1849
        .def_readwrite("PopupRounding", &ImGuiStyle::PopupRounding, "Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)")    // imgui.h:1850
        .def_readwrite("PopupBorderSize", &ImGuiStyle::PopupBorderSize, "Thickness of border around popup/tooltip windows. Generally set to 0.0 or 1.0. (Other values are not well tested and more CPU/GPU costly).")    // imgui.h:1851
        .def_readwrite("FramePadding", &ImGuiStyle::FramePadding, "Padding within a framed rectangle (used by most widgets).")    // imgui.h:1852
        .def_readwrite("FrameRounding", &ImGuiStyle::FrameRounding, "Radius of frame corners rounding. Set to 0.0 to have rectangular frame (used by most widgets).")    // imgui.h:1853
        .def_readwrite("FrameBorderSize", &ImGuiStyle::FrameBorderSize, "Thickness of border around frames. Generally set to 0.0 or 1.0. (Other values are not well tested and more CPU/GPU costly).")    // imgui.h:1854
        .def_readwrite("ItemSpacing", &ImGuiStyle::ItemSpacing, "Horizontal and vertical spacing between widgets/lines.")    // imgui.h:1855
        .def_readwrite("ItemInnerSpacing", &ImGuiStyle::ItemInnerSpacing, "Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).")    // imgui.h:1856
        .def_readwrite("CellPadding", &ImGuiStyle::CellPadding, "Padding within a table cell")    // imgui.h:1857
        .def_readwrite("TouchExtraPadding", &ImGuiStyle::TouchExtraPadding, "Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!")    // imgui.h:1858
        .def_readwrite("IndentSpacing", &ImGuiStyle::IndentSpacing, "Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).")    // imgui.h:1859
        .def_readwrite("ColumnsMinSpacing", &ImGuiStyle::ColumnsMinSpacing, "Minimum horizontal spacing between two columns. Preferably > (FramePadding.x + 1).")    // imgui.h:1860
        .def_readwrite("ScrollbarSize", &ImGuiStyle::ScrollbarSize, "Width of the vertical scrollbar, Height of the horizontal scrollbar.")    // imgui.h:1861
        .def_readwrite("ScrollbarRounding", &ImGuiStyle::ScrollbarRounding, "Radius of grab corners for scrollbar.")    // imgui.h:1862
        .def_readwrite("GrabMinSize", &ImGuiStyle::GrabMinSize, "Minimum width/height of a grab box for slider/scrollbar.")    // imgui.h:1863
        .def_readwrite("GrabRounding", &ImGuiStyle::GrabRounding, "Radius of grabs corners rounding. Set to 0.0 to have rectangular slider grabs.")    // imgui.h:1864
        .def_readwrite("LogSliderDeadzone", &ImGuiStyle::LogSliderDeadzone, "The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero.")    // imgui.h:1865
        .def_readwrite("TabRounding", &ImGuiStyle::TabRounding, "Radius of upper corners of a tab. Set to 0.0 to have rectangular tabs.")    // imgui.h:1866
        .def_readwrite("TabBorderSize", &ImGuiStyle::TabBorderSize, "Thickness of border around tabs.")    // imgui.h:1867
        .def_readwrite("TabMinWidthForCloseButton", &ImGuiStyle::TabMinWidthForCloseButton, "Minimum width for close button to appears on an unselected tab when hovered. Set to 0.0 to always show when hovering, set to FLT_MAX to never show close button unless selected.")    // imgui.h:1868
        .def_readwrite("ColorButtonPosition", &ImGuiStyle::ColorButtonPosition, "Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.")    // imgui.h:1869
        .def_readwrite("ButtonTextAlign", &ImGuiStyle::ButtonTextAlign, "Alignment of button text when button is larger than text. Defaults to (0.5, 0.5) (centered).")    // imgui.h:1870
        .def_readwrite("SelectableTextAlign", &ImGuiStyle::SelectableTextAlign, "Alignment of selectable text. Defaults to (0.0, 0.0) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line.")    // imgui.h:1871
        .def_readwrite("DisplayWindowPadding", &ImGuiStyle::DisplayWindowPadding, "Window position are clamped to be visible within the display area or monitors by at least this amount. Only applies to regular windows.")    // imgui.h:1872
        .def_readwrite("DisplaySafeAreaPadding", &ImGuiStyle::DisplaySafeAreaPadding, "If you cannot see the edges of your screen (e.g. on a TV) increase the safe area padding. Apply to popups/tooltips as well regular windows. NB: Prefer configuring your TV sets correctly!")    // imgui.h:1873
        .def_readwrite("MouseCursorScale", &ImGuiStyle::MouseCursorScale, "Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). May be removed later.")    // imgui.h:1874
        .def_readwrite("AntiAliasedLines", &ImGuiStyle::AntiAliasedLines, "Enable anti-aliased lines/borders. Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).")    // imgui.h:1875
        .def_readwrite("AntiAliasedLinesUseTex", &ImGuiStyle::AntiAliasedLinesUseTex, "Enable anti-aliased lines/borders using textures where possible. Require backend to render with bilinear filtering (NOT point/nearest filtering). Latched at the beginning of the frame (copied to ImDrawList).")    // imgui.h:1876
        .def_readwrite("AntiAliasedFill", &ImGuiStyle::AntiAliasedFill, "Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).")    // imgui.h:1877
        .def_readwrite("CurveTessellationTol", &ImGuiStyle::CurveTessellationTol, "Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.")    // imgui.h:1878
        .def_readwrite("CircleTessellationMaxError", &ImGuiStyle::CircleTessellationMaxError, "Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry.")    // imgui.h:1879
        .def(py::init<>())    // imgui.h:1882
        .def("ScaleAllSizes",    // imgui.h:1883
            &ImGuiStyle::ScaleAllSizes, py::arg("scale_factor"))
        ;


    auto pyClassImGuiKeyData = py::class_<ImGuiKeyData>    // imgui.h:1895
        (m, "ImGuiKeyData", " [Internal] Storage used by IsKeyDown(), IsKeyPressed() etc functions.\n If prior to 1.87 you used io.KeysDownDuration[] (which was marked as internal), you should use GetKeyData(key)->DownDuration and not io.KeysData[key]->DownDuration.")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("Down", &ImGuiKeyData::Down, "True for if key is down")    // imgui.h:1897
        .def_readwrite("DownDuration", &ImGuiKeyData::DownDuration, "Duration the key has been down (<0.0: not pressed, 0.0: just pressed, >0.0: time held)")    // imgui.h:1898
        .def_readwrite("DownDurationPrev", &ImGuiKeyData::DownDurationPrev, "Last frame duration the key has been down")    // imgui.h:1899
        .def_readwrite("AnalogValue", &ImGuiKeyData::AnalogValue, "0.0..1.0 for gamepad values")    // imgui.h:1900
        ;


    auto pyClassImGuiIO = py::class_<ImGuiIO>    // imgui.h:1903
        (m, "ImGuiIO", "")
        .def_readwrite("ConfigFlags", &ImGuiIO::ConfigFlags, "= 0              // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.")    // imgui.h:1909
        .def_readwrite("BackendFlags", &ImGuiIO::BackendFlags, "= 0              // See ImGuiBackendFlags_ enum. Set by backend (imgui_impl_xxx files or custom backend) to communicate features supported by the backend.")    // imgui.h:1910
        .def_readwrite("DisplaySize", &ImGuiIO::DisplaySize, "<unset>          // Main display size, in pixels (generally == GetMainViewport()->Size). May change every frame.")    // imgui.h:1911
        .def_readwrite("DeltaTime", &ImGuiIO::DeltaTime, "= 1.0/60.0     // Time elapsed since last frame, in seconds. May change every frame.")    // imgui.h:1912
        .def_readwrite("IniSavingRate", &ImGuiIO::IniSavingRate, "= 5.0           // Minimum time between saving positions/sizes to .ini file, in seconds.")    // imgui.h:1913
        .def_readonly("IniFilename", &ImGuiIO::IniFilename, "= \"imgui.ini\"    // Path to .ini file (important: default \"imgui.ini\" is relative to current working dir!). Set None to disable automatic .ini loading/saving or if you want to manually call LoadIniSettingsXXX() / SaveIniSettingsXXX() functions.")    // imgui.h:1914
        .def_readonly("LogFilename", &ImGuiIO::LogFilename, "= \"imgui_log.txt\"// Path to .log file (default parameter to ImGui::LogToFile when no file is specified).")    // imgui.h:1915
        .def_readwrite("MouseDoubleClickTime", &ImGuiIO::MouseDoubleClickTime, "= 0.30          // Time for a double-click, in seconds.")    // imgui.h:1916
        .def_readwrite("MouseDoubleClickMaxDist", &ImGuiIO::MouseDoubleClickMaxDist, "= 6.0           // Distance threshold to stay in to validate a double-click, in pixels.")    // imgui.h:1917
        .def_readwrite("MouseDragThreshold", &ImGuiIO::MouseDragThreshold, "= 6.0           // Distance threshold before considering we are dragging.")    // imgui.h:1918
        .def_readwrite("KeyRepeatDelay", &ImGuiIO::KeyRepeatDelay, "= 0.250         // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).")    // imgui.h:1919
        .def_readwrite("KeyRepeatRate", &ImGuiIO::KeyRepeatRate, "= 0.050         // When holding a key/button, rate at which it repeats, in seconds.")    // imgui.h:1920
        .def_readwrite("UserData", &ImGuiIO::UserData, "= None           // Store your own data for retrieval by callbacks.")    // imgui.h:1921
        .def_readwrite("Fonts", &ImGuiIO::Fonts, "<auto>           // Font atlas: load, rasterize and pack one or more fonts into a single texture.")    // imgui.h:1923
        .def_readwrite("FontGlobalScale", &ImGuiIO::FontGlobalScale, "= 1.0           // Global scale all fonts")    // imgui.h:1924
        .def_readwrite("FontAllowUserScaling", &ImGuiIO::FontAllowUserScaling, "= False          // Allow user scaling text of individual window with CTRL+Wheel.")    // imgui.h:1925
        .def_readwrite("FontDefault", &ImGuiIO::FontDefault, "= None           // Font to use on NewFrame(). Use None to uses Fonts->Fonts[0].")    // imgui.h:1926
        .def_readwrite("DisplayFramebufferScale", &ImGuiIO::DisplayFramebufferScale, "= (1, 1)         // For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale.")    // imgui.h:1927
        .def_readwrite("MouseDrawCursor", &ImGuiIO::MouseDrawCursor, "= False          // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by backend implementations.")    // imgui.h:1930
        .def_readwrite("ConfigMacOSXBehaviors", &ImGuiIO::ConfigMacOSXBehaviors, "= defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl.")    // imgui.h:1931
        .def_readwrite("ConfigInputTrickleEventQueue", &ImGuiIO::ConfigInputTrickleEventQueue, "= True           // Enable input queue trickling: some types of events submitted during the same frame (e.g. button down + up) will be spread over multiple frames, improving interactions with low framerates.")    // imgui.h:1932
        .def_readwrite("ConfigInputTextCursorBlink", &ImGuiIO::ConfigInputTextCursorBlink, "= True           // Enable blinking cursor (optional as some users consider it to be distracting).")    // imgui.h:1933
        .def_readwrite("ConfigDragClickToInputText", &ImGuiIO::ConfigDragClickToInputText, "= False          // [BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard.")    // imgui.h:1934
        .def_readwrite("ConfigWindowsResizeFromEdges", &ImGuiIO::ConfigWindowsResizeFromEdges, "= True           // Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag)")    // imgui.h:1935
        .def_readwrite("ConfigWindowsMoveFromTitleBarOnly", &ImGuiIO::ConfigWindowsMoveFromTitleBarOnly, "= False       // Enable allowing to move windows only when clicking on their title bar. Does not apply to windows without a title bar.")    // imgui.h:1936
        .def_readwrite("ConfigMemoryCompactTimer", &ImGuiIO::ConfigMemoryCompactTimer, "= 60.0          // Timer (in seconds) to free transient windows/tables memory buffers when unused. Set to -1.0 to disable.")    // imgui.h:1937
        .def_readonly("BackendPlatformName", &ImGuiIO::BackendPlatformName, "= None")    // imgui.h:1945
        .def_readonly("BackendRendererName", &ImGuiIO::BackendRendererName, "= None")    // imgui.h:1946
        .def_readwrite("BackendPlatformUserData", &ImGuiIO::BackendPlatformUserData, "= None           // User data for platform backend")    // imgui.h:1947
        .def_readwrite("BackendRendererUserData", &ImGuiIO::BackendRendererUserData, "= None           // User data for renderer backend")    // imgui.h:1948
        .def_readwrite("BackendLanguageUserData", &ImGuiIO::BackendLanguageUserData, "= None           // User data for non C++ programming language backend")    // imgui.h:1949
        .def_readwrite("ClipboardUserData", &ImGuiIO::ClipboardUserData, "")    // imgui.h:1955
        .def("AddKeyEvent",    // imgui.h:1971
            &ImGuiIO::AddKeyEvent,
            py::arg("key"), py::arg("down"),
            "Queue a new key down/up event. Key should be \"translated\" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)")
        .def("AddKeyAnalogEvent",    // imgui.h:1972
            &ImGuiIO::AddKeyAnalogEvent,
            py::arg("key"), py::arg("down"), py::arg("v"),
            "Queue a new key down/up event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.")
        .def("AddMousePosEvent",    // imgui.h:1973
            &ImGuiIO::AddMousePosEvent,
            py::arg("x"), py::arg("y"),
            "Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)")
        .def("AddMouseButtonEvent",    // imgui.h:1974
            &ImGuiIO::AddMouseButtonEvent,
            py::arg("button"), py::arg("down"),
            "Queue a mouse button change")
        .def("AddMouseWheelEvent",    // imgui.h:1975
            &ImGuiIO::AddMouseWheelEvent,
            py::arg("wh_x"), py::arg("wh_y"),
            "Queue a mouse wheel update")
        .def("AddFocusEvent",    // imgui.h:1976
            &ImGuiIO::AddFocusEvent,
            py::arg("focused"),
            "Queue a gain/loss of focus for the application (generally based on OS/platform focus of your window)")
        .def("AddInputCharacter",    // imgui.h:1977
            &ImGuiIO::AddInputCharacter,
            py::arg("c"),
            "Queue a new character input")
        .def("AddInputCharacterUTF16",    // imgui.h:1978
            &ImGuiIO::AddInputCharacterUTF16,
            py::arg("c"),
            "Queue a new character input from an UTF-16 character, it can be a surrogate")
        .def("AddInputCharactersUTF8",    // imgui.h:1979
            &ImGuiIO::AddInputCharactersUTF8,
            py::arg("str"),
            "Queue a new characters input from an UTF-8 string")
        .def("SetKeyEventNativeData",    // imgui.h:1981
            &ImGuiIO::SetKeyEventNativeData,
            py::arg("key"), py::arg("native_keycode"), py::arg("native_scancode"), py::arg("native_legacy_index") = -1,
            "[Optional] Specify index for legacy <1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.")
        .def("SetAppAcceptingEvents",    // imgui.h:1982
            &ImGuiIO::SetAppAcceptingEvents,
            py::arg("accepting_events"),
            "Set master flag for accepting key/mouse/text events (default to True). Useful if you have native dialog boxes that are interrupting your application loop/refresh, and you want to disable events being queued while your app is frozen.")
        .def("ClearInputCharacters",    // imgui.h:1983
            &ImGuiIO::ClearInputCharacters, "[Internal] Clear the text input buffer manually")
        .def("ClearInputKeys",    // imgui.h:1984
            &ImGuiIO::ClearInputKeys, "[Internal] Release all keys")
        .def_readwrite("WantCaptureMouse", &ImGuiIO::WantCaptureMouse, "Set when Dear ImGui will use mouse inputs, in this case do not dispatch them to your main game/application (either way, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.).")    // imgui.h:1992
        .def_readwrite("WantCaptureKeyboard", &ImGuiIO::WantCaptureKeyboard, "Set when Dear ImGui will use keyboard inputs, in this case do not dispatch them to your main game/application (either way, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.).")    // imgui.h:1993
        .def_readwrite("WantTextInput", &ImGuiIO::WantTextInput, "Mobile/console: when set, you may display an on-screen keyboard. This is set by Dear ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).")    // imgui.h:1994
        .def_readwrite("WantSetMousePos", &ImGuiIO::WantSetMousePos, "MousePos has been altered, backend should reposition mouse on next frame. Rarely used! Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled.")    // imgui.h:1995
        .def_readwrite("WantSaveIniSettings", &ImGuiIO::WantSaveIniSettings, "When manual .ini load/save is active (io.IniFilename == None), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. Important: clear io.WantSaveIniSettings yourself after saving!")    // imgui.h:1996
        .def_readwrite("NavActive", &ImGuiIO::NavActive, "Keyboard/Gamepad navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.")    // imgui.h:1997
        .def_readwrite("NavVisible", &ImGuiIO::NavVisible, "Keyboard/Gamepad navigation is visible and allowed (will handle ImGuiKey_NavXXX events).")    // imgui.h:1998
        .def_readwrite("Framerate", &ImGuiIO::Framerate, "Rough estimate of application framerate, in frame per second. Solely for convenience. Rolling average estimation based on io.DeltaTime over 120 frames.")    // imgui.h:1999
        .def_readwrite("MetricsRenderVertices", &ImGuiIO::MetricsRenderVertices, "Vertices output during last call to Render()")    // imgui.h:2000
        .def_readwrite("MetricsRenderIndices", &ImGuiIO::MetricsRenderIndices, "Indices output during last call to Render() = number of triangles * 3")    // imgui.h:2001
        .def_readwrite("MetricsRenderWindows", &ImGuiIO::MetricsRenderWindows, "Number of visible windows")    // imgui.h:2002
        .def_readwrite("MetricsActiveWindows", &ImGuiIO::MetricsActiveWindows, "Number of active windows")    // imgui.h:2003
        .def_readwrite("MetricsActiveAllocations", &ImGuiIO::MetricsActiveAllocations, "Number of active allocations, updated by MemAlloc/MemFree based on current context. May be off if you have multiple imgui contexts.")    // imgui.h:2004
        .def_readwrite("MouseDelta", &ImGuiIO::MouseDelta, "")    // imgui.h:2005
        .def_readwrite("MousePos", &ImGuiIO::MousePos, "Mouse position, in pixels. Set to ImVec2(-FLT_MAX, -FLT_MAX) if mouse is unavailable (on another screen, etc.)")    // imgui.h:2021
        .def_property("MouseDown",    // imgui.h:2022
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<bool>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(bool)});
                return pybind11::array(dtype, {5}, {sizeof(bool)}, self.MouseDown, base);
            }, [](ImGuiIO& self) {},
            "Mouse buttons: 0=left, 1=right, 2=middle + extras (ImGuiMouseButton_COUNT == 5). Dear ImGui mostly uses left and right buttons. Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.")
        .def_readwrite("MouseWheel", &ImGuiIO::MouseWheel, "Mouse wheel Vertical: 1 unit scrolls about 5 lines text.")    // imgui.h:2023
        .def_readwrite("MouseWheelH", &ImGuiIO::MouseWheelH, "Mouse wheel Horizontal. Most users don't have a mouse with an horizontal wheel, may not be filled by all backends.")    // imgui.h:2024
        .def_readwrite("KeyCtrl", &ImGuiIO::KeyCtrl, "Keyboard modifier down: Control")    // imgui.h:2025
        .def_readwrite("KeyShift", &ImGuiIO::KeyShift, "Keyboard modifier down: Shift")    // imgui.h:2026
        .def_readwrite("KeyAlt", &ImGuiIO::KeyAlt, "Keyboard modifier down: Alt")    // imgui.h:2027
        .def_readwrite("KeySuper", &ImGuiIO::KeySuper, "Keyboard modifier down: Cmd/Super/Windows")    // imgui.h:2028
        .def_readwrite("KeyMods", &ImGuiIO::KeyMods, "Key mods flags (same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags), updated by NewFrame()")    // imgui.h:2032
        .def_readwrite("WantCaptureMouseUnlessPopupClose", &ImGuiIO::WantCaptureMouseUnlessPopupClose, "Alternative to WantCaptureMouse: (WantCaptureMouse == True && WantCaptureMouseUnlessPopupClose == False) when a click over None is expected to close a popup.")    // imgui.h:2034
        .def_readwrite("MousePosPrev", &ImGuiIO::MousePosPrev, "Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)")    // imgui.h:2035
        .def_property("MouseClickedTime",    // imgui.h:2037
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<double>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(double)});
                return pybind11::array(dtype, {5}, {sizeof(double)}, self.MouseClickedTime, base);
            }, [](ImGuiIO& self) {},
            "Time of last click (used to figure out double-click)")
        .def_property("MouseClicked",    // imgui.h:2038
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<bool>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(bool)});
                return pybind11::array(dtype, {5}, {sizeof(bool)}, self.MouseClicked, base);
            }, [](ImGuiIO& self) {},
            "Mouse button went from !Down to Down (same as MouseClickedCount[x] != 0)")
        .def_property("MouseDoubleClicked",    // imgui.h:2039
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<bool>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(bool)});
                return pybind11::array(dtype, {5}, {sizeof(bool)}, self.MouseDoubleClicked, base);
            }, [](ImGuiIO& self) {},
            "Has mouse button been double-clicked? (same as MouseClickedCount[x] == 2)")
        .def_property("MouseClickedCount",    // imgui.h:2040
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<ImU16>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(ImU16)});
                return pybind11::array(dtype, {5}, {sizeof(ImU16)}, self.MouseClickedCount, base);
            }, [](ImGuiIO& self) {},
            "== 0 (not clicked), == 1 (same as MouseClicked[]), == 2 (double-clicked), == 3 (triple-clicked) etc. when going from !Down to Down")
        .def_property("MouseClickedLastCount",    // imgui.h:2041
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<ImU16>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(ImU16)});
                return pybind11::array(dtype, {5}, {sizeof(ImU16)}, self.MouseClickedLastCount, base);
            }, [](ImGuiIO& self) {},
            "Count successive number of clicks. Stays valid after mouse release. Reset after another click is done.")
        .def_property("MouseReleased",    // imgui.h:2042
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<bool>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(bool)});
                return pybind11::array(dtype, {5}, {sizeof(bool)}, self.MouseReleased, base);
            }, [](ImGuiIO& self) {},
            "Mouse button went from Down to !Down")
        .def_property("MouseDownOwned",    // imgui.h:2043
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<bool>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(bool)});
                return pybind11::array(dtype, {5}, {sizeof(bool)}, self.MouseDownOwned, base);
            }, [](ImGuiIO& self) {},
            "Track if button was clicked inside a dear imgui window or over None blocked by a popup. We don't request mouse capture from the application if click started outside ImGui bounds.")
        .def_property("MouseDownOwnedUnlessPopupClose",    // imgui.h:2044
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<bool>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(bool)});
                return pybind11::array(dtype, {5}, {sizeof(bool)}, self.MouseDownOwnedUnlessPopupClose, base);
            }, [](ImGuiIO& self) {},
            "Track if button was clicked inside a dear imgui window.")
        .def_property("MouseDownDuration",    // imgui.h:2045
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<float>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(float)});
                return pybind11::array(dtype, {5}, {sizeof(float)}, self.MouseDownDuration, base);
            }, [](ImGuiIO& self) {},
            "Duration the mouse button has been down (0.0 == just clicked)")
        .def_property("MouseDownDurationPrev",    // imgui.h:2046
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<float>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(float)});
                return pybind11::array(dtype, {5}, {sizeof(float)}, self.MouseDownDurationPrev, base);
            }, [](ImGuiIO& self) {},
            "Previous time the mouse button has been down")
        .def_property("MouseDragMaxDistanceSqr",    // imgui.h:2047
            [](ImGuiIO &self) -> pybind11::array
            {
                auto dtype = pybind11::dtype(pybind11::format_descriptor<float>::format());
                auto base = pybind11::array(dtype, {5}, {sizeof(float)});
                return pybind11::array(dtype, {5}, {sizeof(float)}, self.MouseDragMaxDistanceSqr, base);
            }, [](ImGuiIO& self) {},
            "Squared maximum distance of how much mouse has traveled from the clicking point (used for moving thresholds)")
        .def_readwrite("PenPressure", &ImGuiIO::PenPressure, "Touch/Pen pressure (0.0 to 1.0, should be >0.0 only when MouseDown[0] == True). Helper storage currently unused by Dear ImGui.")    // imgui.h:2050
        .def_readwrite("AppFocusLost", &ImGuiIO::AppFocusLost, "Only modify via AddFocusEvent()")    // imgui.h:2051
        .def_readwrite("AppAcceptingEvents", &ImGuiIO::AppAcceptingEvents, "Only modify via SetAppAcceptingEvents()")    // imgui.h:2052
        .def_readwrite("BackendUsingLegacyKeyArrays", &ImGuiIO::BackendUsingLegacyKeyArrays, "-1: unknown, 0: using AddKeyEvent(), 1: using legacy io.KeysDown[]")    // imgui.h:2053
        .def_readwrite("BackendUsingLegacyNavInputArray", &ImGuiIO::BackendUsingLegacyNavInputArray, "0: using AddKeyAnalogEvent(), 1: writing to legacy io.NavInputs[] directly")    // imgui.h:2054
        .def_readwrite("InputQueueSurrogate", &ImGuiIO::InputQueueSurrogate, "For AddInputCharacterUTF16()")    // imgui.h:2055
        .def_readwrite("InputQueueCharacters", &ImGuiIO::InputQueueCharacters, "Queue of _characters_ input (obtained by platform backend). Fill using AddInputCharacter() helper.")    // imgui.h:2056
        .def(py::init<>())    // imgui.h:2058
        ;


    auto pyClassImGuiInputTextCallbackData = py::class_<ImGuiInputTextCallbackData>    // imgui.h:2074
        (m, "ImGuiInputTextCallbackData", " Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback* flag is used.\n The callback function should return 0 by default.\n Callbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details)\n - ImGuiInputTextFlags_CallbackEdit:        Callback on buffer edit (note that InputText() already returns True on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)\n - ImGuiInputTextFlags_CallbackAlways:      Callback on each iteration\n - ImGuiInputTextFlags_CallbackCompletion:  Callback on pressing TAB\n - ImGuiInputTextFlags_CallbackHistory:     Callback on pressing Up/Down arrows\n - ImGuiInputTextFlags_CallbackCharFilter:  Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.\n - ImGuiInputTextFlags_CallbackResize:      Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow.")
        .def_readwrite("EventFlag", &ImGuiInputTextCallbackData::EventFlag, "One ImGuiInputTextFlags_Callback*    // Read-only")    // imgui.h:2076
        .def_readwrite("Flags", &ImGuiInputTextCallbackData::Flags, "What user passed to InputText()      // Read-only")    // imgui.h:2077
        .def_readwrite("UserData", &ImGuiInputTextCallbackData::UserData, "What user passed to InputText()      // Read-only")    // imgui.h:2078
        .def_readwrite("EventChar", &ImGuiInputTextCallbackData::EventChar, "Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;")    // imgui.h:2083
        .def_readwrite("EventKey", &ImGuiInputTextCallbackData::EventKey, "Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]")    // imgui.h:2084
        .def_readwrite("BufTextLen", &ImGuiInputTextCallbackData::BufTextLen, "Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()")    // imgui.h:2086
        .def_readwrite("BufSize", &ImGuiInputTextCallbackData::BufSize, "Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1")    // imgui.h:2087
        .def_readwrite("BufDirty", &ImGuiInputTextCallbackData::BufDirty, "Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]")    // imgui.h:2088
        .def_readwrite("CursorPos", &ImGuiInputTextCallbackData::CursorPos, "// Read-write   // [Completion,History,Always]")    // imgui.h:2089
        .def_readwrite("SelectionStart", &ImGuiInputTextCallbackData::SelectionStart, "// Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)")    // imgui.h:2090
        .def_readwrite("SelectionEnd", &ImGuiInputTextCallbackData::SelectionEnd, "// Read-write   // [Completion,History,Always]")    // imgui.h:2091
        .def(py::init<>())    // imgui.h:2095
        .def("DeleteChars",    // imgui.h:2096
            &ImGuiInputTextCallbackData::DeleteChars, py::arg("pos"), py::arg("bytes_count"))
        .def("InsertChars",    // imgui.h:2097
            &ImGuiInputTextCallbackData::InsertChars, py::arg("pos"), py::arg("text"), py::arg("text_end") = py::none())
        ;


    auto pyClassImGuiSizeCallbackData = py::class_<ImGuiSizeCallbackData>    // imgui.h:2105
        (m, "ImGuiSizeCallbackData", " Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().\n NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("UserData", &ImGuiSizeCallbackData::UserData, "Read-only.   What user passed to SetNextWindowSizeConstraints()")    // imgui.h:2107
        .def_readwrite("Pos", &ImGuiSizeCallbackData::Pos, "Read-only.   Window position, for reference.")    // imgui.h:2108
        .def_readwrite("CurrentSize", &ImGuiSizeCallbackData::CurrentSize, "Read-only.   Current window size.")    // imgui.h:2109
        .def_readwrite("DesiredSize", &ImGuiSizeCallbackData::DesiredSize, "Read-write.  Desired size, based on user's mouse position. Write to this field to restrain resizing.")    // imgui.h:2110
        ;


    auto pyClassImGuiPayload = py::class_<ImGuiPayload>    // imgui.h:2114
        (m, "ImGuiPayload", "Data payload for Drag and Drop operations: AcceptDragDropPayload(), GetDragDropPayload()")
        .def_readwrite("Data", &ImGuiPayload::Data, "Data (copied and owned by dear imgui)")    // imgui.h:2117
        .def_readwrite("DataSize", &ImGuiPayload::DataSize, "Data size")    // imgui.h:2118
        .def_readwrite("SourceId", &ImGuiPayload::SourceId, "Source item id")    // imgui.h:2121
        .def_readwrite("SourceParentId", &ImGuiPayload::SourceParentId, "Source parent id (if available)")    // imgui.h:2122
        .def_readwrite("DataFrameCount", &ImGuiPayload::DataFrameCount, "Data timestamp")    // imgui.h:2123
        .def_readwrite("Preview", &ImGuiPayload::Preview, "Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)")    // imgui.h:2125
        .def_readwrite("Delivery", &ImGuiPayload::Delivery, "Set when AcceptDragDropPayload() was called and mouse button is released over the target item.")    // imgui.h:2126
        .def(py::init<>())    // imgui.h:2128
        ;


    auto pyClassImGuiTableColumnSortSpecs = py::class_<ImGuiTableColumnSortSpecs>    // imgui.h:2136
        (m, "ImGuiTableColumnSortSpecs", "Sorting specification for one column of a table (sizeof == 12 bytes)")
        .def_readwrite("ColumnUserID", &ImGuiTableColumnSortSpecs::ColumnUserID, "User id of the column (if specified by a TableSetupColumn() call)")    // imgui.h:2138
        .def_readwrite("ColumnIndex", &ImGuiTableColumnSortSpecs::ColumnIndex, "Index of the column")    // imgui.h:2139
        .def_readwrite("SortOrder", &ImGuiTableColumnSortSpecs::SortOrder, "Index within parent ImGuiTableSortSpecs (always stored in order starting from 0, tables sorted on a single criteria will always have a 0 here)")    // imgui.h:2140
        .def(py::init<>())    // imgui.h:2143
        ;


    auto pyClassImGuiTableSortSpecs = py::class_<ImGuiTableSortSpecs>    // imgui.h:2150
        (m, "ImGuiTableSortSpecs", " Sorting specifications for a table (often handling sort specs for a single column, occasionally more)\n Obtained by calling TableGetSortSpecs().\n When 'SpecsDirty == True' you can sort your data. It will be True with sorting specs have changed since last call, or the first time.\n Make sure to set 'SpecsDirty = False' after sorting, else you may wastefully sort your data every frame!")
        .def_readonly("Specs", &ImGuiTableSortSpecs::Specs, "Pointer to sort spec array.")    // imgui.h:2152
        .def_readwrite("SpecsCount", &ImGuiTableSortSpecs::SpecsCount, "Sort spec count. Most often 1. May be > 1 when ImGuiTableFlags_SortMulti is enabled. May be == 0 when ImGuiTableFlags_SortTristate is enabled.")    // imgui.h:2153
        .def_readwrite("SpecsDirty", &ImGuiTableSortSpecs::SpecsDirty, "Set to True when specs have changed since last time! Use this to sort again, then clear the flag.")    // imgui.h:2154
        .def(py::init<>())    // imgui.h:2156
        ;


    auto pyClassImGuiOnceUponAFrame = py::class_<ImGuiOnceUponAFrame>    // imgui.h:2173
        (m, "ImGuiOnceUponAFrame", " Helper: Execute a block of code at maximum once a frame. Convenient if you want to quickly create an UI within deep-nested code that runs multiple times every frame.\n Usage: static ImGuiOnceUponAFrame oaf; if (oaf) ImGui::Text(\"This will be called only once per frame\");")
        .def(py::init<>())    // imgui.h:2175
        .def_readwrite("RefFrame", &ImGuiOnceUponAFrame::RefFrame, "")    // imgui.h:2176
        ;


    auto pyClassImGuiTextFilter = py::class_<ImGuiTextFilter>    // imgui.h:2181
        (m, "ImGuiTextFilter", "Helper: Parse and apply text filters. In format \"aaaaa[,bbbb][,ccccc]\"")
        .def(py::init<const char *>(),    // imgui.h:2183
            py::arg("default_filter") = "")
        .def("Draw",    // imgui.h:2184
            &ImGuiTextFilter::Draw,
            py::arg("label") = "Filter (inc,-exc)", py::arg("width") = 0.0f,
            "Helper calling InputText+Build")
        .def("PassFilter",    // imgui.h:2185
            &ImGuiTextFilter::PassFilter, py::arg("text"), py::arg("text_end") = py::none())
        .def("Build",    // imgui.h:2186
            &ImGuiTextFilter::Build)
        .def_readwrite("Filters", &ImGuiTextFilter::Filters, "")    // imgui.h:2202
        .def_readwrite("CountGrep", &ImGuiTextFilter::CountGrep, "")    // imgui.h:2203
        ;


    auto pyClassImGuiStorage = py::class_<ImGuiStorage>    // imgui.h:2235
        (m, "ImGuiStorage", " Helper: Key->Value storage\n Typically you don't have to worry about this since a storage is held within each Window.\n We use it to e.g. store collapse state for a tree (Int 0/1)\n This is optimized for efficient lookup (dichotomy into a contiguous buffer) and rare insertion (typically tied to user interactions aka max once a frame)\n You can use it as custom user storage for temporary values. Declare your own storage if, for example:\n - You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).\n - You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)\n Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("Data", &ImGuiStorage::Data, "")    // imgui.h:2247
        .def("GetInt",    // imgui.h:2253
            &ImGuiStorage::GetInt, py::arg("key"), py::arg("default_val") = 0)
        .def("SetInt",    // imgui.h:2254
            &ImGuiStorage::SetInt, py::arg("key"), py::arg("val"))
        .def("GetBool",    // imgui.h:2255
            &ImGuiStorage::GetBool, py::arg("key"), py::arg("default_val") = false)
        .def("SetBool",    // imgui.h:2256
            &ImGuiStorage::SetBool, py::arg("key"), py::arg("val"))
        .def("GetFloat",    // imgui.h:2257
            &ImGuiStorage::GetFloat, py::arg("key"), py::arg("default_val") = 0.0f)
        .def("SetFloat",    // imgui.h:2258
            &ImGuiStorage::SetFloat, py::arg("key"), py::arg("val"))
        .def("GetVoidPtr",    // imgui.h:2259
            &ImGuiStorage::GetVoidPtr,
            py::arg("key"),
            "default_val is None",
            pybind11::return_value_policy::reference)
        .def("SetVoidPtr",    // imgui.h:2260
            &ImGuiStorage::SetVoidPtr, py::arg("key"), py::arg("val"))
        .def("GetIntRef",    // imgui.h:2266
            &ImGuiStorage::GetIntRef,
            py::arg("key"), py::arg("default_val") = 0,
            pybind11::return_value_policy::reference)
        .def("GetBoolRef",    // imgui.h:2267
            &ImGuiStorage::GetBoolRef,
            py::arg("key"), py::arg("default_val") = false,
            pybind11::return_value_policy::reference)
        .def("GetFloatRef",    // imgui.h:2268
            &ImGuiStorage::GetFloatRef,
            py::arg("key"), py::arg("default_val") = 0.0f,
            pybind11::return_value_policy::reference)
        .def("GetVoidPtrRef",    // imgui.h:2269
            &ImGuiStorage::GetVoidPtrRef, py::arg("key"), py::arg("default_val") = py::none())
        .def("SetAllInt",    // imgui.h:2272
            &ImGuiStorage::SetAllInt,
            py::arg("val"),
            "Use on your own storage if you know only integer are being stored (open/close all tree nodes)")
        .def("BuildSortByKey",    // imgui.h:2275
            &ImGuiStorage::BuildSortByKey, "For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once.")
        ;


    auto pyClassImGuiListClipper = py::class_<ImGuiListClipper>    // imgui.h:2298
        (m, "ImGuiListClipper", " Helper: Manually clip large list of items.\n If you have lots evenly spaced items and you have a random access to the list, you can perform coarse\n clipping based on visibility to only submit items that are in view.\n The clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped.\n (Dear ImGui already clip items based on their bounds but: it needs to first layout the item to do so, and generally\n  fetching/submitting your own data incurs additional cost. Coarse clipping using ImGuiListClipper allows you to easily\n  scale using lists with tens of thousands of items without a problem)\n Usage:\n   ImGuiListClipper clipper;\n   clipper.Begin(1000);         // We have 1000 elements, evenly spaced.\n   while (clipper.Step())\n       for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)\n           ImGui::Text(\"line number %d\", i);\n Generally what happens is:\n - Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1) regardless of it being visible or not.\n - User code submit that one element.\n - Clipper can measure the height of the first element\n - Clipper calculate the actual range of elements to display based on the current clipping rectangle, position the cursor before the first visible element.\n - User code submit visible elements.\n - The clipper also handles various subtleties related to keyboard/gamepad navigation, wrapping etc.")
        .def_readwrite("DisplayStart", &ImGuiListClipper::DisplayStart, "First item to display, updated by each call to Step()")    // imgui.h:2300
        .def_readwrite("DisplayEnd", &ImGuiListClipper::DisplayEnd, "End of items to display (exclusive)")    // imgui.h:2301
        .def_readwrite("ItemsCount", &ImGuiListClipper::ItemsCount, "[Internal] Number of items")    // imgui.h:2302
        .def_readwrite("ItemsHeight", &ImGuiListClipper::ItemsHeight, "[Internal] Height of item after a first step and item submission can calculate it")    // imgui.h:2303
        .def_readwrite("StartPosY", &ImGuiListClipper::StartPosY, "[Internal] Cursor position at the time of Begin() or after table frozen rows are all processed")    // imgui.h:2304
        .def_readwrite("TempData", &ImGuiListClipper::TempData, "[Internal] Internal data")    // imgui.h:2305
        .def(py::init<>(),    // imgui.h:2309
            " items_count: Use INT_MAX if you don't know how many items you have (in which case the cursor won't be advanced in the final step)\n items_height: Use -1.0 to be calculated automatically on first step. Otherwise pass in the distance between your items, typically GetTextLineHeightWithSpacing() or GetFrameHeightWithSpacing().")
        .def("Begin",    // imgui.h:2311
            &ImGuiListClipper::Begin, py::arg("items_count"), py::arg("items_height") = -1.0f)
        .def("End",    // imgui.h:2312
            &ImGuiListClipper::End, "Automatically called on the last call of Step() that returns False.")
        .def("Step",    // imgui.h:2313
            &ImGuiListClipper::Step, "Call until it returns False. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.")
        .def("ForceDisplayRangeByIndices",    // imgui.h:2316
            &ImGuiListClipper::ForceDisplayRangeByIndices,
            py::arg("item_min"), py::arg("item_max"),
            "Call ForceDisplayRangeByIndices() before first call to Step() if you need a range of items to be displayed regardless of visibility.")
        ;


    auto pyClassImColor = py::class_<ImColor>    // imgui.h:2349
        (m, "ImColor", " Helper: ImColor() implicitly converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)\n Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.\n **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.\n **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.")
        .def_readwrite("Value", &ImColor::Value, "")    // imgui.h:2351
        .def(py::init<>())    // imgui.h:2353
        .def(py::init<float, float, float, float>(),    // imgui.h:2354
            py::arg("r"), py::arg("g"), py::arg("b"), py::arg("a") = 1.0f)
        .def(py::init<const ImVec4 &>(),    // imgui.h:2355
            py::arg("col"))
        .def(py::init<int, int, int, int>(),    // imgui.h:2356
            py::arg("r"), py::arg("g"), py::arg("b"), py::arg("a") = 255)
        .def(py::init<ImU32>(),    // imgui.h:2357
            py::arg("rgba"))
        ;


    auto pyClassImDrawCmd = py::class_<ImDrawCmd>    // imgui.h:2398
        (m, "ImDrawCmd", " Typically, 1 command = 1 GPU draw call (unless command is a callback)\n - VtxOffset: When 'io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset' is enabled,\n   this fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices.\n   Backends made for <1.71. will typically ignore the VtxOffset fields.\n - The ClipRect/TextureId/VtxOffset fields must be contiguous as we memcmp() them together (this is asserted for).")
        .def_readwrite("ClipRect", &ImDrawCmd::ClipRect, "4*4  // Clipping rectangle (x1, y1, x2, y2). Subtract ImDrawData->DisplayPos to get clipping rectangle in \"viewport\" coordinates")    // imgui.h:2400
        .def_readwrite("TextureId", &ImDrawCmd::TextureId, "4-8  // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.")    // imgui.h:2401
        .def_readwrite("VtxOffset", &ImDrawCmd::VtxOffset, "4    // Start offset in vertex buffer. ImGuiBackendFlags_RendererHasVtxOffset: always 0, otherwise may be >0 to support meshes larger than 64K vertices with 16-bit indices.")    // imgui.h:2402
        .def_readwrite("IdxOffset", &ImDrawCmd::IdxOffset, "4    // Start offset in index buffer.")    // imgui.h:2403
        .def_readwrite("ElemCount", &ImDrawCmd::ElemCount, "4    // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].")    // imgui.h:2404
        .def_readwrite("UserCallbackData", &ImDrawCmd::UserCallbackData, "4-8  // The draw callback code can access this.")    // imgui.h:2406
        .def(py::init<>(),    // imgui.h:2408
            "Also ensure our padding fields are zeroed")
        ;


    auto pyClassImDrawCmdHeader = py::class_<ImDrawCmdHeader>    // imgui.h:2431
        (m, "ImDrawCmdHeader", "[Internal] For use by ImDrawList")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("ClipRect", &ImDrawCmdHeader::ClipRect, "")    // imgui.h:2433
        .def_readwrite("TextureId", &ImDrawCmdHeader::TextureId, "")    // imgui.h:2434
        .def_readwrite("VtxOffset", &ImDrawCmdHeader::VtxOffset, "")    // imgui.h:2435
        ;


    auto pyClassImDrawChannel = py::class_<ImDrawChannel>    // imgui.h:2439
        (m, "ImDrawChannel", "[Internal] For use by ImDrawListSplitter")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("_CmdBuffer", &ImDrawChannel::_CmdBuffer, "")    // imgui.h:2441
        .def_readwrite("_IdxBuffer", &ImDrawChannel::_IdxBuffer, "")    // imgui.h:2442
        ;


    auto pyClassImDrawListSplitter = py::class_<ImDrawListSplitter>    // imgui.h:2448
        (m, "ImDrawListSplitter", " Split/Merge functions are used to split the draw list into different layers which can be drawn into out of order.\n This is used by the Columns/Tables API, so items of each column can be batched together in a same draw call.")
        .def_readwrite("_Current", &ImDrawListSplitter::_Current, "Current channel number (0)")    // imgui.h:2450
        .def_readwrite("_Count", &ImDrawListSplitter::_Count, "Number of active channels (1+)")    // imgui.h:2451
        .def_readwrite("_Channels", &ImDrawListSplitter::_Channels, "Draw channels (not resized down so _Count might be < Channels.Size)")    // imgui.h:2452
        .def(py::init<>())    // imgui.h:2454
        .def("ClearFreeMemory",    // imgui.h:2457
            &ImDrawListSplitter::ClearFreeMemory)
        .def("Split",    // imgui.h:2458
            &ImDrawListSplitter::Split, py::arg("draw_list"), py::arg("count"))
        .def("Merge",    // imgui.h:2459
            &ImDrawListSplitter::Merge, py::arg("draw_list"))
        .def("SetCurrentChannel",    // imgui.h:2460
            &ImDrawListSplitter::SetCurrentChannel, py::arg("draw_list"), py::arg("channel_idx"))
        ;


    py::enum_<ImDrawFlags_>(m, "ImDrawFlags_", py::arithmetic(), " Flags for ImDrawList functions\n (Legacy: bit 0 must always correspond to ImDrawFlags_Closed to be backward compatible with old API using a bool. Bits 1..3 must be unused)")    // imgui.h:2465
        .value("None_", ImDrawFlags_None, "")
        .value("Closed", ImDrawFlags_Closed, "PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)")
        .value("RoundCornersTopLeft", ImDrawFlags_RoundCornersTopLeft, "AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding > 0.0, we default to all corners). Was 0x01.")
        .value("RoundCornersTopRight", ImDrawFlags_RoundCornersTopRight, "AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding > 0.0, we default to all corners). Was 0x02.")
        .value("RoundCornersBottomLeft", ImDrawFlags_RoundCornersBottomLeft, "AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding > 0.0, we default to all corners). Was 0x04.")
        .value("RoundCornersBottomRight", ImDrawFlags_RoundCornersBottomRight, "AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding > 0.0, we default to all corners). Wax 0x08.")
        .value("RoundCornersNone", ImDrawFlags_RoundCornersNone, "AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding > 0.0). This is NOT zero, NOT an implicit flag!")
        .value("RoundCornersTop", ImDrawFlags_RoundCornersTop, "")
        .value("RoundCornersBottom", ImDrawFlags_RoundCornersBottom, "")
        .value("RoundCornersLeft", ImDrawFlags_RoundCornersLeft, "")
        .value("RoundCornersRight", ImDrawFlags_RoundCornersRight, "")
        .value("RoundCornersAll", ImDrawFlags_RoundCornersAll, "")
        .value("RoundCornersDefault_", ImDrawFlags_RoundCornersDefault_, "Default to ALL corners if none of the _RoundCornersXX flags are specified.")
        .value("RoundCornersMask_", ImDrawFlags_RoundCornersMask_, "");


    py::enum_<ImDrawListFlags_>(m, "ImDrawListFlags_", py::arithmetic(), " Flags for ImDrawList instance. Those are set automatically by ImGui:: functions from ImGuiIO settings, and generally not manipulated directly.\n It is however possible to temporarily alter flags between calls to ImDrawList:: functions.")    // imgui.h:2485
        .value("None_", ImDrawListFlags_None, "")
        .value("AntiAliasedLines", ImDrawListFlags_AntiAliasedLines, "Enable anti-aliased lines/borders (*2 the number of triangles for 1.0 wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles)")
        .value("AntiAliasedLinesUseTex", ImDrawListFlags_AntiAliasedLinesUseTex, "Enable anti-aliased lines/borders using textures when possible. Require backend to render with bilinear filtering (NOT point/nearest filtering).")
        .value("AntiAliasedFill", ImDrawListFlags_AntiAliasedFill, "Enable anti-aliased edge around filled shapes (rounded rectangles, circles).")
        .value("AllowVtxOffset", ImDrawListFlags_AllowVtxOffset, "Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.");


    auto pyClassImDrawList = py::class_<ImDrawList>    // imgui.h:2503
        (m, "ImDrawList", " Draw command list\n This is the low-level list of polygons that ImGui:: functions are filling. At the end of the frame,\n all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.\n Each dear imgui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to\n access the current window draw list and draw custom primitives.\n You can interleave normal ImGui:: calls and adding primitives to the current draw list.\n In single viewport mode, top-left is == GetMainViewport()->Pos (generally 0,0), bottom-right is == GetMainViewport()->Pos+Size (generally io.DisplaySize).\n You are totally free to apply whatever transformation matrix to want to the data (depending on the use of the transformation you may want to apply it to ClipRect as well!)\n Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.")
        .def_readwrite("CmdBuffer", &ImDrawList::CmdBuffer, "Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.")    // imgui.h:2506
        .def_readwrite("IdxBuffer", &ImDrawList::IdxBuffer, "Index buffer. Each command consume ImDrawCmd::ElemCount of those")    // imgui.h:2507
        .def_readwrite("VtxBuffer", &ImDrawList::VtxBuffer, "Vertex buffer.")    // imgui.h:2508
        .def_readwrite("Flags", &ImDrawList::Flags, "Flags, you may poke into these to adjust anti-aliasing settings per-primitive.")    // imgui.h:2509
        .def_readwrite("_VtxCurrentIdx", &ImDrawList::_VtxCurrentIdx, "[Internal] generally == VtxBuffer.Size unless we are past 64K vertices, in which case this gets reset to 0.")    // imgui.h:2512
        .def_readonly("_Data", &ImDrawList::_Data, "Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)")    // imgui.h:2513
        .def_readonly("_OwnerName", &ImDrawList::_OwnerName, "Pointer to owner window's name for debugging")    // imgui.h:2514
        .def_readwrite("_VtxWritePtr", &ImDrawList::_VtxWritePtr, "[Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)")    // imgui.h:2515
        .def_readwrite("_IdxWritePtr", &ImDrawList::_IdxWritePtr, "[Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)")    // imgui.h:2516
        .def_readwrite("_ClipRectStack", &ImDrawList::_ClipRectStack, "[Internal]")    // imgui.h:2517
        .def_readwrite("_TextureIdStack", &ImDrawList::_TextureIdStack, "[Internal]")    // imgui.h:2518
        .def_readwrite("_Path", &ImDrawList::_Path, "[Internal] current path building")    // imgui.h:2519
        .def_readwrite("_CmdHeader", &ImDrawList::_CmdHeader, "[Internal] template of active commands. Fields should match those of CmdBuffer.back().")    // imgui.h:2520
        .def_readwrite("_Splitter", &ImDrawList::_Splitter, "[Internal] for channels api (note: prefer using your own persistent instance of ImDrawListSplitter!)")    // imgui.h:2521
        .def_readwrite("_FringeScale", &ImDrawList::_FringeScale, "[Internal] anti-alias fringe is scaled by this value, this helps to keep things sharp while zooming at vertex buffer content")    // imgui.h:2522
        .def(py::init<const ImDrawListSharedData *>(),    // imgui.h:2525
            py::arg("shared_data"),
            "If you want to create ImDrawList instances, pass them ImGui::GetDrawListSharedData() or create and use your own ImDrawListSharedData (so you can use ImDrawList without ImGui)")
        .def("PushClipRect",    // imgui.h:2528
            &ImDrawList::PushClipRect,
            py::arg("clip_rect_min"), py::arg("clip_rect_max"), py::arg("intersect_with_current_clip_rect") = false,
            "Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)")
        .def("PushClipRectFullScreen",    // imgui.h:2529
            &ImDrawList::PushClipRectFullScreen)
        .def("PopClipRect",    // imgui.h:2530
            &ImDrawList::PopClipRect)
        .def("PushTextureID",    // imgui.h:2531
            &ImDrawList::PushTextureID, py::arg("texture_id"))
        .def("PopTextureID",    // imgui.h:2532
            &ImDrawList::PopTextureID)
        .def("AddLine",    // imgui.h:2543
            &ImDrawList::AddLine, py::arg("p1"), py::arg("p2"), py::arg("col"), py::arg("thickness") = 1.0f)
        .def("AddRect",    // imgui.h:2544
            &ImDrawList::AddRect,
            py::arg("p_min"), py::arg("p_max"), py::arg("col"), py::arg("rounding") = 0.0f, py::arg("flags") = 0, py::arg("thickness") = 1.0f,
            "a: upper-left, b: lower-right (== upper-left + size)")
        .def("AddRectFilled",    // imgui.h:2545
            &ImDrawList::AddRectFilled,
            py::arg("p_min"), py::arg("p_max"), py::arg("col"), py::arg("rounding") = 0.0f, py::arg("flags") = 0,
            "a: upper-left, b: lower-right (== upper-left + size)")
        .def("AddRectFilledMultiColor",    // imgui.h:2546
            &ImDrawList::AddRectFilledMultiColor, py::arg("p_min"), py::arg("p_max"), py::arg("col_upr_left"), py::arg("col_upr_right"), py::arg("col_bot_right"), py::arg("col_bot_left"))
        .def("AddQuad",    // imgui.h:2547
            &ImDrawList::AddQuad, py::arg("p1"), py::arg("p2"), py::arg("p3"), py::arg("p4"), py::arg("col"), py::arg("thickness") = 1.0f)
        .def("AddQuadFilled",    // imgui.h:2548
            &ImDrawList::AddQuadFilled, py::arg("p1"), py::arg("p2"), py::arg("p3"), py::arg("p4"), py::arg("col"))
        .def("AddTriangle",    // imgui.h:2549
            &ImDrawList::AddTriangle, py::arg("p1"), py::arg("p2"), py::arg("p3"), py::arg("col"), py::arg("thickness") = 1.0f)
        .def("AddTriangleFilled",    // imgui.h:2550
            &ImDrawList::AddTriangleFilled, py::arg("p1"), py::arg("p2"), py::arg("p3"), py::arg("col"))
        .def("AddCircle",    // imgui.h:2551
            &ImDrawList::AddCircle, py::arg("center"), py::arg("radius"), py::arg("col"), py::arg("num_segments") = 0, py::arg("thickness") = 1.0f)
        .def("AddCircleFilled",    // imgui.h:2552
            &ImDrawList::AddCircleFilled, py::arg("center"), py::arg("radius"), py::arg("col"), py::arg("num_segments") = 0)
        .def("AddNgon",    // imgui.h:2553
            &ImDrawList::AddNgon, py::arg("center"), py::arg("radius"), py::arg("col"), py::arg("num_segments"), py::arg("thickness") = 1.0f)
        .def("AddNgonFilled",    // imgui.h:2554
            &ImDrawList::AddNgonFilled, py::arg("center"), py::arg("radius"), py::arg("col"), py::arg("num_segments"))
        .def("AddText",    // imgui.h:2555
            py::overload_cast<const ImVec2 &, ImU32, const char *, const char *>(&ImDrawList::AddText), py::arg("pos"), py::arg("col"), py::arg("text_begin"), py::arg("text_end") = py::none())
        .def("AddText",    // imgui.h:2556
            py::overload_cast<const ImFont *, float, const ImVec2 &, ImU32, const char *, const char *, float, const ImVec4 *>(&ImDrawList::AddText), py::arg("font"), py::arg("font_size"), py::arg("pos"), py::arg("col"), py::arg("text_begin"), py::arg("text_end") = py::none(), py::arg("wrap_width") = 0.0f, py::arg("cpu_fine_clip_rect") = py::none())
        .def("AddPolyline",    // imgui.h:2557
            &ImDrawList::AddPolyline, py::arg("points"), py::arg("num_points"), py::arg("col"), py::arg("flags"), py::arg("thickness"))
        .def("AddConvexPolyFilled",    // imgui.h:2558
            &ImDrawList::AddConvexPolyFilled, py::arg("points"), py::arg("num_points"), py::arg("col"))
        .def("AddBezierCubic",    // imgui.h:2559
            &ImDrawList::AddBezierCubic,
            py::arg("p1"), py::arg("p2"), py::arg("p3"), py::arg("p4"), py::arg("col"), py::arg("thickness"), py::arg("num_segments") = 0,
            "Cubic Bezier (4 control points)")
        .def("AddBezierQuadratic",    // imgui.h:2560
            &ImDrawList::AddBezierQuadratic,
            py::arg("p1"), py::arg("p2"), py::arg("p3"), py::arg("col"), py::arg("thickness"), py::arg("num_segments") = 0,
            "Quadratic Bezier (3 control points)")
        .def("AddImage",    // imgui.h:2566
            &ImDrawList::AddImage, py::arg("user_texture_id"), py::arg("p_min"), py::arg("p_max"), py::arg("uv_min") = ImVec2(0, 0), py::arg("uv_max") = ImVec2(1, 1), py::arg("col") = IM_COL32_WHITE)
        .def("AddImageQuad",    // imgui.h:2567
            &ImDrawList::AddImageQuad, py::arg("user_texture_id"), py::arg("p1"), py::arg("p2"), py::arg("p3"), py::arg("p4"), py::arg("uv1") = ImVec2(0, 0), py::arg("uv2") = ImVec2(1, 0), py::arg("uv3") = ImVec2(1, 1), py::arg("uv4") = ImVec2(0, 1), py::arg("col") = IM_COL32_WHITE)
        .def("AddImageRounded",    // imgui.h:2568
            &ImDrawList::AddImageRounded, py::arg("user_texture_id"), py::arg("p_min"), py::arg("p_max"), py::arg("uv_min"), py::arg("uv_max"), py::arg("col"), py::arg("rounding"), py::arg("flags") = 0)
        .def("PathArcTo",    // imgui.h:2577
            &ImDrawList::PathArcTo, py::arg("center"), py::arg("radius"), py::arg("a_min"), py::arg("a_max"), py::arg("num_segments") = 0)
        .def("PathArcToFast",    // imgui.h:2578
            &ImDrawList::PathArcToFast,
            py::arg("center"), py::arg("radius"), py::arg("a_min_of_12"), py::arg("a_max_of_12"),
            "Use precomputed angles for a 12 steps circle")
        .def("PathBezierCubicCurveTo",    // imgui.h:2579
            &ImDrawList::PathBezierCubicCurveTo,
            py::arg("p2"), py::arg("p3"), py::arg("p4"), py::arg("num_segments") = 0,
            "Cubic Bezier (4 control points)")
        .def("PathBezierQuadraticCurveTo",    // imgui.h:2580
            &ImDrawList::PathBezierQuadraticCurveTo,
            py::arg("p2"), py::arg("p3"), py::arg("num_segments") = 0,
            "Quadratic Bezier (3 control points)")
        .def("PathRect",    // imgui.h:2581
            &ImDrawList::PathRect, py::arg("rect_min"), py::arg("rect_max"), py::arg("rounding") = 0.0f, py::arg("flags") = 0)
        .def("AddCallback",    // imgui.h:2584
            &ImDrawList::AddCallback,
            py::arg("callback"), py::arg("callback_data"),
            "Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.")
        .def("AddDrawCmd",    // imgui.h:2585
            &ImDrawList::AddDrawCmd, "This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible")
        .def("CloneOutput",    // imgui.h:2586
            &ImDrawList::CloneOutput,
            "Create a clone of the CmdBuffer/IdxBuffer/VtxBuffer.",
            pybind11::return_value_policy::reference)
        .def("PrimReserve",    // imgui.h:2601
            &ImDrawList::PrimReserve, py::arg("idx_count"), py::arg("vtx_count"))
        .def("PrimUnreserve",    // imgui.h:2602
            &ImDrawList::PrimUnreserve, py::arg("idx_count"), py::arg("vtx_count"))
        .def("PrimRect",    // imgui.h:2603
            &ImDrawList::PrimRect,
            py::arg("a"), py::arg("b"), py::arg("col"),
            "Axis aligned rectangle (composed of two triangles)")
        .def("_ResetForNewFrame",    // imgui.h:2616
            &ImDrawList::_ResetForNewFrame)
        .def("_ClearFreeMemory",    // imgui.h:2617
            &ImDrawList::_ClearFreeMemory)
        .def("_PopUnusedDrawCmd",    // imgui.h:2618
            &ImDrawList::_PopUnusedDrawCmd)
        .def("_TryMergeDrawCmds",    // imgui.h:2619
            &ImDrawList::_TryMergeDrawCmds)
        .def("_OnChangedClipRect",    // imgui.h:2620
            &ImDrawList::_OnChangedClipRect)
        .def("_OnChangedTextureID",    // imgui.h:2621
            &ImDrawList::_OnChangedTextureID)
        .def("_OnChangedVtxOffset",    // imgui.h:2622
            &ImDrawList::_OnChangedVtxOffset)
        .def("_CalcCircleAutoSegmentCount",    // imgui.h:2623
            &ImDrawList::_CalcCircleAutoSegmentCount, py::arg("radius"))
        .def("_PathArcToFastEx",    // imgui.h:2624
            &ImDrawList::_PathArcToFastEx, py::arg("center"), py::arg("radius"), py::arg("a_min_sample"), py::arg("a_max_sample"), py::arg("a_step"))
        .def("_PathArcToN",    // imgui.h:2625
            &ImDrawList::_PathArcToN, py::arg("center"), py::arg("radius"), py::arg("a_min"), py::arg("a_max"), py::arg("num_segments"))
        ;


    auto pyClassImDrawData = py::class_<ImDrawData>    // imgui.h:2631
        (m, "ImDrawData", " All draw data to render a Dear ImGui frame\n (NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,\n as this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList)")
        .def_readwrite("Valid", &ImDrawData::Valid, "Only valid after Render() is called and before the next NewFrame() is called.")    // imgui.h:2633
        .def_readwrite("CmdListsCount", &ImDrawData::CmdListsCount, "Number of ImDrawList* to render")    // imgui.h:2634
        .def_readwrite("TotalIdxCount", &ImDrawData::TotalIdxCount, "For convenience, sum of all ImDrawList's IdxBuffer.Size")    // imgui.h:2635
        .def_readwrite("TotalVtxCount", &ImDrawData::TotalVtxCount, "For convenience, sum of all ImDrawList's VtxBuffer.Size")    // imgui.h:2636
        .def_readwrite("DisplayPos", &ImDrawData::DisplayPos, "Top-left position of the viewport to render (== top-left of the orthogonal projection matrix to use) (== GetMainViewport()->Pos for the main viewport, == (0.0) in most single-viewport applications)")    // imgui.h:2638
        .def_readwrite("DisplaySize", &ImDrawData::DisplaySize, "Size of the viewport to render (== GetMainViewport()->Size for the main viewport, == io.DisplaySize in most single-viewport applications)")    // imgui.h:2639
        .def_readwrite("FramebufferScale", &ImDrawData::FramebufferScale, "Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.")    // imgui.h:2640
        .def(py::init<>(),    // imgui.h:2643
            "Functions")
        .def("DeIndexAllBuffers",    // imgui.h:2645
            &ImDrawData::DeIndexAllBuffers, "Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!")
        .def("ScaleClipRects",    // imgui.h:2646
            &ImDrawData::ScaleClipRects,
            py::arg("fb_scale"),
            "Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.")
        ;


    auto pyClassImFontConfig = py::class_<ImFontConfig>    // imgui.h:2653
        (m, "ImFontConfig", "")
        .def_readwrite("FontData", &ImFontConfig::FontData, "// TTF/OTF data")    // imgui.h:2655
        .def_readwrite("FontDataSize", &ImFontConfig::FontDataSize, "// TTF/OTF data size")    // imgui.h:2656
        .def_readwrite("FontDataOwnedByAtlas", &ImFontConfig::FontDataOwnedByAtlas, "True     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).")    // imgui.h:2657
        .def_readwrite("FontNo", &ImFontConfig::FontNo, "0        // Index of font within TTF/OTF file")    // imgui.h:2658
        .def_readwrite("SizePixels", &ImFontConfig::SizePixels, "// Size in pixels for rasterizer (more or less maps to the resulting font height).")    // imgui.h:2659
        .def_readwrite("OversampleH", &ImFontConfig::OversampleH, "3        // Rasterize at higher quality for sub-pixel positioning. Note the difference between 2 and 3 is minimal so you can reduce this to 2 to save memory. Read https://github.com/nothings/stb/blob/master/tests/oversample/README.md for details.")    // imgui.h:2660
        .def_readwrite("OversampleV", &ImFontConfig::OversampleV, "1        // Rasterize at higher quality for sub-pixel positioning. This is not really useful as we don't use sub-pixel positions on the Y axis.")    // imgui.h:2661
        .def_readwrite("PixelSnapH", &ImFontConfig::PixelSnapH, "False    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.")    // imgui.h:2662
        .def_readwrite("GlyphExtraSpacing", &ImFontConfig::GlyphExtraSpacing, "0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.")    // imgui.h:2663
        .def_readwrite("GlyphOffset", &ImFontConfig::GlyphOffset, "0, 0     // Offset all glyphs from this font input.")    // imgui.h:2664
        .def_readwrite("GlyphMinAdvanceX", &ImFontConfig::GlyphMinAdvanceX, "0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font")    // imgui.h:2666
        .def_readwrite("GlyphMaxAdvanceX", &ImFontConfig::GlyphMaxAdvanceX, "FLT_MAX  // Maximum AdvanceX for glyphs")    // imgui.h:2667
        .def_readwrite("MergeMode", &ImFontConfig::MergeMode, "False    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.")    // imgui.h:2668
        .def_readwrite("FontBuilderFlags", &ImFontConfig::FontBuilderFlags, "0        // Settings for custom font builder. THIS IS BUILDER IMPLEMENTATION DEPENDENT. Leave as zero if unsure.")    // imgui.h:2669
        .def_readwrite("RasterizerMultiply", &ImFontConfig::RasterizerMultiply, "1.0     // Brighten (>1.0) or darken (<1.0) font output. Brightening small fonts may be a good workaround to make them more readable.")    // imgui.h:2670
        .def_readwrite("EllipsisChar", &ImFontConfig::EllipsisChar, "-1       // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.")    // imgui.h:2671
        .def_readwrite("DstFont", &ImFontConfig::DstFont, "")    // imgui.h:2675
        .def(py::init<>())    // imgui.h:2677
        ;


    auto pyClassImFontGlyph = py::class_<ImFontGlyph>    // imgui.h:2682
        (m, "ImFontGlyph", " Hold rendering data for one glyph.\n (Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this)")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("AdvanceX", &ImFontGlyph::AdvanceX, "Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)")    // imgui.h:2687
        .def_readwrite("X0", &ImFontGlyph::X0, "Glyph corners")    // imgui.h:2688
        .def_readwrite("Y0", &ImFontGlyph::Y0, "Glyph corners")    // imgui.h:2688
        .def_readwrite("X1", &ImFontGlyph::X1, "Glyph corners")    // imgui.h:2688
        .def_readwrite("Y1", &ImFontGlyph::Y1, "Glyph corners")    // imgui.h:2688
        .def_readwrite("U0", &ImFontGlyph::U0, "Texture coordinates")    // imgui.h:2689
        .def_readwrite("V0", &ImFontGlyph::V0, "Texture coordinates")    // imgui.h:2689
        .def_readwrite("U1", &ImFontGlyph::U1, "Texture coordinates")    // imgui.h:2689
        .def_readwrite("V1", &ImFontGlyph::V1, "Texture coordinates")    // imgui.h:2689
        ;


    auto pyClassImFontGlyphRangesBuilder = py::class_<ImFontGlyphRangesBuilder>    // imgui.h:2694
        (m, "ImFontGlyphRangesBuilder", " Helper to build glyph ranges from text/string data. Feed your application strings/characters to it then call BuildRanges().\n This is essentially a tightly packed of vector of 64k booleans = 8KB storage.")
        .def_readwrite("UsedChars", &ImFontGlyphRangesBuilder::UsedChars, "Store 1-bit per Unicode code point (0=unused, 1=used)")    // imgui.h:2696
        .def(py::init<>())    // imgui.h:2698
        .def("AddText",    // imgui.h:2703
            &ImFontGlyphRangesBuilder::AddText,
            py::arg("text"), py::arg("text_end") = py::none(),
            "Add string (each character of the UTF-8 string are added)")
        .def("AddRanges",    // imgui.h:2704
            &ImFontGlyphRangesBuilder::AddRanges,
            py::arg("ranges"),
            "Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCII/Latin+Ext")
        .def("BuildRanges",    // imgui.h:2705
            &ImFontGlyphRangesBuilder::BuildRanges,
            py::arg("out_ranges"),
            "Output new ranges")
        ;


    auto pyClassImFontAtlasCustomRect = py::class_<ImFontAtlasCustomRect>    // imgui.h:2709
        (m, "ImFontAtlasCustomRect", "See ImFontAtlas::AddCustomRectXXX functions.")
        .def_readwrite("Width", &ImFontAtlasCustomRect::Width, "Input    // Desired rectangle dimension")    // imgui.h:2711
        .def_readwrite("Height", &ImFontAtlasCustomRect::Height, "Input    // Desired rectangle dimension")    // imgui.h:2711
        .def_readwrite("X", &ImFontAtlasCustomRect::X, "Output   // Packed position in Atlas")    // imgui.h:2712
        .def_readwrite("Y", &ImFontAtlasCustomRect::Y, "Output   // Packed position in Atlas")    // imgui.h:2712
        .def_readwrite("GlyphID", &ImFontAtlasCustomRect::GlyphID, "Input    // For custom font glyphs only (ID < 0x110000)")    // imgui.h:2713
        .def_readwrite("GlyphAdvanceX", &ImFontAtlasCustomRect::GlyphAdvanceX, "Input    // For custom font glyphs only: glyph xadvance")    // imgui.h:2714
        .def_readwrite("GlyphOffset", &ImFontAtlasCustomRect::GlyphOffset, "Input    // For custom font glyphs only: glyph display offset")    // imgui.h:2715
        .def_readwrite("Font", &ImFontAtlasCustomRect::Font, "Input    // For custom font glyphs only: target font")    // imgui.h:2716
        .def(py::init<>())    // imgui.h:2717
        ;


    py::enum_<ImFontAtlasFlags_>(m, "ImFontAtlasFlags_", py::arithmetic(), "Flags for ImFontAtlas build")    // imgui.h:2722
        .value("None_", ImFontAtlasFlags_None, "")
        .value("NoPowerOfTwoHeight", ImFontAtlasFlags_NoPowerOfTwoHeight, "Don't round the height to next power of two")
        .value("NoMouseCursors", ImFontAtlasFlags_NoMouseCursors, "Don't build software mouse cursors into the atlas (save a little texture memory)")
        .value("NoBakedLines", ImFontAtlasFlags_NoBakedLines, "Don't build thick line textures into the atlas (save a little texture memory, allow support for point/nearest filtering). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU).");


    auto pyClassImFontAtlas = py::class_<ImFontAtlas>    // imgui.h:2747
        (m, "ImFontAtlas", " Load and rasterize multiple TTF/OTF fonts into a same texture. The font atlas will build a single texture holding:\n  - One or more fonts.\n  - Custom graphics data needed to render the shapes needed by Dear ImGui.\n  - Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas).\n It is the user-code responsibility to setup/build the atlas, then upload the pixel data into a texture accessible by your graphics api.\n  - Optionally, call any of the AddFont*** functions. If you don't call any, the default font embedded in the code will be loaded for you.\n  - Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.\n  - Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples)\n  - Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture in a format natural to your graphics API.\n    This value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details.\n Common pitfalls:\n - If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the\n   atlas is build (when calling GetTexData*** or Build()). We only copy the pointer, not the data.\n - Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction.\n   You can set font_cfg->FontDataOwnedByAtlas=False to keep ownership of your data and it won't be freed,\n - Even though many functions are suffixed with \"TTF\", OTF data is supported just as well.\n - This is an old API and it is currently awkward for those and and various other reasons! We will address them in the future!")
        .def(py::init<>())    // imgui.h:2749
        .def("AddFont",    // imgui.h:2751
            &ImFontAtlas::AddFont,
            py::arg("font_cfg"),
            pybind11::return_value_policy::reference)
        .def("AddFontDefault",    // imgui.h:2752
            &ImFontAtlas::AddFontDefault,
            py::arg("font_cfg") = py::none(),
            pybind11::return_value_policy::reference)
        .def("AddFontFromFileTTF",    // imgui.h:2753
            &ImFontAtlas::AddFontFromFileTTF,
            py::arg("filename"), py::arg("size_pixels"), py::arg("font_cfg") = py::none(), py::arg("glyph_ranges") = py::none(),
            pybind11::return_value_policy::reference)
        .def("AddFontFromMemoryTTF",    // imgui.h:2754
            &ImFontAtlas::AddFontFromMemoryTTF,
            py::arg("font_data"), py::arg("font_size"), py::arg("size_pixels"), py::arg("font_cfg") = py::none(), py::arg("glyph_ranges") = py::none(),
            "Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=False to keep ownership of your data and it won't be freed.",
            pybind11::return_value_policy::reference)
        .def("AddFontFromMemoryCompressedTTF",    // imgui.h:2755
            &ImFontAtlas::AddFontFromMemoryCompressedTTF,
            py::arg("compressed_font_data"), py::arg("compressed_font_size"), py::arg("size_pixels"), py::arg("font_cfg") = py::none(), py::arg("glyph_ranges") = py::none(),
            "'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.",
            pybind11::return_value_policy::reference)
        .def("AddFontFromMemoryCompressedBase85TTF",    // imgui.h:2756
            &ImFontAtlas::AddFontFromMemoryCompressedBase85TTF,
            py::arg("compressed_font_data_base85"), py::arg("size_pixels"), py::arg("font_cfg") = py::none(), py::arg("glyph_ranges") = py::none(),
            "'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.",
            pybind11::return_value_policy::reference)
        .def("ClearInputData",    // imgui.h:2757
            &ImFontAtlas::ClearInputData, "Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.")
        .def("ClearTexData",    // imgui.h:2758
            &ImFontAtlas::ClearTexData, "Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.")
        .def("ClearFonts",    // imgui.h:2759
            &ImFontAtlas::ClearFonts, "Clear output font data (glyphs storage, UV coordinates).")
        .def("Clear",    // imgui.h:2760
            &ImFontAtlas::Clear, "Clear all input and output.")
        .def("Build",    // imgui.h:2767
            &ImFontAtlas::Build, "Build pixels data. This is called automatically for you by the GetTexData*** functions.")
        .def("GetGlyphRangesDefault",    // imgui.h:2780
            &ImFontAtlas::GetGlyphRangesDefault,
            "Basic Latin, Extended Latin",
            pybind11::return_value_policy::reference)
        .def("GetGlyphRangesKorean",    // imgui.h:2781
            &ImFontAtlas::GetGlyphRangesKorean,
            "Default + Korean characters",
            pybind11::return_value_policy::reference)
        .def("GetGlyphRangesJapanese",    // imgui.h:2782
            &ImFontAtlas::GetGlyphRangesJapanese,
            "Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs",
            pybind11::return_value_policy::reference)
        .def("GetGlyphRangesChineseFull",    // imgui.h:2783
            &ImFontAtlas::GetGlyphRangesChineseFull,
            "Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs",
            pybind11::return_value_policy::reference)
        .def("GetGlyphRangesChineseSimplifiedCommon",    // imgui.h:2784
            &ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon,
            "Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese",
            pybind11::return_value_policy::reference)
        .def("GetGlyphRangesCyrillic",    // imgui.h:2785
            &ImFontAtlas::GetGlyphRangesCyrillic,
            "Default + about 400 Cyrillic characters",
            pybind11::return_value_policy::reference)
        .def("GetGlyphRangesThai",    // imgui.h:2786
            &ImFontAtlas::GetGlyphRangesThai,
            "Default + Thai characters",
            pybind11::return_value_policy::reference)
        .def("GetGlyphRangesVietnamese",    // imgui.h:2787
            &ImFontAtlas::GetGlyphRangesVietnamese,
            "Default + Vietnamese characters",
            pybind11::return_value_policy::reference)
        .def("AddCustomRectRegular",    // imgui.h:2800
            &ImFontAtlas::AddCustomRectRegular, py::arg("width"), py::arg("height"))
        .def("AddCustomRectFontGlyph",    // imgui.h:2801
            &ImFontAtlas::AddCustomRectFontGlyph, py::arg("font"), py::arg("id"), py::arg("width"), py::arg("height"), py::arg("advance_x"), py::arg("offset") = ImVec2(0, 0))
        .def("GetMouseCursorTexData",    // imgui.h:2806
            [](ImFontAtlas & self, ImGuiMouseCursor cursor, ImVec2 * out_offset, ImVec2 * out_size, ImVec2 & out_uv_border_0, ImVec2 & out_uv_border_1, ImVec2 & out_uv_fill_0, ImVec2 & out_uv_fill_1) -> bool
            {
                auto GetMouseCursorTexData_adapt_fixed_size_c_arrays = [&self](ImGuiMouseCursor cursor, ImVec2 * out_offset, ImVec2 * out_size, ImVec2 & out_uv_border_0, ImVec2 & out_uv_border_1, ImVec2 & out_uv_fill_0, ImVec2 & out_uv_fill_1) -> bool
                {
                    ImVec2 out_uv_border_raw[2];
                    out_uv_border_raw[0] = out_uv_border_0;
                    out_uv_border_raw[1] = out_uv_border_1;
                    ImVec2 out_uv_fill_raw[2];
                    out_uv_fill_raw[0] = out_uv_fill_0;
                    out_uv_fill_raw[1] = out_uv_fill_1;

                    auto r = self.GetMouseCursorTexData(cursor, out_offset, out_size, out_uv_border_raw, out_uv_fill_raw);

                    out_uv_border_0 = out_uv_border_raw[0];
                    out_uv_border_1 = out_uv_border_raw[1];
                    out_uv_fill_0 = out_uv_fill_raw[0];
                    out_uv_fill_1 = out_uv_fill_raw[1];
                    return r;
                };

                return GetMouseCursorTexData_adapt_fixed_size_c_arrays(cursor, out_offset, out_size, out_uv_border_0, out_uv_border_1, out_uv_fill_0, out_uv_fill_1);
            },     py::arg("cursor"), py::arg("out_offset"), py::arg("out_size"), py::arg("out_uv_border_0"), py::arg("out_uv_border_1"), py::arg("out_uv_fill_0"), py::arg("out_uv_fill_1"))
        .def_readwrite("Flags", &ImFontAtlas::Flags, "Build flags (see ImFontAtlasFlags_)")    // imgui.h:2812
        .def_readwrite("TexID", &ImFontAtlas::TexID, "User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.")    // imgui.h:2813
        .def_readwrite("TexDesiredWidth", &ImFontAtlas::TexDesiredWidth, "Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.")    // imgui.h:2814
        .def_readwrite("TexGlyphPadding", &ImFontAtlas::TexGlyphPadding, "Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0 (will also need to set AntiAliasedLinesUseTex = False).")    // imgui.h:2815
        .def_readwrite("Locked", &ImFontAtlas::Locked, "Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.")    // imgui.h:2816
        .def_readwrite("TexReady", &ImFontAtlas::TexReady, "Set when texture was built matching current font input")    // imgui.h:2820
        .def_readwrite("TexPixelsUseColors", &ImFontAtlas::TexPixelsUseColors, "Tell whether our texture data is known to use colors (rather than just alpha channel), in order to help backend select a format.")    // imgui.h:2821
        .def_readwrite("TexWidth", &ImFontAtlas::TexWidth, "Texture width calculated during Build().")    // imgui.h:2824
        .def_readwrite("TexHeight", &ImFontAtlas::TexHeight, "Texture height calculated during Build().")    // imgui.h:2825
        .def_readwrite("TexUvScale", &ImFontAtlas::TexUvScale, "= (1.0/TexWidth, 1.0/TexHeight)")    // imgui.h:2826
        .def_readwrite("TexUvWhitePixel", &ImFontAtlas::TexUvWhitePixel, "Texture coordinates to a white pixel")    // imgui.h:2827
        .def_readwrite("Fonts", &ImFontAtlas::Fonts, "Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.")    // imgui.h:2828
        .def_readwrite("CustomRects", &ImFontAtlas::CustomRects, "Rectangles for packing custom texture data into the atlas.")    // imgui.h:2829
        .def_readwrite("ConfigData", &ImFontAtlas::ConfigData, "Configuration data")    // imgui.h:2830
        .def_readonly("FontBuilderIO", &ImFontAtlas::FontBuilderIO, "Opaque interface to a font builder (default to stb_truetype, can be changed to use FreeType by defining IMGUI_ENABLE_FREETYPE).")    // imgui.h:2834
        .def_readwrite("FontBuilderFlags", &ImFontAtlas::FontBuilderFlags, "Shared flags (for all fonts) for custom font builder. THIS IS BUILD IMPLEMENTATION DEPENDENT. Per-font override is also available in ImFontConfig.")    // imgui.h:2835
        .def_readwrite("PackIdMouseCursors", &ImFontAtlas::PackIdMouseCursors, "Custom texture rectangle ID for white pixel and mouse cursors")    // imgui.h:2838
        .def_readwrite("PackIdLines", &ImFontAtlas::PackIdLines, "Custom texture rectangle ID for baked anti-aliased lines")    // imgui.h:2839
        ;


    auto pyClassImFont = py::class_<ImFont>    // imgui.h:2848
        (m, "ImFont", " Font runtime data and rendering\n ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().")
        .def_readwrite("IndexAdvanceX", &ImFont::IndexAdvanceX, "12-16 // out //            // Sparse. Glyphs->AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this this info, and are often bottleneck in large UI).")    // imgui.h:2851
        .def_readwrite("FallbackAdvanceX", &ImFont::FallbackAdvanceX, "4     // out // = FallbackGlyph->AdvanceX")    // imgui.h:2852
        .def_readwrite("FontSize", &ImFont::FontSize, "4     // in  //            // Height of characters/line, set during loading (don't change after loading)")    // imgui.h:2853
        .def_readwrite("IndexLookup", &ImFont::IndexLookup, "12-16 // out //            // Sparse. Index glyphs by Unicode code-point.")    // imgui.h:2856
        .def_readwrite("Glyphs", &ImFont::Glyphs, "12-16 // out //            // All glyphs.")    // imgui.h:2857
        .def_readonly("FallbackGlyph", &ImFont::FallbackGlyph, "4-8   // out // = FindGlyph(FontFallbackChar)")    // imgui.h:2858
        .def_readwrite("ContainerAtlas", &ImFont::ContainerAtlas, "4-8   // out //            // What we has been loaded into")    // imgui.h:2861
        .def_readonly("ConfigData", &ImFont::ConfigData, "4-8   // in  //            // Pointer within ContainerAtlas->ConfigData")    // imgui.h:2862
        .def_readwrite("ConfigDataCount", &ImFont::ConfigDataCount, "2     // in  // ~ 1        // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.")    // imgui.h:2863
        .def_readwrite("FallbackChar", &ImFont::FallbackChar, "2     // out // = FFFD/'?' // Character used if a glyph isn't found.")    // imgui.h:2864
        .def_readwrite("EllipsisChar", &ImFont::EllipsisChar, "2     // out // = '...'    // Character used for ellipsis rendering.")    // imgui.h:2865
        .def_readwrite("DotChar", &ImFont::DotChar, "2     // out // = '.'      // Character used for ellipsis rendering (if a single '...' character isn't found)")    // imgui.h:2866
        .def_readwrite("DirtyLookupTables", &ImFont::DirtyLookupTables, "1     // out //")    // imgui.h:2867
        .def_readwrite("Scale", &ImFont::Scale, "4     // in  // = 1.      // Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()")    // imgui.h:2868
        .def_readwrite("Ascent", &ImFont::Ascent, "4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]")    // imgui.h:2869
        .def_readwrite("Descent", &ImFont::Descent, "4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]")    // imgui.h:2869
        .def_readwrite("MetricsTotalSurface", &ImFont::MetricsTotalSurface, "4     // out //            // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)")    // imgui.h:2870
        .def(py::init<>(),    // imgui.h:2874
            "Methods")
        .def("FindGlyph",    // imgui.h:2876
            &ImFont::FindGlyph,
            py::arg("c"),
            pybind11::return_value_policy::reference)
        .def("FindGlyphNoFallback",    // imgui.h:2877
            &ImFont::FindGlyphNoFallback,
            py::arg("c"),
            pybind11::return_value_policy::reference)
        .def("CalcWordWrapPositionA",    // imgui.h:2885
            &ImFont::CalcWordWrapPositionA,
            py::arg("scale"), py::arg("text"), py::arg("text_end"), py::arg("wrap_width"),
            pybind11::return_value_policy::reference)
        .def("RenderChar",    // imgui.h:2886
            &ImFont::RenderChar, py::arg("draw_list"), py::arg("size"), py::arg("pos"), py::arg("col"), py::arg("c"))
        .def("RenderText",    // imgui.h:2887
            &ImFont::RenderText, py::arg("draw_list"), py::arg("size"), py::arg("pos"), py::arg("col"), py::arg("clip_rect"), py::arg("text_begin"), py::arg("text_end"), py::arg("wrap_width") = 0.0f, py::arg("cpu_fine_clip") = false)
        .def("BuildLookupTable",    // imgui.h:2890
            &ImFont::BuildLookupTable)
        .def("ClearOutputData",    // imgui.h:2891
            &ImFont::ClearOutputData)
        .def("GrowIndex",    // imgui.h:2892
            &ImFont::GrowIndex, py::arg("new_size"))
        .def("AddGlyph",    // imgui.h:2893
            &ImFont::AddGlyph, py::arg("src_cfg"), py::arg("c"), py::arg("x0"), py::arg("y0"), py::arg("x1"), py::arg("y1"), py::arg("u0"), py::arg("v0"), py::arg("u1"), py::arg("v1"), py::arg("advance_x"))
        .def("AddRemapChar",    // imgui.h:2894
            &ImFont::AddRemapChar,
            py::arg("dst"), py::arg("src"), py::arg("overwrite_dst") = true,
            "Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.")
        .def("SetGlyphVisible",    // imgui.h:2895
            &ImFont::SetGlyphVisible, py::arg("c"), py::arg("visible"))
        .def("IsGlyphRangeUnused",    // imgui.h:2896
            &ImFont::IsGlyphRangeUnused, py::arg("c_begin"), py::arg("c_last"))
        ;


    py::enum_<ImGuiViewportFlags_>(m, "ImGuiViewportFlags_", py::arithmetic(), "Flags stored in ImGuiViewport::Flags, giving indications to the platform backends.")    // imgui.h:2904
        .value("None_", ImGuiViewportFlags_None, "")
        .value("IsPlatformWindow", ImGuiViewportFlags_IsPlatformWindow, "Represent a Platform Window")
        .value("IsPlatformMonitor", ImGuiViewportFlags_IsPlatformMonitor, "Represent a Platform Monitor (unused yet)")
        .value("OwnedByApp", ImGuiViewportFlags_OwnedByApp, "Platform Window: is created/managed by the application (rather than a dear imgui backend)");


    auto pyClassImGuiViewport = py::class_<ImGuiViewport>    // imgui.h:2919
        (m, "ImGuiViewport", " - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.\n - In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports.\n - In the future we will extend this concept further to also represent Platform Monitor and support a \"no main platform window\" operation mode.\n - About Main Area vs Work Area:\n   - Main Area = entire viewport.\n   - Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).\n   - Windows are generally trying to stay within the Work Area of their host viewport.")
        .def_readwrite("Flags", &ImGuiViewport::Flags, "See ImGuiViewportFlags_")    // imgui.h:2921
        .def_readwrite("Pos", &ImGuiViewport::Pos, "Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktop/native coordinates)")    // imgui.h:2922
        .def_readwrite("Size", &ImGuiViewport::Size, "Main Area: Size of the viewport.")    // imgui.h:2923
        .def_readwrite("WorkPos", &ImGuiViewport::WorkPos, "Work Area: Position of the viewport minus task bars, menus bars, status bars (>= Pos)")    // imgui.h:2924
        .def_readwrite("WorkSize", &ImGuiViewport::WorkSize, "Work Area: Size of the viewport minus task bars, menu bars, status bars (<= Size)")    // imgui.h:2925
        .def_readwrite("PlatformHandleRaw", &ImGuiViewport::PlatformHandleRaw, "None* to hold lower-level, platform-native window handle (under Win32 this is expected to be a HWND, unused for other platforms)")    // imgui.h:2928
        .def(py::init<>())    // imgui.h:2930
        ;


    auto pyClassImGuiPlatformImeData = py::class_<ImGuiPlatformImeData>    // imgui.h:2942
        (m, "ImGuiPlatformImeData", "(Optional) Support for IME (Input Method Editor) via the io.SetPlatformImeDataFn() function.")
        .def_readwrite("WantVisible", &ImGuiPlatformImeData::WantVisible, "A widget wants the IME to be visible")    // imgui.h:2944
        .def_readwrite("InputPos", &ImGuiPlatformImeData::InputPos, "Position of the input cursor")    // imgui.h:2945
        .def_readwrite("InputLineHeight", &ImGuiPlatformImeData::InputLineHeight, "Line height")    // imgui.h:2946
        .def(py::init<>())    // imgui.h:2948
        ;


    // <namespace ImGui>    // imgui.h:2957
    // </namespace ImGui>

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}
