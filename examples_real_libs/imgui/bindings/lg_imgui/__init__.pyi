from enum import Enum
import numpy

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# <autogen:pyi> // Autogenerated code below! Do not edit!

# <namespace ImGui>    # imgui.h:278

def create_context(shared_font_atlas: ImFontAtlas = None) -> ImGuiContext:    # imgui.h:284
    """Context creation and access
    - Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between contexts.
    - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()
    for each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for details.
    """
    pass


def destroy_context(ctx: ImGuiContext = None) -> None:    # imgui.h:285
    """None = destroy current context"""
    pass


def get_current_context() -> ImGuiContext:    # imgui.h:286
    pass


def set_current_context(ctx: ImGuiContext) -> None:    # imgui.h:287
    pass


def get_io() -> ImGuiIO:    # imgui.h:290
    """access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)"""
    pass


def get_style() -> ImGuiStyle:    # imgui.h:291
    """access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame!"""
    pass


def new_frame() -> None:    # imgui.h:292
    """start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame()."""
    pass


def end_frame() -> None:    # imgui.h:293
    """ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!"""
    pass


def render() -> None:    # imgui.h:294
    """ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData()."""
    pass


def get_draw_data() -> ImDrawData:    # imgui.h:295
    """valid after Render() and until the next call to NewFrame(). this is what you have to render."""
    pass


def show_demo_window(p_open: bool = None) -> None:    # imgui.h:298
    """create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!"""
    pass


def show_metrics_window(p_open: bool = None) -> None:    # imgui.h:299
    """create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc."""
    pass


def show_stack_tool_window(p_open: bool = None) -> None:    # imgui.h:300
    """create Stack Tool window. hover items with mouse to query information about the source of their unique ID."""
    pass


def show_about_window(p_open: bool = None) -> None:    # imgui.h:301
    """create About window. display Dear ImGui version, credits and build/system information."""
    pass


def show_style_editor(ref: ImGuiStyle = None) -> None:    # imgui.h:302
    """add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)"""
    pass


def show_style_selector(label: str) -> bool:    # imgui.h:303
    """add style selector block (not a window), essentially a combo listing the default styles."""
    pass


def show_font_selector(label: str) -> None:    # imgui.h:304
    """add font selector block (not a window), essentially a combo listing the loaded fonts."""
    pass


def show_user_guide() -> None:    # imgui.h:305
    """add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls)."""
    pass


def get_version() -> str:    # imgui.h:306
    """get the compiled version string e.g. "1.80 WIP" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)"""
    pass


def style_colors_dark(dst: ImGuiStyle = None) -> None:    # imgui.h:309
    """new, recommended style (default)"""
    pass


def style_colors_light(dst: ImGuiStyle = None) -> None:    # imgui.h:310
    """best used with borders and a custom, thicker font"""
    pass


def style_colors_classic(dst: ImGuiStyle = None) -> None:    # imgui.h:311
    """classic imgui style"""
    pass


def begin(name: str, p_open: bool = None, flags: ImGuiWindowFlags = 0) -> bool:    # imgui.h:325
    """Windows
    - Begin() = push window to the stack and start appending to it. End() = pop window from the stack.
    - Passing 'bool p_open != None' shows a window-closing widget in the upper-right corner of the window,
    which clicking will set the boolean to False when clicked.
    - You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.
    Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().
    - Begin() return False to indicate the window is collapsed or fully clipped, so you may early out and omit submitting
    anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!
    [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
    returned True. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
    - Note that the bottom of window stack always contains a window called "Debug".
    """
    pass


def end() -> None:    # imgui.h:326
    pass


def begin_child(    # imgui.h:336
    str_id: str,
    size: ImVec2 = ImVec2(0, 0),
    border: bool = False,
    flags: ImGuiWindowFlags = 0
    ) -> bool:
    """Child Windows
    - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.
    - For each independent axis of 'size': ==0.0f: use remaining host window size / >0.0f: fixed size / <0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).
    - BeginChild() returns False to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.
    Always call a matching EndChild() for each BeginChild() call, regardless of its return value.
    [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
    returned True. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
    """
    pass


def begin_child(    # imgui.h:337
    id: ImGuiID,
    size: ImVec2 = ImVec2(0, 0),
    border: bool = False,
    flags: ImGuiWindowFlags = 0
    ) -> bool:
    pass


def end_child() -> None:    # imgui.h:338
    pass


def is_window_appearing() -> bool:    # imgui.h:342
    """Windows Utilities
    - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into.
    """
    pass


def is_window_collapsed() -> bool:    # imgui.h:343
    pass


def is_window_focused(flags: ImGuiFocusedFlags = 0) -> bool:    # imgui.h:344
    """is current window focused? or its root/child, depending on flags. see flags for options."""
    pass


def is_window_hovered(flags: ImGuiHoveredFlags = 0) -> bool:    # imgui.h:345
    """is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!"""
    pass


def get_window_draw_list() -> ImDrawList:    # imgui.h:346
    """get draw list associated to the current window, to append your own drawing primitives"""
    pass


def get_window_pos() -> ImVec2:    # imgui.h:347
    """get current window position in screen space (useful if you want to do your own drawing via the DrawList API)"""
    pass


def get_window_size() -> ImVec2:    # imgui.h:348
    """get current window size"""
    pass


def get_window_width() -> float:    # imgui.h:349
    """get current window width (shortcut for GetWindowSize().x)"""
    pass


def get_window_height() -> float:    # imgui.h:350
    """get current window height (shortcut for GetWindowSize().y)"""
    pass


def set_next_window_pos(    # imgui.h:354
    pos: ImVec2,
    cond: ImGuiCond = 0,
    pivot: ImVec2 = ImVec2(0, 0)
    ) -> None:
    """set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc."""
    pass


def set_next_window_size(size: ImVec2, cond: ImGuiCond = 0) -> None:    # imgui.h:355
    """set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()"""
    pass


def set_next_window_size_constraints(    # imgui.h:356
    size_min: ImVec2,
    size_max: ImVec2,
    custom_callback: ImGuiSizeCallback = None,
    custom_callback_data: None = None
    ) -> None:
    """set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints."""
    pass


def set_next_window_content_size(size: ImVec2) -> None:    # imgui.h:357
    """set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()"""
    pass


def set_next_window_collapsed(collapsed: bool, cond: ImGuiCond = 0) -> None:    # imgui.h:358
    """set next window collapsed state. call before Begin()"""
    pass


def set_next_window_focus() -> None:    # imgui.h:359
    """set next window to be focused / top-most. call before Begin()"""
    pass


def set_next_window_bg_alpha(alpha: float) -> None:    # imgui.h:360
    """set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground."""
    pass


def set_window_pos(pos: ImVec2, cond: ImGuiCond = 0) -> None:    # imgui.h:361
    """(not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects."""
    pass


def set_window_size(size: ImVec2, cond: ImGuiCond = 0) -> None:    # imgui.h:362
    """(not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects."""
    pass


def set_window_collapsed(collapsed: bool, cond: ImGuiCond = 0) -> None:    # imgui.h:363
    """(not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed()."""
    pass


def set_window_focus() -> None:    # imgui.h:364
    """(not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus()."""
    pass


def set_window_font_scale(scale: float) -> None:    # imgui.h:365
    """[OBSOLETE] set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes()."""
    pass


def set_window_pos(name: str, pos: ImVec2, cond: ImGuiCond = 0) -> None:    # imgui.h:366
    """set named window position."""
    pass


def set_window_size(name: str, size: ImVec2, cond: ImGuiCond = 0) -> None:    # imgui.h:367
    """set named window size. set axis to 0.0f to force an auto-fit on this axis."""
    pass


def set_window_collapsed(    # imgui.h:368
    name: str,
    collapsed: bool,
    cond: ImGuiCond = 0
    ) -> None:
    """set named window collapsed state"""
    pass


def set_window_focus(name: str) -> None:    # imgui.h:369
    """set named window to be focused / top-most. use None to remove focus."""
    pass


def get_content_region_avail() -> ImVec2:    # imgui.h:374
    """== GetContentRegionMax() - GetCursorPos()"""
    pass


def get_content_region_max() -> ImVec2:    # imgui.h:375
    """current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates"""
    pass


def get_window_content_region_min() -> ImVec2:    # imgui.h:376
    """content boundaries min for the full window (roughly (0,0)-Scroll), in window coordinates"""
    pass


def get_window_content_region_max() -> ImVec2:    # imgui.h:377
    """content boundaries max for the full window (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates"""
    pass


def get_scroll_x() -> float:    # imgui.h:380
    """get scrolling amount [0 .. GetScrollMaxX()]"""
    pass


def get_scroll_y() -> float:    # imgui.h:381
    """get scrolling amount [0 .. GetScrollMaxY()]"""
    pass


def set_scroll_x(scroll_x: float) -> None:    # imgui.h:382
    """set scrolling amount [0 .. GetScrollMaxX()]"""
    pass


def set_scroll_y(scroll_y: float) -> None:    # imgui.h:383
    """set scrolling amount [0 .. GetScrollMaxY()]"""
    pass


def get_scroll_max_x() -> float:    # imgui.h:384
    """get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x"""
    pass


def get_scroll_max_y() -> float:    # imgui.h:385
    """get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y"""
    pass


def set_scroll_here_x(center_x_ratio: float = 0.5) -> None:    # imgui.h:386
    """adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead."""
    pass


def set_scroll_here_y(center_y_ratio: float = 0.5) -> None:    # imgui.h:387
    """adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead."""
    pass


def set_scroll_from_pos_x(local_x: float, center_x_ratio: float = 0.5) -> None:    # imgui.h:388
    """adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position."""
    pass


def set_scroll_from_pos_y(local_y: float, center_y_ratio: float = 0.5) -> None:    # imgui.h:389
    """adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position."""
    pass


def push_font(font: ImFont) -> None:    # imgui.h:392
    """use None as a shortcut to push default font"""
    pass


def pop_font() -> None:    # imgui.h:393
    pass


def push_style_color(idx: ImGuiCol, col: ImU32) -> None:    # imgui.h:394
    """modify a style color. always use this if you modify the style after NewFrame()."""
    pass


def push_style_color(idx: ImGuiCol, col: ImVec4) -> None:    # imgui.h:395
    pass


def pop_style_color(count: int = 1) -> None:    # imgui.h:396
    pass


def push_style_var(idx: ImGuiStyleVar, val: float) -> None:    # imgui.h:397
    """modify a style float variable. always use this if you modify the style after NewFrame()."""
    pass


def push_style_var(idx: ImGuiStyleVar, val: ImVec2) -> None:    # imgui.h:398
    """modify a style ImVec2 variable. always use this if you modify the style after NewFrame()."""
    pass


def pop_style_var(count: int = 1) -> None:    # imgui.h:399
    pass


def push_allow_keyboard_focus(allow_keyboard_focus: bool) -> None:    # imgui.h:400
    """== tab stop enable. Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets"""
    pass


def pop_allow_keyboard_focus() -> None:    # imgui.h:401
    pass


def push_button_repeat(repeat: bool) -> None:    # imgui.h:402
    """in 'repeat' mode, Button() functions return repeated True in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame."""
    pass


def pop_button_repeat() -> None:    # imgui.h:403
    pass


def push_item_width(item_width: float) -> None:    # imgui.h:406
    """push width of items for common large "item+label" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -sys.float_info.min always align width to the right side)."""
    pass


def pop_item_width() -> None:    # imgui.h:407
    pass


def set_next_item_width(item_width: float) -> None:    # imgui.h:408
    """set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -sys.float_info.min always align width to the right side)"""
    pass


def calc_item_width() -> float:    # imgui.h:409
    """width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions."""
    pass


def push_text_wrap_pos(wrap_local_pos_x: float = 0.0) -> None:    # imgui.h:410
    """push word-wrapping position for Text() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space"""
    pass


def pop_text_wrap_pos() -> None:    # imgui.h:411
    pass


def get_font() -> ImFont:    # imgui.h:415
    """get current font"""
    pass


def get_font_size() -> float:    # imgui.h:416
    """get current font size (= height in pixels) of current font with current scale applied"""
    pass


def get_font_tex_uv_white_pixel() -> ImVec2:    # imgui.h:417
    """get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API"""
    pass


def get_color_u32(idx: ImGuiCol, alpha_mul: float = 1.0) -> ImU32:    # imgui.h:418
    """retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList"""
    pass


def get_color_u32(col: ImVec4) -> ImU32:    # imgui.h:419
    """retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList"""
    pass


def get_color_u32(col: ImU32) -> ImU32:    # imgui.h:420
    """retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList"""
    pass


def get_style_color_vec4(idx: ImGuiCol) -> ImVec4:    # imgui.h:421
    """retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in."""
    pass


def separator() -> None:    # imgui.h:430
    """separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator."""
    pass


def same_line(offset_from_start_x: float = 0.0, spacing: float = -1.0) -> None:    # imgui.h:431
    """call between widgets or groups to layout them horizontally. X position given in window coordinates."""
    pass


def new_line() -> None:    # imgui.h:432
    """undo a SameLine() or force a new line when in an horizontal-layout context."""
    pass


def spacing() -> None:    # imgui.h:433
    """add vertical spacing."""
    pass


def dummy(size: ImVec2) -> None:    # imgui.h:434
    """add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into."""
    pass


def indent(indent_w: float = 0.0) -> None:    # imgui.h:435
    """move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0"""
    pass


def unindent(indent_w: float = 0.0) -> None:    # imgui.h:436
    """move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0"""
    pass


def begin_group() -> None:    # imgui.h:437
    """lock horizontal starting position"""
    pass


def end_group() -> None:    # imgui.h:438
    """unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)"""
    pass


def get_cursor_pos() -> ImVec2:    # imgui.h:439
    """cursor position in window coordinates (relative to window position)"""
    pass


def get_cursor_pos_x() -> float:    # imgui.h:440
    """  (some functions are using window-relative coordinates, such as: GetCursorPos, GetCursorStartPos, GetContentRegionMax, GetWindowContentRegion etc."""
    pass


def get_cursor_pos_y() -> float:    # imgui.h:441
    """   other functions such as GetCursorScreenPos or everything in ImDrawList::"""
    pass


def set_cursor_pos(local_pos: ImVec2) -> None:    # imgui.h:442
    """   are using the main, absolute coordinate system."""
    pass


def set_cursor_pos_x(local_x: float) -> None:    # imgui.h:443
    """   GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)"""
    pass


def set_cursor_pos_y(local_y: float) -> None:    # imgui.h:444
    pass


def get_cursor_start_pos() -> ImVec2:    # imgui.h:445
    """initial cursor position in window coordinates"""
    pass


def get_cursor_screen_pos() -> ImVec2:    # imgui.h:446
    """cursor position in absolute coordinates (useful to work with ImDrawList API). generally top-left == GetMainViewport()->Pos == (0,0) in single viewport mode, and bottom-right == GetMainViewport()->Pos+Size == io.DisplaySize in single-viewport mode."""
    pass


def set_cursor_screen_pos(pos: ImVec2) -> None:    # imgui.h:447
    """cursor position in absolute coordinates"""
    pass


def align_text_to_frame_padding() -> None:    # imgui.h:448
    """vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)"""
    pass


def get_text_line_height() -> float:    # imgui.h:449
    """~ FontSize"""
    pass


def get_text_line_height_with_spacing() -> float:    # imgui.h:450
    """~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)"""
    pass


def get_frame_height() -> float:    # imgui.h:451
    """~ FontSize + style.FramePadding.y  2"""
    pass


def get_frame_height_with_spacing() -> float:    # imgui.h:452
    """~ FontSize + style.FramePadding.y  2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)"""
    pass


def push_id(str_id: str) -> None:    # imgui.h:465
    """push string into the ID stack (will hash string)."""
    pass


def push_id(str_id_begin: str, str_id_end: str) -> None:    # imgui.h:466
    """push string into the ID stack (will hash string)."""
    pass


def push_id(ptr_id: None) -> None:    # imgui.h:467
    """push pointer into the ID stack (will hash pointer)."""
    pass


def push_id(int_id: int) -> None:    # imgui.h:468
    """push integer into the ID stack (will hash integer)."""
    pass


def pop_id() -> None:    # imgui.h:469
    """pop from the ID stack."""
    pass


def get_id(str_id: str) -> ImGuiID:    # imgui.h:470
    """calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself"""
    pass


def get_id(str_id_begin: str, str_id_end: str) -> ImGuiID:    # imgui.h:471
    pass


def get_id(ptr_id: None) -> ImGuiID:    # imgui.h:472
    pass


def text_unformatted(text: str, text_end: str = None) -> None:    # imgui.h:475
    """raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for int chunks of text."""
    pass


def text(fmt: str, : ...) -> None:    # imgui.h:476
    """formatted text"""
    pass


def text_colored(col: ImVec4, fmt: str, : ...) -> None:    # imgui.h:478
    """shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();"""
    pass


def text_disabled(fmt: str, : ...) -> None:    # imgui.h:480
    """shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();"""
    pass


def text_wrapped(fmt: str, : ...) -> None:    # imgui.h:482
    """shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize()."""
    pass


def label_text(label: str, fmt: str, : ...) -> None:    # imgui.h:484
    """display text+label aligned the same way as value+label widgets"""
    pass


def bullet_text(fmt: str, : ...) -> None:    # imgui.h:486
    """shortcut for Bullet()+Text()"""
    pass


def button(label: str, size: ImVec2 = ImVec2(0, 0)) -> bool:    # imgui.h:492
    """button"""
    pass


def small_button(label: str) -> bool:    # imgui.h:493
    """button with FramePadding=(0,0) to easily embed within text"""
    pass


def invisible_button(    # imgui.h:494
    str_id: str,
    size: ImVec2,
    flags: ImGuiButtonFlags = 0
    ) -> bool:
    """flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)"""
    pass


def arrow_button(str_id: str, dir: ImGuiDir) -> bool:    # imgui.h:495
    """square button with an arrow shape"""
    pass


def image(    # imgui.h:496
    user_texture_id: ImTextureID,
    size: ImVec2,
    uv0: ImVec2 = ImVec2(0, 0),
    uv1: ImVec2 = ImVec2(1,1),
    tint_col: ImVec4 = ImVec4(1,1,1,1),
    border_col: ImVec4 = ImVec4(0,0,0,0)
    ) -> None:
    pass


def image_button(    # imgui.h:497
    user_texture_id: ImTextureID,
    size: ImVec2,
    uv0: ImVec2 = ImVec2(0, 0),
    uv1: ImVec2 = ImVec2(1,1),
    frame_padding: int = -1,
    bg_col: ImVec4 = ImVec4(0,0,0,0),
    tint_col: ImVec4 = ImVec4(1,1,1,1)
    ) -> bool:
    """<0 frame_padding uses default frame padding settings. 0 for no padding"""
    pass


def checkbox(label: str, v: bool) -> bool:    # imgui.h:498
    pass


def checkbox_flags(label: str, flags: int, flags_value: int) -> bool:    # imgui.h:499
    pass


def checkbox_flags(label: str, flags: int, flags_value: int) -> bool:    # imgui.h:500
    pass


def radio_button(label: str, active: bool) -> bool:    # imgui.h:501
    """use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }"""
    pass


def radio_button(label: str, v: int, v_button: int) -> bool:    # imgui.h:502
    """shortcut to handle the above pattern when value is an integer"""
    pass


def progress_bar(    # imgui.h:503
    fraction: float,
    size_arg: ImVec2 = ImVec2(-sys.float_info.min, 0),
    overlay: str = None
    ) -> None:
    pass


def bullet() -> None:    # imgui.h:504
    """draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses"""
    pass


def begin_combo(    # imgui.h:509
    label: str,
    preview_value: str,
    flags: ImGuiComboFlags = 0
    ) -> bool:
    """Widgets: Combo Box
    - The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.
    - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose. This is analogous to how ListBox are created.
    """
    pass


def end_combo() -> None:    # imgui.h:510
    """only call EndCombo() if BeginCombo() returns True!"""
    pass


def combo(    # imgui.h:511
    label: str,
    current_item: int,
    items: List[str],
    popup_max_height_in_items: int = -1
    ) -> bool:
    pass


def combo(    # imgui.h:512
    label: str,
    current_item: int,
    items_separated_by_zeros: str,
    popup_max_height_in_items: int = -1
    ) -> bool:
    """Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0""""
    pass


def drag_float(    # imgui.h:527
    label: str,
    v: float,
    v_speed: float = 1.0,
    v_min: float = 0.0,
    v_max: float = 0.0,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    """If v_min >= v_max we have no bound"""
    pass


def drag_float2(    # imgui.h:528
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_speed: float = 1.0,
    v_min: float = 0.0,
    v_max: float = 0.0,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_float3(    # imgui.h:529
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    v_speed: float = 1.0,
    v_min: float = 0.0,
    v_max: float = 0.0,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_float4(    # imgui.h:530
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    v_3: BoxedFloat,
    v_speed: float = 1.0,
    v_min: float = 0.0,
    v_max: float = 0.0,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_float_range2(    # imgui.h:531
    label: str,
    v_current_min: float,
    v_current_max: float,
    v_speed: float = 1.0,
    v_min: float = 0.0,
    v_max: float = 0.0,
    format: str = "%.3f",
    format_max: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_int(    # imgui.h:532
    label: str,
    v: int,
    v_speed: float = 1.0,
    v_min: int = 0,
    v_max: int = 0,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    """If v_min >= v_max we have no bound"""
    pass


def drag_int2(    # imgui.h:533
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_speed: float = 1.0,
    v_min: int = 0,
    v_max: int = 0,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_int3(    # imgui.h:534
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    v_speed: float = 1.0,
    v_min: int = 0,
    v_max: int = 0,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_int4(    # imgui.h:535
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    v_3: BoxedInt,
    v_speed: float = 1.0,
    v_min: int = 0,
    v_max: int = 0,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_int_range2(    # imgui.h:536
    label: str,
    v_current_min: int,
    v_current_max: int,
    v_speed: float = 1.0,
    v_min: int = 0,
    v_max: int = 0,
    format: str = "%d",
    format_max: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_scalar(    # imgui.h:537
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    v_speed: float = 1.0,
    p_min: None = None,
    p_max: None = None,
    format: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_scalar_n(    # imgui.h:538
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    components: int,
    v_speed: float = 1.0,
    p_min: None = None,
    p_max: None = None,
    format: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_float(    # imgui.h:546
    label: str,
    v: float,
    v_min: float,
    v_max: float,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    """adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display."""
    pass


def slider_float2(    # imgui.h:547
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_min: float,
    v_max: float,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_float3(    # imgui.h:548
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    v_min: float,
    v_max: float,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_float4(    # imgui.h:549
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    v_3: BoxedFloat,
    v_min: float,
    v_max: float,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_angle(    # imgui.h:550
    label: str,
    v_rad: float,
    v_degrees_min: float = -360.0,
    v_degrees_max: float = +360.0,
    format: str = "%.0f deg",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_int(    # imgui.h:551
    label: str,
    v: int,
    v_min: int,
    v_max: int,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_int2(    # imgui.h:552
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_min: int,
    v_max: int,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_int3(    # imgui.h:553
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    v_min: int,
    v_max: int,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_int4(    # imgui.h:554
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    v_3: BoxedInt,
    v_min: int,
    v_max: int,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_scalar(    # imgui.h:555
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    p_min: None,
    p_max: None,
    format: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_scalar_n(    # imgui.h:556
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    components: int,
    p_min: None,
    p_max: None,
    format: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def v_slider_float(    # imgui.h:557
    label: str,
    size: ImVec2,
    v: float,
    v_min: float,
    v_max: float,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def v_slider_int(    # imgui.h:558
    label: str,
    size: ImVec2,
    v: int,
    v_min: int,
    v_max: int,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def v_slider_scalar(    # imgui.h:559
    label: str,
    size: ImVec2,
    data_type: ImGuiDataType,
    p_data: None,
    p_min: None,
    p_max: None,
    format: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def input_text(    # imgui.h:564
    label: str,
    buf: char,
    buf_size: int,
    flags: ImGuiInputTextFlags = 0,
    callback: ImGuiInputTextCallback = None,
    user_data: None = None
    ) -> bool:
    """Widgets: Input with Keyboard
    - If you want to use InputText() with str or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.
    - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.
    """
    pass


def input_text_multiline(    # imgui.h:565
    label: str,
    buf: char,
    buf_size: int,
    size: ImVec2 = ImVec2(0, 0),
    flags: ImGuiInputTextFlags = 0,
    callback: ImGuiInputTextCallback = None,
    user_data: None = None
    ) -> bool:
    pass


def input_text_with_hint(    # imgui.h:566
    label: str,
    hint: str,
    buf: char,
    buf_size: int,
    flags: ImGuiInputTextFlags = 0,
    callback: ImGuiInputTextCallback = None,
    user_data: None = None
    ) -> bool:
    pass


def input_float(    # imgui.h:567
    label: str,
    v: float,
    step: float = 0.0,
    step_fast: float = 0.0,
    format: str = "%.3f",
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_float2(    # imgui.h:568
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    format: str = "%.3f",
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_float3(    # imgui.h:569
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    format: str = "%.3f",
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_float4(    # imgui.h:570
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    v_3: BoxedFloat,
    format: str = "%.3f",
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_int(    # imgui.h:571
    label: str,
    v: int,
    step: int = 1,
    step_fast: int = 100,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_int2(    # imgui.h:572
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_int3(    # imgui.h:573
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_int4(    # imgui.h:574
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    v_3: BoxedInt,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_double(    # imgui.h:575
    label: str,
    v: float,
    step: float = 0.0,
    step_fast: float = 0.0,
    format: str = "%.6f",
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_scalar(    # imgui.h:576
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    p_step: None = None,
    p_step_fast: None = None,
    format: str = None,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_scalar_n(    # imgui.h:577
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    components: int,
    p_step: None = None,
    p_step_fast: None = None,
    format: str = None,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def color_edit3(    # imgui.h:582
    label: str,
    col_0: BoxedFloat,
    col_1: BoxedFloat,
    col_2: BoxedFloat,
    flags: ImGuiColorEditFlags = 0
    ) -> bool:
    """Widgets: Color Editor/Picker (tip: the ColorEdit functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)
    - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float v', the array syntax is just a way to document the number of elements that are expected to be accessible.
    - You can pass the address of a first float element out of a contiguous structure, e.g. myvector.x
    """
    pass


def color_edit4(    # imgui.h:583
    label: str,
    col_0: BoxedFloat,
    col_1: BoxedFloat,
    col_2: BoxedFloat,
    col_3: BoxedFloat,
    flags: ImGuiColorEditFlags = 0
    ) -> bool:
    pass


def color_picker3(    # imgui.h:584
    label: str,
    col_0: BoxedFloat,
    col_1: BoxedFloat,
    col_2: BoxedFloat,
    flags: ImGuiColorEditFlags = 0
    ) -> bool:
    pass


def color_picker4(    # imgui.h:585
    label: str,
    col_0: BoxedFloat,
    col_1: BoxedFloat,
    col_2: BoxedFloat,
    col_3: BoxedFloat,
    flags: ImGuiColorEditFlags = 0,
    ref_col: float = None
    ) -> bool:
    pass


def color_button(    # imgui.h:586
    desc_id: str,
    col: ImVec4,
    flags: ImGuiColorEditFlags = 0,
    size: ImVec2 = ImVec2(0, 0)
    ) -> bool:
    """display a color square/button, hover for details, return True when pressed."""
    pass


def set_color_edit_options(flags: ImGuiColorEditFlags) -> None:    # imgui.h:587
    """initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls."""
    pass


def tree_node(label: str) -> bool:    # imgui.h:591
    """Widgets: Trees
    - TreeNode functions return True when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents.
    """
    pass


def tree_node(str_id: str, fmt: str, : ...) -> bool:    # imgui.h:592
    """helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet()."""
    pass


def tree_node(ptr_id: None, fmt: str, : ...) -> bool:    # imgui.h:593
    """""""
    pass


def tree_node_ex(label: str, flags: ImGuiTreeNodeFlags = 0) -> bool:    # imgui.h:596
    pass


def tree_node_ex(    # imgui.h:597
    str_id: str,
    flags: ImGuiTreeNodeFlags,
    fmt: str,
    : ...
    ) -> bool:
    pass


def tree_node_ex(    # imgui.h:598
    ptr_id: None,
    flags: ImGuiTreeNodeFlags,
    fmt: str,
    : ...
    ) -> bool:
    pass


def tree_push(str_id: str) -> None:    # imgui.h:601
    """~ Indent()+PushId(). Already called by TreeNode() when returning True, but you can call TreePush/TreePop yourself if desired."""
    pass


def tree_push(ptr_id: None = None) -> None:    # imgui.h:602
    """""""
    pass


def tree_pop() -> None:    # imgui.h:603
    """~ Unindent()+PopId()"""
    pass


def get_tree_node_to_label_spacing() -> float:    # imgui.h:604
    """horizontal distance preceding label when using TreeNode() or Bullet() == (g.FontSize + style.FramePadding.x2) for a regular unframed TreeNode"""
    pass


def collapsing_header(label: str, flags: ImGuiTreeNodeFlags = 0) -> bool:    # imgui.h:605
    """if returning 'True' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop()."""
    pass


def collapsing_header(    # imgui.h:606
    label: str,
    p_visible: bool,
    flags: ImGuiTreeNodeFlags = 0
    ) -> bool:
    """when 'p_visible != None': if 'p_visible==True' display an additional small close button on upper right of the header which will set the bool to False when clicked, if 'p_visible==False' don't display the header."""
    pass


def set_next_item_open(is_open: bool, cond: ImGuiCond = 0) -> None:    # imgui.h:607
    """set next TreeNode/CollapsingHeader open state."""
    pass


def selectable(    # imgui.h:612
    label: str,
    selected: bool = False,
    flags: ImGuiSelectableFlags = 0,
    size: ImVec2 = ImVec2(0, 0)
    ) -> bool:
    """"bool selected" carry the selection state (read-only). Selectable() is clicked is returns True so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height"""
    pass


def selectable(    # imgui.h:613
    label: str,
    p_selected: bool,
    flags: ImGuiSelectableFlags = 0,
    size: ImVec2 = ImVec2(0, 0)
    ) -> bool:
    """"bool p_selected" point to the selection state (read-write), as a convenient helper."""
    pass


def begin_list_box(label: str, size: ImVec2 = ImVec2(0, 0)) -> bool:    # imgui.h:621
    """open a framed scrolling region"""
    pass


def end_list_box() -> None:    # imgui.h:622
    """only call EndListBox() if BeginListBox() returned True!"""
    pass


def list_box(    # imgui.h:623
    label: str,
    current_item: int,
    items: List[str],
    height_in_items: int = -1
    ) -> bool:
    pass


def plot_lines(    # imgui.h:628
    label: str,
    values: float,
    values_count: int,
    values_offset: int = 0,
    overlay_text: str = None,
    scale_min: float = sys.float_info.max,
    scale_max: float = sys.float_info.max,
    graph_size: ImVec2 = ImVec2(0, 0),
    stride: int = sizeof(float)
    ) -> None:
    """Widgets: Data Plotting
    - Consider using ImPlot (https://github.com/epezent/implot) which is much better!
    """
    pass


def plot_histogram(    # imgui.h:630
    label: str,
    values: float,
    values_count: int,
    values_offset: int = 0,
    overlay_text: str = None,
    scale_min: float = sys.float_info.max,
    scale_max: float = sys.float_info.max,
    graph_size: ImVec2 = ImVec2(0, 0),
    stride: int = sizeof(float)
    ) -> None:
    pass


def value(prefix: str, b: bool) -> None:    # imgui.h:635
    """Widgets: Value() Helpers.
    - Those are merely shortcut to calling Text() with a format string. Output single value in "name: value" format (tip: freely declare more in your code to handle your types. you can add functions to the ImGui namespace)
    """
    pass


def value(prefix: str, v: int) -> None:    # imgui.h:636
    pass


def value(prefix: str, v: int) -> None:    # imgui.h:637
    pass


def value(prefix: str, v: float, float_format: str = None) -> None:    # imgui.h:638
    pass


def begin_menu_bar() -> bool:    # imgui.h:645
    """append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window)."""
    pass


def end_menu_bar() -> None:    # imgui.h:646
    """only call EndMenuBar() if BeginMenuBar() returns True!"""
    pass


def begin_main_menu_bar() -> bool:    # imgui.h:647
    """create and append to a full screen menu-bar."""
    pass


def end_main_menu_bar() -> None:    # imgui.h:648
    """only call EndMainMenuBar() if BeginMainMenuBar() returns True!"""
    pass


def begin_menu(label: str, enabled: bool = True) -> bool:    # imgui.h:649
    """create a sub-menu entry. only call EndMenu() if this returns True!"""
    pass


def end_menu() -> None:    # imgui.h:650
    """only call EndMenu() if BeginMenu() returns True!"""
    pass


def menu_item(    # imgui.h:651
    label: str,
    shortcut: str = None,
    selected: bool = False,
    enabled: bool = True
    ) -> bool:
    """return True when activated."""
    pass


def menu_item(    # imgui.h:652
    label: str,
    shortcut: str,
    p_selected: bool,
    enabled: bool = True
    ) -> bool:
    """return True when activated + toggle (p_selected) if p_selected != None"""
    pass


def begin_tooltip() -> None:    # imgui.h:656
    """begin/append a tooltip window. to create full-featured tooltip (with any kind of items)."""
    pass


def end_tooltip() -> None:    # imgui.h:657
    pass


def set_tooltip(fmt: str, : ...) -> None:    # imgui.h:658
    """set a text-only tooltip, typically use with ImGui::IsItemHovered(). override any previous call to SetTooltip()."""
    pass


def begin_popup(str_id: str, flags: ImGuiWindowFlags = 0) -> bool:    # imgui.h:673
    """return True if the popup is open, and you can start outputting to it."""
    pass


def begin_popup_modal(    # imgui.h:674
    name: str,
    p_open: bool = None,
    flags: ImGuiWindowFlags = 0
    ) -> bool:
    """return True if the modal is open, and you can start outputting to it."""
    pass


def end_popup() -> None:    # imgui.h:675
    """only call EndPopup() if BeginPopupXXX() returns True!"""
    pass


def open_popup(str_id: str, popup_flags: ImGuiPopupFlags = 0) -> None:    # imgui.h:685
    """call to mark popup as open (don't call every frame!)."""
    pass


def open_popup(id: ImGuiID, popup_flags: ImGuiPopupFlags = 0) -> None:    # imgui.h:686
    """id overload to facilitate calling from nested stacks"""
    pass


def open_popup_on_item_click(    # imgui.h:687
    str_id: str = None,
    popup_flags: ImGuiPopupFlags = 1
    ) -> None:
    """helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)"""
    pass


def close_current_popup() -> None:    # imgui.h:688
    """manually close the popup we have begin-ed into."""
    pass


def begin_popup_context_item(    # imgui.h:695
    str_id: str = None,
    popup_flags: ImGuiPopupFlags = 1
    ) -> bool:
    """open+begin popup when clicked on last item. Use str_id==None to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!"""
    pass


def begin_popup_context_window(    # imgui.h:696
    str_id: str = None,
    popup_flags: ImGuiPopupFlags = 1
    ) -> bool:
    """open+begin popup when clicked on current window."""
    pass


def begin_popup_context_void(    # imgui.h:697
    str_id: str = None,
    popup_flags: ImGuiPopupFlags = 1
    ) -> bool:
    """open+begin popup when clicked in None (where there are no windows)."""
    pass


def is_popup_open(str_id: str, flags: ImGuiPopupFlags = 0) -> bool:    # imgui.h:703
    """return True if the popup is open."""
    pass


def begin_table(    # imgui.h:728
    str_id: str,
    column: int,
    flags: ImGuiTableFlags = 0,
    outer_size: ImVec2 = ImVec2(0.0f, 0.0f),
    inner_width: float = 0.0
    ) -> bool:
    """Tables
    - Full-featured replacement for old Columns API.
    - See Demo->Tables for demo code. See top of imgui_tables.cpp for general commentary.
    - See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.
    The typical call flow is:
    - 1. Call BeginTable(), early out if returning False.
    - 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.
    - 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.
    - 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.
    - 5. Populate contents:
    - In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.
    - If you are using tables as a sort of grid, where every columns is holding the same type of contents,
    you may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().
    TableNextColumn() will automatically wrap-around into the next row if needed.
    - IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!
    - Summary of possible call flow:
    --------------------------------------------------------------------------------------------------------
    TableNextRow() -> TableSetColumnIndex(0) -> Text("Hello 0") -> TableSetColumnIndex(1) -> Text("Hello 1")  // OK
    TableNextRow() -> TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK
    TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK: TableNextColumn() automatically gets to next row!
    TableNextRow()                           -> Text("Hello 0")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!
    --------------------------------------------------------------------------------------------------------
    - 5. Call EndTable()
    """
    pass


def end_table() -> None:    # imgui.h:729
    """only call EndTable() if BeginTable() returns True!"""
    pass


def table_next_row(    # imgui.h:730
    row_flags: ImGuiTableRowFlags = 0,
    min_row_height: float = 0.0
    ) -> None:
    """append into the first cell of a new row."""
    pass


def table_next_column() -> bool:    # imgui.h:731
    """append into the next column (or first column of next row if currently in last column). Return True when column is visible."""
    pass


def table_set_column_index(column_n: int) -> bool:    # imgui.h:732
    """append into the specified column. Return True when column is visible."""
    pass


def table_setup_column(    # imgui.h:742
    label: str,
    flags: ImGuiTableColumnFlags = 0,
    init_width_or_weight: float = 0.0,
    user_id: ImGuiID = 0
    ) -> None:
    """Tables: Headers  Columns declaration
    - Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.
    - Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.
    Headers are required to perform: reordering, sorting, and opening the context menu.
    The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.
    - You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in
    some advanced use cases (e.g. adding custom widgets in header row).
    - Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled.
    """
    pass


def table_setup_scroll_freeze(cols: int, rows: int) -> None:    # imgui.h:743
    """lock columns/rows so they stay visible when scrolled."""
    pass


def table_headers_row() -> None:    # imgui.h:744
    """submit all headers cells based on data provided to TableSetupColumn() + submit context menu"""
    pass


def table_header(label: str) -> None:    # imgui.h:745
    """submit one header cell manually (rarely used)"""
    pass


def table_get_sort_specs() -> ImGuiTableSortSpecs:    # imgui.h:753
    """get latest sort specs for the table (None if not sorting).  Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable()."""
    pass


def table_get_column_count() -> int:    # imgui.h:754
    """return number of columns (value passed to BeginTable)"""
    pass


def table_get_column_index() -> int:    # imgui.h:755
    """return current column index."""
    pass


def table_get_row_index() -> int:    # imgui.h:756
    """return current row index."""
    pass


def table_get_column_name(column_n: int = -1) -> str:    # imgui.h:757
    """return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column."""
    pass


def table_get_column_flags(column_n: int = -1) -> ImGuiTableColumnFlags:    # imgui.h:758
    """return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column."""
    pass


def table_set_column_enabled(column_n: int, v: bool) -> None:    # imgui.h:759
    """change user accessible enabled/disabled state of a column. Set to False to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)"""
    pass


def table_set_bg_color(    # imgui.h:760
    target: ImGuiTableBgTarget,
    color: ImU32,
    column_n: int = -1
    ) -> None:
    """change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details."""
    pass


def columns(count: int = 1, id: str = None, border: bool = True) -> None:    # imgui.h:764
    """Legacy Columns API (prefer using Tables!)
    - You can also use SameLine(pos_x) to mimic simplified columns.
    """
    pass


def next_column() -> None:    # imgui.h:765
    """next column, defaults to current row or next row if the current row is finished"""
    pass


def get_column_index() -> int:    # imgui.h:766
    """get current column index"""
    pass


def get_column_width(column_index: int = -1) -> float:    # imgui.h:767
    """get column width (in pixels). pass -1 to use current column"""
    pass


def set_column_width(column_index: int, width: float) -> None:    # imgui.h:768
    """set column width (in pixels). pass -1 to use current column"""
    pass


def get_column_offset(column_index: int = -1) -> float:    # imgui.h:769
    """get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f"""
    pass


def set_column_offset(column_index: int, offset_x: float) -> None:    # imgui.h:770
    """set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column"""
    pass


def get_columns_count() -> int:    # imgui.h:771
    pass


def begin_tab_bar(str_id: str, flags: ImGuiTabBarFlags = 0) -> bool:    # imgui.h:774
    """create and append into a TabBar"""
    pass


def end_tab_bar() -> None:    # imgui.h:775
    """only call EndTabBar() if BeginTabBar() returns True!"""
    pass


def begin_tab_item(    # imgui.h:776
    label: str,
    p_open: bool = None,
    flags: ImGuiTabItemFlags = 0
    ) -> bool:
    """create a Tab. Returns True if the Tab is selected."""
    pass


def end_tab_item() -> None:    # imgui.h:777
    """only call EndTabItem() if BeginTabItem() returns True!"""
    pass


def tab_item_button(label: str, flags: ImGuiTabItemFlags = 0) -> bool:    # imgui.h:778
    """create a Tab behaving like a button. return True when clicked. cannot be selected in the tab bar."""
    pass


def set_tab_item_closed(tab_or_docked_window_label: str) -> None:    # imgui.h:779
    """notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name."""
    pass


def log_to_tty(auto_open_depth: int = -1) -> None:    # imgui.h:783
    """start logging to tty (stdout)"""
    pass


def log_to_file(auto_open_depth: int = -1, filename: str = None) -> None:    # imgui.h:784
    """start logging to file"""
    pass


def log_to_clipboard(auto_open_depth: int = -1) -> None:    # imgui.h:785
    """start logging to OS clipboard"""
    pass


def log_finish() -> None:    # imgui.h:786
    """stop logging (close file, etc.)"""
    pass


def log_buttons() -> None:    # imgui.h:787
    """helper to display buttons for logging to tty/file/clipboard"""
    pass


def log_text(fmt: str, : ...) -> None:    # imgui.h:788
    """pass text data straight to log (without being displayed)"""
    pass


def begin_drag_drop_source(flags: ImGuiDragDropFlags = 0) -> bool:    # imgui.h:796
    """call after submitting an item which may be dragged. when this return True, you can call SetDragDropPayload() + EndDragDropSource()"""
    pass


def set_drag_drop_payload(    # imgui.h:797
    type: str,
    data: None,
    sz: int,
    cond: ImGuiCond = 0
    ) -> bool:
    """type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui. Return True when payload has been accepted."""
    pass


def end_drag_drop_source() -> None:    # imgui.h:798
    """only call EndDragDropSource() if BeginDragDropSource() returns True!"""
    pass


def begin_drag_drop_target() -> bool:    # imgui.h:799
    """call after submitting an item that may receive a payload. If this returns True, you can call AcceptDragDropPayload() + EndDragDropTarget()"""
    pass


def accept_drag_drop_payload(    # imgui.h:800
    type: str,
    flags: ImGuiDragDropFlags = 0
    ) -> ImGuiPayload:
    """accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released."""
    pass


def end_drag_drop_target() -> None:    # imgui.h:801
    """only call EndDragDropTarget() if BeginDragDropTarget() returns True!"""
    pass


def get_drag_drop_payload() -> ImGuiPayload:    # imgui.h:802
    """peek directly into the current payload from anywhere. may return None. use ImGuiPayload::IsDataType() to test for the payload type."""
    pass


def begin_disabled(disabled: bool = True) -> None:    # imgui.h:808
    """Disabling [BETA API]
    - Disable all user interactions and dim items visuals (applying style.DisabledAlpha over current colors)
    - Those can be nested but it cannot be used to enable an already disabled section (a single BeginDisabled(True) in the stack is enough to keep everything disabled)
    - BeginDisabled(False) essentially does nothing useful but is provided to facilitate use of boolean expressions. If you can avoid calling BeginDisabled(False)/EndDisabled() best to avoid it.
    """
    pass


def end_disabled() -> None:    # imgui.h:809
    pass


def push_clip_rect(    # imgui.h:813
    clip_rect_min: ImVec2,
    clip_rect_max: ImVec2,
    intersect_with_current_clip_rect: bool
    ) -> None:
    """Clipping
    - Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only.
    """
    pass


def pop_clip_rect() -> None:    # imgui.h:814
    pass


def set_item_default_focus() -> None:    # imgui.h:818
    """make last item the default focused item of a window."""
    pass


def set_keyboard_focus_here(offset: int = 0) -> None:    # imgui.h:819
    """focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget."""
    pass


def is_item_hovered(flags: ImGuiHoveredFlags = 0) -> bool:    # imgui.h:824
    """is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options."""
    pass


def is_item_active() -> bool:    # imgui.h:825
    """is the last item active? (e.g. button being held, text field being edited. This will continuously return True while holding mouse button on an item. Items that don't interact will always return False)"""
    pass


def is_item_focused() -> bool:    # imgui.h:826
    """is the last item focused for keyboard/gamepad navigation?"""
    pass


def is_item_clicked(mouse_button: ImGuiMouseButton = 0) -> bool:    # imgui.h:827
    """is the last item hovered and mouse clicked on? ()  == IsMouseClicked(mouse_button)  IsItemHovered()Important. () this it NOT equivalent to the behavior of e.g. Button(). Read comments in function definition."""
    pass


def is_item_visible() -> bool:    # imgui.h:828
    """is the last item visible? (items may be out of sight because of clipping/scrolling)"""
    pass


def is_item_edited() -> bool:    # imgui.h:829
    """did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets."""
    pass


def is_item_activated() -> bool:    # imgui.h:830
    """was the last item just made active (item was previously inactive)."""
    pass


def is_item_deactivated() -> bool:    # imgui.h:831
    """was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing."""
    pass


def is_item_deactivated_after_edit() -> bool:    # imgui.h:832
    """was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get False positives (some widgets such as Combo()/ListBox()/Selectable() will return True even when clicking an already selected item)."""
    pass


def is_item_toggled_open() -> bool:    # imgui.h:833
    """was the last item open state toggled? set by TreeNode()."""
    pass


def is_any_item_hovered() -> bool:    # imgui.h:834
    """is any item hovered?"""
    pass


def is_any_item_active() -> bool:    # imgui.h:835
    """is any item active?"""
    pass


def is_any_item_focused() -> bool:    # imgui.h:836
    """is any item focused?"""
    pass


def get_item_rect_min() -> ImVec2:    # imgui.h:837
    """get upper-left bounding rectangle of the last item (screen space)"""
    pass


def get_item_rect_max() -> ImVec2:    # imgui.h:838
    """get lower-right bounding rectangle of the last item (screen space)"""
    pass


def get_item_rect_size() -> ImVec2:    # imgui.h:839
    """get size of last item"""
    pass


def set_item_allow_overlap() -> None:    # imgui.h:840
    """allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area."""
    pass


def get_main_viewport() -> ImGuiViewport:    # imgui.h:846
    """return primary/default viewport. This can never be None."""
    pass


def get_background_draw_list() -> ImDrawList:    # imgui.h:849
    """this draw list will be the first rendered one. Useful to quickly draw shapes/text behind dear imgui contents."""
    pass


def get_foreground_draw_list() -> ImDrawList:    # imgui.h:850
    """this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents."""
    pass


def is_rect_visible(size: ImVec2) -> bool:    # imgui.h:853
    """test if rectangle (of given size, starting from cursor position) is visible / not clipped."""
    pass


def is_rect_visible(rect_min: ImVec2, rect_max: ImVec2) -> bool:    # imgui.h:854
    """test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side."""
    pass


def get_time() -> float:    # imgui.h:855
    """get global imgui time. incremented by io.DeltaTime every frame."""
    pass


def get_frame_count() -> int:    # imgui.h:856
    """get global imgui frame count. incremented by 1 every frame."""
    pass


def get_draw_list_shared_data() -> ImDrawListSharedData:    # imgui.h:857
    """you may use this when creating your own ImDrawList instances."""
    pass


def get_style_color_name(idx: ImGuiCol) -> str:    # imgui.h:858
    """get a string corresponding to the enum value (for display, saving, etc.)."""
    pass


def set_state_storage(storage: ImGuiStorage) -> None:    # imgui.h:859
    """replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)"""
    pass


def get_state_storage() -> ImGuiStorage:    # imgui.h:860
    pass


def begin_child_frame(    # imgui.h:861
    id: ImGuiID,
    size: ImVec2,
    flags: ImGuiWindowFlags = 0
    ) -> bool:
    """helper to create a child window / scrolling region that looks like a normal widget frame"""
    pass


def end_child_frame() -> None:    # imgui.h:862
    """always call EndChildFrame() regardless of BeginChildFrame() return values (which indicates a collapsed/clipped window)"""
    pass


def calc_text_size(    # imgui.h:865
    text: str,
    text_end: str = None,
    hide_text_after_double_hash: bool = False,
    wrap_width: float = -1.0
    ) -> ImVec2:
    """Text Utilities"""
    pass


def color_convert_u32_to_float4(in: ImU32) -> ImVec4:    # imgui.h:868
    """Color Utilities"""
    pass


def color_convert_float4_to_u32(in: ImVec4) -> ImU32:    # imgui.h:869
    pass


def color_convert_hs_vto_rgb(    # imgui.h:871
    h: float,
    s: float,
    v: float,
    out_r: float,
    out_g: float,
    out_b: float
    ) -> None:
    pass


def is_key_down(key: ImGuiKey) -> bool:    # imgui.h:879
    """is key being held."""
    pass


def is_key_pressed(key: ImGuiKey, repeat: bool = True) -> bool:    # imgui.h:880
    """was key pressed (went from !Down to Down)? if repeat=True, uses io.KeyRepeatDelay / KeyRepeatRate"""
    pass


def is_key_released(key: ImGuiKey) -> bool:    # imgui.h:881
    """was key released (went from Down to !Down)?"""
    pass


def get_key_pressed_amount(    # imgui.h:882
    key: ImGuiKey,
    repeat_delay: float,
    rate: float
    ) -> int:
    """uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate"""
    pass


def get_key_name(key: ImGuiKey) -> str:    # imgui.h:883
    """[DEBUG] returns English name of the key. Those names a provided for debugging purpose and are not meant to be saved persistently not compared."""
    pass


def set_next_frame_want_capture_keyboard(want_capture_keyboard: bool) -> None:    # imgui.h:884
    """Override io.WantCaptureKeyboard flag next frame (said flag is left for your application to handle, typically when True it instructs your app to ignore inputs). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard"; after the next NewFrame() call."""
    pass


def is_mouse_down(button: ImGuiMouseButton) -> bool:    # imgui.h:890
    """is mouse button held?"""
    pass


def is_mouse_clicked(button: ImGuiMouseButton, repeat: bool = False) -> bool:    # imgui.h:891
    """did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1."""
    pass


def is_mouse_released(button: ImGuiMouseButton) -> bool:    # imgui.h:892
    """did mouse button released? (went from Down to !Down)"""
    pass


def is_mouse_double_clicked(button: ImGuiMouseButton) -> bool:    # imgui.h:893
    """did mouse button float-clicked? Same as GetMouseClickedCount() == 2. (note that a float-click will also report IsMouseClicked() == True)"""
    pass


def get_mouse_clicked_count(button: ImGuiMouseButton) -> int:    # imgui.h:894
    """return the number of successive mouse-clicks at the time where a click happen (otherwise 0)."""
    pass


def is_mouse_hovering_rect(    # imgui.h:895
    r_min: ImVec2,
    r_max: ImVec2,
    clip: bool = True
    ) -> bool:
    """is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block."""
    pass


def is_mouse_pos_valid(mouse_pos: ImVec2 = None) -> bool:    # imgui.h:896
    """by convention we use (-sys.float_info.max,-sys.float_info.max) to denote that there is no mouse available"""
    pass


def is_any_mouse_down() -> bool:    # imgui.h:897
    """[WILL OBSOLETE] is any mouse button held? This was designed for backends, but prefer having backend maintain a mask of held mouse buttons, because upcoming input queue system will make this invalid."""
    pass


def get_mouse_pos() -> ImVec2:    # imgui.h:898
    """shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls"""
    pass


def get_mouse_pos_on_opening_current_popup() -> ImVec2:    # imgui.h:899
    """retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)"""
    pass


def is_mouse_dragging(    # imgui.h:900
    button: ImGuiMouseButton,
    lock_threshold: float = -1.0
    ) -> bool:
    """is mouse dragging? (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)"""
    pass


def get_mouse_drag_delta(    # imgui.h:901
    button: ImGuiMouseButton = 0,
    lock_threshold: float = -1.0
    ) -> ImVec2:
    """return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)"""
    pass


def reset_mouse_drag_delta(button: ImGuiMouseButton = 0) -> None:    # imgui.h:902
    pass


def get_mouse_cursor() -> ImGuiMouseCursor:    # imgui.h:903
    """get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you"""
    pass


def set_mouse_cursor(cursor_type: ImGuiMouseCursor) -> None:    # imgui.h:904
    """set desired cursor type"""
    pass


def set_next_frame_want_capture_mouse(want_capture_mouse: bool) -> None:    # imgui.h:905
    """Override io.WantCaptureMouse flag next frame (said flag is left for your application to handle, typical when True it instucts your app to ignore inputs). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse;" after the next NewFrame() call."""
    pass


def get_clipboard_text() -> str:    # imgui.h:909
    """Clipboard Utilities
    - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard.
    """
    pass


def set_clipboard_text(text: str) -> None:    # imgui.h:910
    pass


def load_ini_settings_from_disk(ini_filename: str) -> None:    # imgui.h:916
    """call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename)."""
    pass


def load_ini_settings_from_memory(ini_data: str, ini_size: int = 0) -> None:    # imgui.h:917
    """call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source."""
    pass


def save_ini_settings_to_disk(ini_filename: str) -> None:    # imgui.h:918
    """this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext)."""
    pass


def save_ini_settings_to_memory(out_ini_size: int = None) -> str:    # imgui.h:919
    """return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings."""
    pass


def debug_text_encoding(text: str) -> None:    # imgui.h:922
    """Debug Utilities"""
    pass


def debug_check_version_and_data_layout(    # imgui.h:923
    version_str: str,
    sz_io: int,
    sz_style: int,
    sz_vec2: int,
    sz_vec4: int,
    sz_drawvert: int,
    sz_drawidx: int
    ) -> bool:
    """This is called by IMGUI_CHECKVERSION() macro."""
    pass

# </namespace ImGui>


class ImGuiWindowFlags_(Enum):    # imgui.h:941
    """Flags for ImGui::Begin()"""
    none = 0
    no_title_bar = 1 << 0                # Disable title-bar
    no_resize = 1 << 1                   # Disable user resizing with the lower-right grip
    no_move = 1 << 2                     # Disable user moving the window
    no_scrollbar = 1 << 3                # Disable scrollbars (window can still scroll with mouse or programmatically)
    no_scroll_with_mouse = 1 << 4        # Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.
    no_collapse = 1 << 5                 # Disable user collapsing window by float-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).
    always_auto_resize = 1 << 6          # Resize every window to its content every frame
    no_background = 1 << 7               # Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).
    no_saved_settings = 1 << 8           # Never load/save settings in .ini file
    no_mouse_inputs = 1 << 9             # Disable catching mouse, hovering test with pass through.
    menu_bar = 1 << 10                   # Has a menu-bar
    horizontal_scrollbar = 1 << 11       # Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.
    no_focus_on_appearing = 1 << 12      # Disable taking focus when transitioning from hidden to visible state
    no_bring_to_front_on_focus = 1 << 13 # Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)
    always_vertical_scrollbar = 1 << 14  # Always show vertical scrollbar (even if ContentSize.y < Size.y)
    always_horizontal_scrollbar = 1<< 15 # Always show horizontal scrollbar (even if ContentSize.x < Size.x)
    always_use_window_padding = 1 << 16  # Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)
    no_nav_inputs = 1 << 18              # No gamepad/keyboard navigation within the window
    no_nav_focus = 1 << 19               # No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)
    unsaved_document = 1 << 20           # Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
    no_nav = no_nav_inputs | no_nav_focus
    no_decoration = no_title_bar | no_resize | no_scrollbar | no_collapse
    no_inputs = no_mouse_inputs | no_nav_inputs | no_nav_focus
    
    # [Internal]
    nav_flattened = 1 << 23              # [BETA] On child window: allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows.
    child_window = 1 << 24               # Don't use! For internal use by BeginChild()
    tooltip = 1 << 25                    # Don't use! For internal use by BeginTooltip()
    popup = 1 << 26                      # Don't use! For internal use by BeginPopup()
    modal = 1 << 27                      # Don't use! For internal use by BeginPopupModal()
    child_menu = 1 << 28                 # Don't use! For internal use by BeginMenu()
    # ImGuiWindowFlags_ResizeFromAnySide    = 1 << 17,  // [Obsolete] --> Set io.ConfigWindowsResizeFromEdges=True and make sure mouse cursors are supported by backend (io.BackendFlags  ImGuiBackendFlags_HasMouseCursors)


class ImGuiInputTextFlags_(Enum):    # imgui.h:979
    """Flags for ImGui::InputText()"""
    none = 0
    chars_decimal = 1 << 0            # Allow 0123456789.+-/
    chars_hexadecimal = 1 << 1        # Allow 0123456789ABCDEFabcdef
    chars_uppercase = 1 << 2          # Turn a..z into A..Z
    chars_no_blank = 1 << 3           # Filter out spaces, tabs
    auto_select_all = 1 << 4          # Select entire text when first taking mouse focus
    enter_returns_true = 1 << 5       # Return 'True' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.
    callback_completion = 1 << 6      # Callback on pressing TAB (for completion handling)
    callback_history = 1 << 7         # Callback on pressing Up/Down arrows (for history handling)
    callback_always = 1 << 8          # Callback on each iteration. User code may query cursor position, modify text buffer.
    callback_char_filter = 1 << 9     # Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.
    allow_tab_input = 1 << 10         # Pressing TAB input a '\t' character into the text field
    ctrl_enter_for_new_line = 1 << 11 # In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).
    no_horizontal_scroll = 1 << 12    # Disable following the cursor horizontally
    always_overwrite = 1 << 13        # Overwrite mode
    read_only = 1 << 14               # Read-only mode
    password = 1 << 15                # Password mode, display all characters as ''
    no_undo_redo = 1 << 16            # Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().
    chars_scientific = 1 << 17        # Allow 0123456789.+-/eE (Scientific notation input)
    callback_resize = 1 << 18         # Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)
    callback_edit = 1 << 19
    # Callback on any edit (note that InputText() already returns True on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)
    
    # Obsolete names (will be removed soon)


class ImGuiTreeNodeFlags_(Enum):    # imgui.h:1010
    """Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader()"""
    none = 0
    selected = 1 << 0                  # Draw as selected
    framed = 1 << 1                    # Draw frame with background (e.g. for CollapsingHeader)
    allow_item_overlap = 1 << 2        # Hit testing to allow subsequent widgets to overlap this one
    no_tree_push_on_open = 1 << 3      # Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack
    no_auto_open_on_log = 1 << 4       # Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)
    default_open = 1 << 5              # Default node to be open
    open_on_double_click = 1 << 6      # Need float-click to open node
    open_on_arrow = 1 << 7             # Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or float-click all box to open.
    leaf = 1 << 8                      # No collapsing, no arrow (use as a convenience for leaf nodes).
    bullet = 1 << 9                    # Display a bullet instead of arrow
    frame_padding = 1 << 10            # Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().
    span_avail_width = 1 << 11         # Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.
    span_full_width = 1 << 12          # Extend hit box to the left-most and right-most edges (bypass the indented area).
    nav_left_jumps_back_here = 1 << 13 # (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)
    # ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 14,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible
    collapsing_header = framed | no_tree_push_on_open | no_auto_open_on_log


class ImGuiPopupFlags_(Enum):    # imgui.h:1039
    """Flags for OpenPopup(), BeginPopupContext(), IsPopupOpen() functions.
    - To be backward compatible with older API which took an 'int mouse_button = 1' argument, we need to treat
    small flags values as a mouse button index, so we encode the mouse button in the first few bits of the flags.
    It is therefore guaranteed to be legal to pass a mouse button index in ImGuiPopupFlags.
    - For the same reason, we exceptionally default the ImGuiPopupFlags argument of BeginPopupContextXXX functions to 1 instead of 0.
    IMPORTANT: because the default parameter is 1 (==ImGuiPopupFlags_MouseButtonRight), if you rely on the default parameter
    and want to another another flag, you need to pass in the ImGuiPopupFlags_MouseButtonRight flag.
    - Multiple buttons currently cannot be combined/or-ed in those functions (we could allow it later).
    """
    none = 0
    mouse_button_left = 0                # For BeginPopupContext(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)
    mouse_button_right = 1               # For BeginPopupContext(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)
    mouse_button_middle = 2              # For BeginPopupContext(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)
    mouse_button_mask_ = 0x1F
    mouse_button_default_ = 1
    no_open_over_existing_popup = 1 << 5 # For OpenPopup(), BeginPopupContext(): don't open if there's already a popup at the same level of the popup stack
    no_open_over_items = 1 << 6          # For BeginPopupContextWindow(): don't return True when hovering items, only when hovering empty space
    any_popup_id = 1 << 7                # For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.
    any_popup_level = 1 << 8             # For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)
    any_popup = any_popup_id | any_popup_level


class ImGuiSelectableFlags_(Enum):    # imgui.h:1055
    """Flags for ImGui::Selectable()"""
    none = 0
    dont_close_popups = 1 << 0  # Clicking this don't close parent popup window
    span_all_columns = 1 << 1   # Selectable frame can span all columns (text will still fit in current column)
    allow_double_click = 1 << 2 # Generate press events on float clicks too
    disabled = 1 << 3           # Cannot be selected, display grayed out text
    allow_item_overlap = 1 << 4 # (WIP) Hit testing to allow subsequent widgets to overlap this one


class ImGuiComboFlags_(Enum):    # imgui.h:1066
    """Flags for ImGui::BeginCombo()"""
    none = 0
    popup_align_left = 1 << 0 # Align the popup toward the left by default
    height_small = 1 << 1     # Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()
    height_regular = 1 << 2   # Max ~8 items visible (default)
    height_large = 1 << 3     # Max ~20 items visible
    height_largest = 1 << 4   # As many fitting items as possible
    no_arrow_button = 1 << 5  # Display on the preview box without the square arrow button
    no_preview = 1 << 6       # Display only a square arrow button
    height_mask_ = height_small | height_regular | height_large | height_largest


class ImGuiTabBarFlags_(Enum):    # imgui.h:1080
    """Flags for ImGui::BeginTabBar()"""
    none = 0
    reorderable = 1 << 0                       # Allow manually dragging tabs to re-order them + New tabs are appended at the end of list
    auto_select_new_tabs = 1 << 1              # Automatically select new tabs when they appear
    tab_list_popup_button = 1 << 2             # Disable buttons to open the tab list popup
    no_close_with_middle_mouse_button = 1 << 3 # Disable behavior of closing tabs (that are submitted with p_open != None) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered()  IsMouseClicked(2)) p_open = False.
    no_tab_list_scrolling_buttons = 1 << 4     # Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)
    no_tooltip = 1 << 5                        # Disable tooltips when hovering a tab
    fitting_policy_resize_down = 1 << 6        # Resize tabs when they don't fit
    fitting_policy_scroll = 1 << 7             # Add scroll buttons when tabs don't fit
    fitting_policy_mask_ = fitting_policy_resize_down | fitting_policy_scroll
    fitting_policy_default_ = fitting_policy_resize_down


class ImGuiTabItemFlags_(Enum):    # imgui.h:1096
    """Flags for ImGui::BeginTabItem()"""
    none = 0
    unsaved_document = 1 << 0                  # Display a dot next to the title + tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
    set_selected = 1 << 1                      # Trigger flag to programmatically make the tab selected when calling BeginTabItem()
    no_close_with_middle_mouse_button = 1 << 2 # Disable behavior of closing tabs (that are submitted with p_open != None) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered()  IsMouseClicked(2)) p_open = False.
    no_push_id = 1 << 3                        # Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem()
    no_tooltip = 1 << 4                        # Disable tooltip for the given tab
    no_reorder = 1 << 5                        # Disable reordering this tab or having another tab cross over this tab
    leading = 1 << 6                           # Enforce the tab position to the left of the tab bar (after the tab list popup button)
    trailing = 1 << 7                          # Enforce the tab position to the right of the tab bar (before the scrolling buttons)


class ImGuiTableFlags_(Enum):    # imgui.h:1131
    """Flags for ImGui::BeginTable()
    - Important! Sizing policies have complex and subtle side effects, much more so than you would expect.
    Read comments/demos carefully + experiment with live demos to get acquainted with them.
    - The DEFAULT sizing policies are:
    - Default to ImGuiTableFlags_SizingFixedFit    if ScrollX is on, or if host window has ImGuiWindowFlags_AlwaysAutoResize.
    - Default to ImGuiTableFlags_SizingStretchSame if ScrollX is off.
    - When ScrollX is off:
    - Table defaults to ImGuiTableFlags_SizingStretchSame -> all Columns defaults to ImGuiTableColumnFlags_WidthStretch with same weight.
    - Columns sizing policy allowed: Stretch (default), Fixed/Auto.
    - Fixed Columns (if any) will generally obtain their requested width (unless the table cannot fit them all).
    - Stretch Columns will share the remaining width according to their respective weight.
    - Mixed Fixed/Stretch columns is possible but has various side-effects on resizing behaviors.
    The typical use of mixing sizing policies is: any number of LEADING Fixed columns, followed by one or two TRAILING Stretch columns.
    (this is because the visible order of columns have subtle but necessary effects on how they react to manual resizing).
    - When ScrollX is on:
    - Table defaults to ImGuiTableFlags_SizingFixedFit -> all Columns defaults to ImGuiTableColumnFlags_WidthFixed
    - Columns sizing policy allowed: Fixed/Auto mostly.
    - Fixed Columns can be enlarged as needed. Table will show an horizontal scrollbar if needed.
    - When using auto-resizing (non-resizable) fixed columns, querying the content width to use item right-alignment e.g. SetNextItemWidth(-sys.float_info.min) doesn't make sense, would create a feedback loop.
    - Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on, UNLESS you have specified a value for 'inner_width' in BeginTable().
    If you specify a value for 'inner_width' then effectively the scrolling space is known and Stretch or mixed Fixed/Stretch columns become meaningful again.
    - Read on documentation at the top of imgui_tables.cpp for details.
    """
    # Features
    none = 0
    resizable = 1 << 0                                # Enable resizing columns.
    reorderable = 1 << 1                              # Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)
    hideable = 1 << 2                                 # Enable hiding/disabling columns in context menu.
    sortable = 1 << 3                                 # Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.
    no_saved_settings = 1 << 4                        # Disable persisting columns order, width and sort settings in the .ini file.
    context_menu_in_body = 1 << 5                     # Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().
    # Decorations
    row_bg = 1 << 6                                   # Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)
    borders_inner_h = 1 << 7                          # Draw horizontal borders between rows.
    borders_outer_h = 1 << 8                          # Draw horizontal borders at the top and bottom.
    borders_inner_v = 1 << 9                          # Draw vertical borders between columns.
    borders_outer_v = 1 << 10                         # Draw vertical borders on the left and right sides.
    borders_h = borders_inner_h | borders_outer_h     # Draw horizontal borders.
    borders_v = borders_inner_v | borders_outer_v     # Draw vertical borders.
    borders_inner = borders_inner_v | borders_inner_h # Draw inner borders.
    borders_outer = borders_outer_v | borders_outer_h # Draw outer borders.
    borders = borders_inner | borders_outer           # Draw all borders.
    no_borders_in_body = 1 << 11                      # [ALPHA] Disable vertical borders in columns Body (borders will always appears in Headers). -> May move to style
    no_borders_in_body_until_resize = 1 << 12         # [ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appears in Headers). -> May move to style
    # Sizing Policy (read above for defaults)
    sizing_fixed_fit = 1 << 13                        # Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.
    sizing_fixed_same = 2 << 13                       # Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.
    sizing_stretch_prop = 3 << 13                     # Columns default to _WidthStretch with default weights proportional to each columns contents widths.
    sizing_stretch_same = 4 << 13                     # Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().
    # Sizing Extra Options
    no_host_extend_x = 1 << 16                        # Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.
    no_host_extend_y = 1 << 17                        # Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.
    no_keep_columns_visible = 1 << 18                 # Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.
    precise_widths = 1 << 19                          # Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.
    # Clipping
    no_clip = 1 << 20                                 # Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().
    # Padding
    pad_outer_x = 1 << 21                             # Default if BordersOuterV is on. Enable outer-most padding. Generally desirable if you have headers.
    no_pad_outer_x = 1 << 22                          # Default if BordersOuterV is off. Disable outer-most padding.
    no_pad_inner_x = 1 << 23                          # Disable inner padding between columns (float inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).
    # Scrolling
    scroll_x = 1 << 24                                # Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this create a child window, ScrollY is currently generally recommended when using ScrollX.
    scroll_y = 1 << 25                                # Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.
    # Sorting
    sort_multi = 1 << 26                              # Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).
    sort_tristate = 1 << 27                           # Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).
    
    # [Internal] Combinations and masks
    sizing_mask_ = sizing_fixed_fit | sizing_fixed_same | sizing_stretch_prop | sizing_stretch_same
    
    # Obsolete names (will be removed soon)


class ImGuiTableColumnFlags_(Enum):    # imgui.h:1188
    """Flags for ImGui::TableSetupColumn()"""
    # Input configuration flags
    none = 0
    disabled = 1 << 0                # Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)
    default_hide = 1 << 1            # Default as a hidden/disabled column.
    default_sort = 1 << 2            # Default as a sorting column.
    width_stretch = 1 << 3           # Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).
    width_fixed = 1 << 4             # Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).
    no_resize = 1 << 5               # Disable manual resizing.
    no_reorder = 1 << 6              # Disable manual reordering this column, this will also prevent other columns from crossing over this column.
    no_hide = 1 << 7                 # Disable ability to hide/disable this column.
    no_clip = 1 << 8                 # Disable clipping for this column (all NoClip columns will render in a same draw command).
    no_sort = 1 << 9                 # Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).
    no_sort_ascending = 1 << 10      # Disable ability to sort in the ascending direction.
    no_sort_descending = 1 << 11     # Disable ability to sort in the descending direction.
    no_header_label = 1 << 12        # TableHeadersRow() will not submit label for this column. Convenient for some small columns. Name will still appear in context menu.
    no_header_width = 1 << 13        # Disable header text width contribution to automatic column width.
    prefer_sort_ascending = 1 << 14  # Make the initial sort direction Ascending when first sorting on this column (default).
    prefer_sort_descending = 1 << 15 # Make the initial sort direction Descending when first sorting on this column.
    indent_enable = 1 << 16          # Use current Indent value when entering cell (default for column 0).
    indent_disable = 1 << 17         # Ignore current Indent value when entering cell (default for columns > 0). Indentation changes _within_ the cell will still be honored.
    
    # Output status flags, read-only via TableGetColumnFlags()
    is_enabled = 1 << 24             # Status: is enabled == not hidden by user/api (referred to as "Hide" in _DefaultHide and _NoHide) flags.
    is_visible = 1 << 25             # Status: is visible == is enabled AND not clipped by scrolling.
    is_sorted = 1 << 26              # Status: is currently part of the sort specs
    is_hovered = 1 << 27             # Status: is hovered by mouse
    
    # [Internal] Combinations and masks
    width_mask_ = width_stretch | width_fixed
    indent_mask_ = indent_enable | indent_disable
    status_mask_ = is_enabled | is_visible | is_sorted | is_hovered
    no_direct_resize_ = 1 << 30
    # [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)
    
    # Obsolete names (will be removed soon)


class ImGuiTableRowFlags_(Enum):    # imgui.h:1230
    """Flags for ImGui::TableNextRow()"""
    none = 0
    headers = 1 << 0 # Identify header row (set default background color + width of its contents accounted differently for auto column width)


class ImGuiTableBgTarget_(Enum):    # imgui.h:1245
    """Enum for ImGui::TableSetBgColor()
    Background colors are rendering in 3 layers:
    - Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.
    - Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.
    - Layer 2: draw with CellBg color if set.
    The purpose of the two row/columns layers is to let you decide if a background color changes should override or blend with the existing color.
    When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.
    If you set the color of RowBg0 target, your color will override the existing RowBg0 color.
    If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.
    """
    none = 0
    row_bg0 = 1 # Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)
    row_bg1 = 2 # Set row background color 1 (generally used for selection marking)
    cell_bg = 3 # Set cell background color (top-most color)


class ImGuiFocusedFlags_(Enum):    # imgui.h:1254
    """Flags for ImGui::IsWindowFocused()"""
    none = 0
    child_windows = 1 << 0      # Return True if any children of the window is focused
    root_window = 1 << 1        # Test from root window (top most parent of the current hierarchy)
    any_window = 1 << 2         # Return True if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!
    no_popup_hierarchy = 1 << 3 # Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
    # ImGuiFocusedFlags_DockHierarchy               = 1 << 4,   // Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
    root_and_child_windows = root_window | child_windows


class ImGuiHoveredFlags_(Enum):    # imgui.h:1268
    """Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()
    Note: if you are trying to check whether your mouse should be dispatched to Dear ImGui or to your app, you should use 'io.WantCaptureMouse' instead! Please read the FAQ!
    Note: windows with the ImGuiWindowFlags_NoInputs flag are ignored by IsWindowHovered() calls.
    """
    none = 0                                   # Return True if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.
    child_windows = 1 << 0                     # IsWindowHovered() only: Return True if any children of the window is hovered
    root_window = 1 << 1                       # IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)
    any_window = 1 << 2                        # IsWindowHovered() only: Return True if any window is hovered
    no_popup_hierarchy = 1 << 3                # IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
    # ImGuiHoveredFlags_DockHierarchy               = 1 << 4,   // IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
    allow_when_blocked_by_popup = 1 << 5       # Return True even if a popup window is normally blocking access to this item/window
    # ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 << 6,   // Return True even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.
    allow_when_blocked_by_active_item = 1 << 7 # Return True even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.
    allow_when_overlapped = 1 << 8             # IsItemHovered() only: Return True even if the position is obstructed or overlapped by another window
    allow_when_disabled = 1 << 9               # IsItemHovered() only: Return True even if the item is disabled
    no_nav_override = 1 << 10                  # Disable using gamepad/keyboard navigation state when active, always query mouse.
    rect_only = allow_when_blocked_by_popup | allow_when_blocked_by_active_item | allow_when_overlapped
    root_and_child_windows = root_window | child_windows


class ImGuiDragDropFlags_(Enum):    # imgui.h:1287
    """Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()"""
    none = 0
    # BeginDragDropSource() flags
    source_no_preview_tooltip = 1 << 0                                      # By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disable this behavior.
    source_no_disable_hover = 1 << 1                                        # By default, when dragging we clear data so that IsItemHovered() will return False, to avoid subsequent user code submitting tooltips. This flag disable this behavior so you can still call IsItemHovered() on the source item.
    source_no_hold_to_open_others = 1 << 2                                  # Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.
    source_allow_null_id = 1 << 3                                           # Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.
    source_extern = 1 << 4                                                  # External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return True. Only one Extern source can be active simultaneously.
    source_auto_expire_payload = 1 << 5                                     # Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)
    # AcceptDragDropPayload() flags
    accept_before_delivery = 1 << 10                                        # AcceptDragDropPayload() will returns True even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.
    accept_no_draw_default_rect = 1 << 11                                   # Do not draw the default highlight rectangle when hovering over target.
    accept_no_preview_tooltip = 1 << 12                                     # Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.
    accept_peek_only = accept_before_delivery | accept_no_draw_default_rect # For peeking ahead and inspecting the payload before delivery.


class ImGuiDataType_(Enum):    # imgui.h:1309
    """A primary data type"""
    s8 = 0     # signed char / char (with sensible compilers)
    u8 = 1     # unsigned char
    s16 = 2    # short
    u16 = 3    # unsigned short
    s32 = 4    # int
    u32 = 5    # int
    s64 = 6    # int int / __int64
    u64 = 7    # int int / unsigned __int64
    float = 8  # float
    double = 9 # float
    count = 10


class ImGuiDir_(Enum):    # imgui.h:1325
    """A cardinal direction"""
    none = -1
    left = 0
    right = 1
    up = 2
    down = 3
    count = 4


class ImGuiSortDirection_(Enum):    # imgui.h:1336
    """A sorting direction"""
    none = 0
    ascending = 1  # Ascending = 0->9, A->Z etc.
    descending = 2 # Descending = 9->0, Z->A etc.


class ImGuiKey_(Enum):    # imgui.h:1345
    """Keys value 0 to 511 are left unused as legacy native/opaque key values (< 1.87)
    Keys value >= 512 are named keys (>= 1.87)
    """
    # Keyboard
    none = 0
    tab = 512                   # == ImGuiKey_NamedKey_BEGIN
    left_arrow = 513
    right_arrow = 514
    up_arrow = 515
    down_arrow = 516
    page_up = 517
    page_down = 518
    home = 519
    end = 520
    insert = 521
    delete = 522
    backspace = 523
    space = 524
    enter = 525
    escape = 526
    left_ctrl = 527
    left_shift = 528
    left_alt = 529
    left_super = 530
    right_ctrl = 531
    right_shift = 532
    right_alt = 533
    right_super = 534
    menu = 535
    _0 = 536
    _1 = 537
    _2 = 538
    _3 = 539
    _4 = 540
    _5 = 541
    _6 = 542
    _7 = 543
    _8 = 544
    _9 = 545
    a = 546
    b = 547
    c = 548
    d = 549
    e = 550
    f = 551
    g = 552
    h = 553
    i = 554
    j = 555
    k = 556
    l = 557
    m = 558
    n = 559
    o = 560
    p = 561
    q = 562
    r = 563
    s = 564
    t = 565
    u = 566
    v = 567
    w = 568
    x = 569
    y = 570
    z = 571
    f1 = 572
    f2 = 573
    f3 = 574
    f4 = 575
    f5 = 576
    f6 = 577
    f7 = 578
    f8 = 579
    f9 = 580
    f10 = 581
    f11 = 582
    f12 = 583
    apostrophe = 584            # '
    comma = 585                 # ,
    minus = 586                 # -
    period = 587                # .
    slash = 588                 # /
    semicolon = 589             # ;
    equal = 590                 # =
    left_bracket = 591          # [
    backslash = 592             # \ (this text inhibit multiline comment caused by backslash)
    right_bracket = 593         # ]
    grave_accent = 594          # `
    caps_lock = 595
    scroll_lock = 596
    num_lock = 597
    print_screen = 598
    pause = 599
    keypad0 = 600
    keypad1 = 601
    keypad2 = 602
    keypad3 = 603
    keypad4 = 604
    keypad5 = 605
    keypad6 = 606
    keypad7 = 607
    keypad8 = 608
    keypad9 = 609
    keypad_decimal = 610
    keypad_divide = 611
    keypad_multiply = 612
    keypad_subtract = 613
    keypad_add = 614
    keypad_enter = 615
    keypad_equal = 616
    
    # Gamepad (some of those are analog values, 0.0f to 1.0f)                              // NAVIGATION action
    gamepad_start = 617         # Menu (Xbox)          + (Switch)   Start/Options (PS) // --
    gamepad_back = 618          # View (Xbox)          - (Switch)   Share (PS)         // --
    gamepad_face_up = 619       # Y (Xbox)             X (Switch)   Triangle (PS)      // -> ImGuiNavInput_Input
    gamepad_face_down = 620     # A (Xbox)             B (Switch)   Cross (PS)         // -> ImGuiNavInput_Activate
    gamepad_face_left = 621     # X (Xbox)             Y (Switch)   Square (PS)        // -> ImGuiNavInput_Menu
    gamepad_face_right = 622    # B (Xbox)             A (Switch)   Circle (PS)        // -> ImGuiNavInput_Cancel
    gamepad_dpad_up = 623       # D-pad Up                                             // -> ImGuiNavInput_DpadUp
    gamepad_dpad_down = 624     # D-pad Down                                           // -> ImGuiNavInput_DpadDown
    gamepad_dpad_left = 625     # D-pad Left                                           // -> ImGuiNavInput_DpadLeft
    gamepad_dpad_right = 626    # D-pad Right                                          // -> ImGuiNavInput_DpadRight
    gamepad_l1 = 627            # L Bumper (Xbox)      L (Switch)   L1 (PS)            // -> ImGuiNavInput_FocusPrev + ImGuiNavInput_TweakSlow
    gamepad_r1 = 628            # R Bumper (Xbox)      R (Switch)   R1 (PS)            // -> ImGuiNavInput_FocusNext + ImGuiNavInput_TweakFast
    gamepad_l2 = 629            # L Trigger (Xbox)     ZL (Switch)  L2 (PS) [Analog]
    gamepad_r2 = 630            # R Trigger (Xbox)     ZR (Switch)  R2 (PS) [Analog]
    gamepad_l3 = 631            # L Thumbstick (Xbox)  L3 (Switch)  L3 (PS)
    gamepad_r3 = 632            # R Thumbstick (Xbox)  R3 (Switch)  R3 (PS)
    gamepad_l_stick_up = 633    # [Analog]                                             // -> ImGuiNavInput_LStickUp
    gamepad_l_stick_down = 634  # [Analog]                                             // -> ImGuiNavInput_LStickDown
    gamepad_l_stick_left = 635  # [Analog]                                             // -> ImGuiNavInput_LStickLeft
    gamepad_l_stick_right = 636 # [Analog]                                             // -> ImGuiNavInput_LStickRight
    gamepad_r_stick_up = 637    # [Analog]
    gamepad_r_stick_down = 638  # [Analog]
    gamepad_r_stick_left = 639  # [Analog]
    gamepad_r_stick_right = 640 # [Analog]
    
    # Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls)
    # - This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing
    # them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc.
    # - Code polling every keys (e.g. an interface to detect a key press for input mapping) might want to ignore those
    # and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiKey_ModCtrl).
    # - In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys.
    # In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and
    # backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...
    mod_ctrl = 641
    mod_shift = 642
    mod_alt = 643
    mod_super = 644
    
    # End of list
    count = 645                 # No valid ImGuiKey is ever greater than this value
    
    # [Internal] Prior to 1.87 we required user to fill io.KeysDown[512] using their own native index + a io.KeyMap[] array.
    # We are ditching this method but keeping a legacy path for user code doing e.g. IsKeyPressed(MY_NATIVE_KEY_CODE)
    named_key_begin = 512
    named_key_end = count
    named_key_count = named_key_end - named_key_begin
    


class ImGuiModFlags_(Enum):    # imgui.h:1457
    """Helper "flags" version of key-mods to store and compare multiple key-mods easily. Sometimes used for storage (e.g. io.KeyMods) but otherwise not much used in public API."""
    none = 0
    ctrl = 1 << 0
    shift = 1 << 1
    alt = 1 << 2   # Menu
    super = 1 << 3 # Cmd/Super/Windows key


class ImGuiNavInput_(Enum):    # imgui.h:1471
    """Gamepad/Keyboard navigation
    Since >= 1.87 backends you generally don't need to care about this enum since io.NavInputs[] is setup automatically. This might become private/internal some day.
    Keyboard: Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard to enable. NewFrame() will automatically fill io.NavInputs[] based on your io.AddKeyEvent() calls.
    Gamepad:  Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad to enable. Backend: set ImGuiBackendFlags_HasGamepad and fill the io.NavInputs[] fields before calling NewFrame(). Note that io.NavInputs[] is cleared by EndFrame().
    Read instructions in imgui.cpp for more details. Download PNG/PSD at http://dearimgui.org/controls_sheets.
    """
    # Gamepad Mapping
    activate = 0     # Activate / Open / Toggle / Tweak value       // e.g. Cross  (PS4), A (Xbox), A (Switch), Space (Keyboard)
    cancel = 1       # Cancel / Close / Exit                        // e.g. Circle (PS4), B (Xbox), B (Switch), Escape (Keyboard)
    input = 2        # Text input / On-Screen keyboard              // e.g. Triang.(PS4), Y (Xbox), X (Switch), Return (Keyboard)
    menu = 3         # Tap: Toggle menu / Hold: Focus, Move, Resize // e.g. Square (PS4), X (Xbox), Y (Switch), Alt (Keyboard)
    dpad_left = 4    # Move / Tweak / Resize window (w/ PadMenu)    // e.g. D-pad Left/Right/Up/Down (Gamepads), Arrow keys (Keyboard)
    dpad_right = 5
    dpad_up = 6
    dpad_down = 7
    l_stick_left = 8 # Scroll / Move window (w/ PadMenu)            // e.g. Left Analog Stick Left/Right/Up/Down
    l_stick_right = 9
    l_stick_up = 10
    l_stick_down = 11
    focus_prev = 12  # Focus Next window (w/ PadMenu)               // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)
    focus_next = 13  # Focus Prev window (w/ PadMenu)               // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)
    tweak_slow = 14  # Slower tweaks                                // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)
    tweak_fast = 15  # Faster tweaks                                // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)
    
    # [Internal] Don't use directly! This is used internally to differentiate keyboard from gamepad inputs for behaviors that require to differentiate them.
    # Keyboard behavior that have no corresponding gamepad mapping (e.g. CTRL+TAB) will be directly reading from keyboard keys instead of io.NavInputs[].
    key_left_ = 16   # Move left                                    // = Arrow keys
    key_right_ = 17  # Move right
    key_up_ = 18     # Move up
    key_down_ = 19   # Move down
    count = 20


class ImGuiConfigFlags_(Enum):    # imgui.h:1501
    """Configuration flags stored in io.ConfigFlags. Set by user/application."""
    none = 0
    nav_enable_keyboard = 1 << 0      # Master keyboard navigation enable flag. NewFrame() will automatically fill io.NavInputs[] based on io.AddKeyEvent() calls
    nav_enable_gamepad = 1 << 1       # Master gamepad navigation enable flag. This is mostly to instruct your imgui backend to fill io.NavInputs[]. Backend also needs to set ImGuiBackendFlags_HasGamepad.
    nav_enable_set_mouse_pos = 1 << 2 # Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=True. If enabled you MUST honor io.WantSetMousePos requests in your backend, otherwise ImGui will react as if the mouse is jumping around back and forth.
    nav_no_capture_keyboard = 1 << 3  # Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.
    no_mouse = 1 << 4                 # Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the backend.
    no_mouse_cursor_change = 1 << 5   # Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.
    
    # User storage (to allow your backend/engine to communicate to code that may be shared between multiple projects. Those flags are NOT used by core Dear ImGui)
    is_srgb = 1 << 20                 # Application is SRGB-aware.
    is_touch_screen = 1 << 21         # Application is using a touch screen instead of a mouse.


class ImGuiBackendFlags_(Enum):    # imgui.h:1517
    """Backend capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom backend."""
    none = 0
    has_gamepad = 1 << 0             # Backend Platform supports gamepad and currently has one connected.
    has_mouse_cursors = 1 << 1       # Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.
    has_set_mouse_pos = 1 << 2       # Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).
    renderer_has_vtx_offset = 1 << 3 # Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.


class ImGuiCol_(Enum):    # imgui.h:1527
    """Enumeration for PushStyleColor() / PopStyleColor()"""
    text = 0
    text_disabled = 1
    window_bg = 2                # Background of normal windows
    child_bg = 3                 # Background of child windows
    popup_bg = 4                 # Background of popups, menus, tooltips windows
    border = 5
    border_shadow = 6
    frame_bg = 7                 # Background of checkbox, radio button, plot, slider, text input
    frame_bg_hovered = 8
    frame_bg_active = 9
    title_bg = 10
    title_bg_active = 11
    title_bg_collapsed = 12
    menu_bar_bg = 13
    scrollbar_bg = 14
    scrollbar_grab = 15
    scrollbar_grab_hovered = 16
    scrollbar_grab_active = 17
    check_mark = 18
    slider_grab = 19
    slider_grab_active = 20
    button = 21
    button_hovered = 22
    button_active = 23
    header = 24                  # Header colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem
    header_hovered = 25
    header_active = 26
    separator = 27
    separator_hovered = 28
    separator_active = 29
    resize_grip = 30             # Resize grip in lower-right and lower-left corners of windows.
    resize_grip_hovered = 31
    resize_grip_active = 32
    tab = 33                     # TabItem in a TabBar
    tab_hovered = 34
    tab_active = 35
    tab_unfocused = 36
    tab_unfocused_active = 37
    plot_lines = 38
    plot_lines_hovered = 39
    plot_histogram = 40
    plot_histogram_hovered = 41
    table_header_bg = 42         # Table header background
    table_border_strong = 43     # Table outer and header borders (prefer using Alpha=1.0 here)
    table_border_light = 44      # Table inner borders (prefer using Alpha=1.0 here)
    table_row_bg = 45            # Table row background (even rows)
    table_row_bg_alt = 46        # Table row background (odd rows)
    text_selected_bg = 47
    drag_drop_target = 48        # Rectangle highlighting a drop target
    nav_highlight = 49           # Gamepad/keyboard: current highlighted item
    nav_windowing_highlight = 50 # Highlight window when using CTRL+TAB
    nav_windowing_dim_bg = 51    # Darken/colorize entire screen behind the CTRL+TAB window list, when active
    modal_window_dim_bg = 52     # Darken/colorize entire screen behind a modal window, when one is active
    count = 53


class ImGuiStyleVar_(Enum):    # imgui.h:1592
    """Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.
    - The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code.
    During initialization or between frames, feel free to just poke into ImGuiStyle directly.
    - Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description.
    In Visual Studio IDE: CTRL+comma ("Edit.GoToAll") can follow symbols in comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
    With Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols in comments.
    - When changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.
    """
    # Enum name --------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)
    alpha = 0                  # float     Alpha
    disabled_alpha = 1         # float     DisabledAlpha
    window_padding = 2         # ImVec2    WindowPadding
    window_rounding = 3        # float     WindowRounding
    window_border_size = 4     # float     WindowBorderSize
    window_min_size = 5        # ImVec2    WindowMinSize
    window_title_align = 6     # ImVec2    WindowTitleAlign
    child_rounding = 7         # float     ChildRounding
    child_border_size = 8      # float     ChildBorderSize
    popup_rounding = 9         # float     PopupRounding
    popup_border_size = 10     # float     PopupBorderSize
    frame_padding = 11         # ImVec2    FramePadding
    frame_rounding = 12        # float     FrameRounding
    frame_border_size = 13     # float     FrameBorderSize
    item_spacing = 14          # ImVec2    ItemSpacing
    item_inner_spacing = 15    # ImVec2    ItemInnerSpacing
    indent_spacing = 16        # float     IndentSpacing
    cell_padding = 17          # ImVec2    CellPadding
    scrollbar_size = 18        # float     ScrollbarSize
    scrollbar_rounding = 19    # float     ScrollbarRounding
    grab_min_size = 20         # float     GrabMinSize
    grab_rounding = 21         # float     GrabRounding
    tab_rounding = 22          # float     TabRounding
    button_text_align = 23     # ImVec2    ButtonTextAlign
    selectable_text_align = 24 # ImVec2    SelectableTextAlign
    count = 25


class ImGuiButtonFlags_(Enum):    # imgui.h:1624
    """Flags for InvisibleButton() [extended in imgui_internal.h]"""
    none = 0
    mouse_button_left = 1 << 0   # React on left mouse button (default)
    mouse_button_right = 1 << 1  # React on right mouse button
    mouse_button_middle = 1 << 2 # React on center mouse button
    
    # [Internal]
    mouse_button_mask_ = mouse_button_left | mouse_button_right | mouse_button_middle
    mouse_button_default_ = mouse_button_left


class ImGuiColorEditFlags_(Enum):    # imgui.h:1637
    """Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()"""
    none = 0
    no_alpha = 1 << 1            #              // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).
    no_picker = 1 << 2           #              // ColorEdit: disable picker when clicking on color square.
    no_options = 1 << 3          #              // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.
    no_small_preview = 1 << 4    #              // ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)
    no_inputs = 1 << 5           #              // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).
    no_tooltip = 1 << 6          #              // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.
    no_label = 1 << 7            #              // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).
    no_side_preview = 1 << 8     #              // ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.
    no_drag_drop = 1 << 9        #              // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.
    no_border = 1 << 10          #              // ColorButton: disable border (which is enforced by default)
    
    # User Options (right-click on widget to change some of them).
    alpha_bar = 1 << 16          #              // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.
    alpha_preview = 1 << 17      #              // ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.
    alpha_preview_half = 1 << 18 #              // ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.
    hdr = 1 << 19                #              // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).
    display_rgb = 1 << 20        # [Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.
    display_hsv = 1 << 21        # [Display]    // "
    display_hex = 1 << 22        # [Display]    // "
    uint8 = 1 << 23              # [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.
    float = 1 << 24              # [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.
    picker_hue_bar = 1 << 25     # [Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.
    picker_hue_wheel = 1 << 26   # [Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.
    input_rgb = 1 << 27          # [Input]      // ColorEdit, ColorPicker: input and output data in RGB format.
    input_hsv = 1 << 28          # [Input]      // ColorEdit, ColorPicker: input and output data in HSV format.
    
    # Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to
    # override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.
    default_options_ = uint8 | display_rgb | input_rgb | picker_hue_bar
    
    # [Internal] Masks
    display_mask_ = display_rgb | display_hsv | display_hex
    data_type_mask_ = uint8 | float
    picker_mask_ = picker_hue_wheel | picker_hue_bar
    input_mask_ = input_rgb | input_hsv
    
    # Obsolete names (will be removed)
    # ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiColorEditFlags_DisplayHSV, ImGuiColorEditFlags_HEX = ImGuiColorEditFlags_DisplayHex  // [renamed in 1.69]


class ImGuiSliderFlags_(Enum):    # imgui.h:1682
    """Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.
    We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.
    """
    none = 0
    always_clamp = 1 << 4       # Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.
    logarithmic = 1 << 5        # Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.
    no_round_to_format = 1 << 6 # Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)
    no_input = 1 << 7           # Disable CTRL+Click or Enter key allowing to input text directly into the widget
    invalid_mask_ = 0x7000000F
    # [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.
    
    # Obsolete names (will be removed)


class ImGuiMouseButton_(Enum):    # imgui.h:1699
    """Identify a mouse button.
    Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.
    """
    left = 0
    right = 1
    middle = 2
    count = 5


class ImGuiMouseCursor_(Enum):    # imgui.h:1709
    """Enumeration for GetMouseCursor()
    User code may request backend to display given cursor by calling SetMouseCursor(), which is why we have some cursors that are marked unused here
    """
    none = -1
    arrow = 0
    text_input = 1  # When hovering over InputText, etc.
    resize_all = 2  # (Unused by Dear ImGui functions)
    resize_ns = 3   # When hovering over an horizontal border
    resize_ew = 4   # When hovering over a vertical border or a column
    resize_nesw = 5 # When hovering over the bottom-left corner of a window
    resize_nwse = 6 # When hovering over the bottom-right corner of a window
    hand = 7        # (Unused by Dear ImGui functions. Use for e.g. hyperlinks)
    not_allowed = 8 # When hovering something with disallowed interaction. Usually a crossed circle.
    count = 9


class ImGuiCond_(Enum):    # imgui.h:1727
    """Enumeration for ImGui::SetWindow(), SetNextWindow(), SetNextItem() functions
    Represent a condition.
    Important: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always.
    """
    none = 0                # No condition (always set the variable), same as _Always
    always = 1 << 0         # No condition (always set the variable)
    once = 1 << 1           # Set the variable once per runtime session (only the first call will succeed)
    first_use_ever = 1 << 2 # Set the variable if the object/window has no persistently saved data (no entry in .ini file)
    appearing = 1 << 3      # Set the variable if the object/window is appearing after being hidden/inactive (or the first time)


class ImDrawFlags_(Enum):    # imgui.h:2465
    """Flags for ImDrawList functions
    (Legacy: bit 0 must always correspond to ImDrawFlags_Closed to be backward compatible with old API using a bool. Bits 1..3 must be unused)
    """
    none = 0
    closed = 1 << 0                            # PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)
    round_corners_top_left = 1 << 4            # AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding > 0.0f, we default to all corners). Was 0x01.
    round_corners_top_right = 1 << 5           # AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding > 0.0f, we default to all corners). Was 0x02.
    round_corners_bottom_left = 1 << 6         # AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding > 0.0f, we default to all corners). Was 0x04.
    round_corners_bottom_right = 1 << 7        # AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding > 0.0f, we default to all corners). Wax 0x08.
    round_corners_none = 1 << 8                # AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding > 0.0f). This is NOT zero, NOT an implicit flag!
    round_corners_top = round_corners_top_left | round_corners_top_right
    round_corners_bottom = round_corners_bottom_left | round_corners_bottom_right
    round_corners_left = round_corners_bottom_left | round_corners_top_left
    round_corners_right = round_corners_bottom_right | round_corners_top_right
    round_corners_all = round_corners_top_left | round_corners_top_right | round_corners_bottom_left | round_corners_bottom_right
    round_corners_default_ = round_corners_all # Default to ALL corners if none of the _RoundCornersXX flags are specified.
    round_corners_mask_ = round_corners_all | round_corners_none


class ImDrawListFlags_(Enum):    # imgui.h:2485
    """Flags for ImDrawList instance. Those are set automatically by ImGui:: functions from ImGuiIO settings, and generally not manipulated directly.
    It is however possible to temporarily alter flags between calls to ImDrawList:: functions.
    """
    none = 0
    anti_aliased_lines = 1 << 0         # Enable anti-aliased lines/borders (2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise 3 the number of triangles)
    anti_aliased_lines_use_tex = 1 << 1 # Enable anti-aliased lines/borders using textures when possible. Require backend to render with bilinear filtering (NOT point/nearest filtering).
    anti_aliased_fill = 1 << 2          # Enable anti-aliased edge around filled shapes (rounded rectangles, circles).
    allow_vtx_offset = 1 << 3           # Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.


class ImFontAtlasFlags_(Enum):    # imgui.h:2722
    """Flags for ImFontAtlas build"""
    none = 0
    no_power_of_two_height = 1 << 0 # Don't round the height to next power of two
    no_mouse_cursors = 1 << 1       # Don't build software mouse cursors into the atlas (save a little texture memory)
    no_baked_lines = 1 << 2         # Don't build thick line textures into the atlas (save a little texture memory, allow support for point/nearest filtering). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU).


class ImGuiViewportFlags_(Enum):    # imgui.h:2904
    """Flags stored in ImGuiViewport::Flags, giving indications to the platform backends."""
    none = 0
    is_platform_window = 1 << 0  # Represent a Platform Window
    is_platform_monitor = 1 << 1 # Represent a Platform Monitor (unused yet)
    owned_by_app = 1 << 2        # Platform Window: is created/managed by the application (rather than a dear imgui backend)


# <namespace ImGui>    # imgui.h:2957
# </namespace ImGui>

# </autogen:pyi>
