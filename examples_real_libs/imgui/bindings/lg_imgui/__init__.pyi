from enum import Enum
import numpy

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# <autogen:pyi> // Autogenerated code below! Do not edit!

# <namespace ImGui>    # imgui.h:278

def create_context(shared_font_atlas: ImFontAtlas = None) -> ImGuiContext:    # imgui.h:284
    """Context creation and access
    - Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between contexts.
    - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()
    for each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for details.
    """
    pass


def destroy_context(ctx: ImGuiContext = None) -> None:    # imgui.h:285
    """None = destroy current context"""
    pass


def get_current_context() -> ImGuiContext:    # imgui.h:286
    pass


def set_current_context(ctx: ImGuiContext) -> None:    # imgui.h:287
    pass


def get_io() -> ImGuiIO:    # imgui.h:290
    """access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)"""
    pass


def get_style() -> ImGuiStyle:    # imgui.h:291
    """access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame!"""
    pass


def new_frame() -> None:    # imgui.h:292
    """start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame()."""
    pass


def end_frame() -> None:    # imgui.h:293
    """ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!"""
    pass


def render() -> None:    # imgui.h:294
    """ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData()."""
    pass


def get_draw_data() -> ImDrawData:    # imgui.h:295
    """valid after Render() and until the next call to NewFrame(). this is what you have to render."""
    pass


def show_demo_window(p_open: bool = None) -> None:    # imgui.h:298
    """create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!"""
    pass


def show_metrics_window(p_open: bool = None) -> None:    # imgui.h:299
    """create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc."""
    pass


def show_stack_tool_window(p_open: bool = None) -> None:    # imgui.h:300
    """create Stack Tool window. hover items with mouse to query information about the source of their unique ID."""
    pass


def show_about_window(p_open: bool = None) -> None:    # imgui.h:301
    """create About window. display Dear ImGui version, credits and build/system information."""
    pass


def show_style_editor(ref: ImGuiStyle = None) -> None:    # imgui.h:302
    """add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)"""
    pass


def show_style_selector(label: str) -> bool:    # imgui.h:303
    """add style selector block (not a window), essentially a combo listing the default styles."""
    pass


def show_font_selector(label: str) -> None:    # imgui.h:304
    """add font selector block (not a window), essentially a combo listing the loaded fonts."""
    pass


def show_user_guide() -> None:    # imgui.h:305
    """add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls)."""
    pass


def get_version() -> str:    # imgui.h:306
    """get the compiled version string e.g. "1.80 WIP" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)"""
    pass


def style_colors_dark(dst: ImGuiStyle = None) -> None:    # imgui.h:309
    """new, recommended style (default)"""
    pass


def style_colors_light(dst: ImGuiStyle = None) -> None:    # imgui.h:310
    """best used with borders and a custom, thicker font"""
    pass


def style_colors_classic(dst: ImGuiStyle = None) -> None:    # imgui.h:311
    """classic imgui style"""
    pass


def begin(name: str, p_open: bool = None, flags: ImGuiWindowFlags = 0) -> bool:    # imgui.h:325
    """Windows
    - Begin() = push window to the stack and start appending to it. End() = pop window from the stack.
    - Passing 'bool p_open != None' shows a window-closing widget in the upper-right corner of the window,
    which clicking will set the boolean to False when clicked.
    - You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.
    Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().
    - Begin() return False to indicate the window is collapsed or fully clipped, so you may early out and omit submitting
    anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!
    [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
    returned True. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
    - Note that the bottom of window stack always contains a window called "Debug".
    """
    pass


def end() -> None:    # imgui.h:326
    pass


def begin_child(    # imgui.h:336
    str_id: str,
    size: ImVec2 = ImVec2(0, 0),
    border: bool = False,
    flags: ImGuiWindowFlags = 0
    ) -> bool:
    """Child Windows
    - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.
    - For each independent axis of 'size': ==0.0f: use remaining host window size / >0.0f: fixed size / <0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).
    - BeginChild() returns False to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.
    Always call a matching EndChild() for each BeginChild() call, regardless of its return value.
    [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
    returned True. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
    """
    pass


def begin_child(    # imgui.h:337
    id: ImGuiID,
    size: ImVec2 = ImVec2(0, 0),
    border: bool = False,
    flags: ImGuiWindowFlags = 0
    ) -> bool:
    pass


def end_child() -> None:    # imgui.h:338
    pass


def is_window_appearing() -> bool:    # imgui.h:342
    """Windows Utilities
    - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into.
    """
    pass


def is_window_collapsed() -> bool:    # imgui.h:343
    pass


def is_window_focused(flags: ImGuiFocusedFlags = 0) -> bool:    # imgui.h:344
    """is current window focused? or its root/child, depending on flags. see flags for options."""
    pass


def is_window_hovered(flags: ImGuiHoveredFlags = 0) -> bool:    # imgui.h:345
    """is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!"""
    pass


def get_window_draw_list() -> ImDrawList:    # imgui.h:346
    """get draw list associated to the current window, to append your own drawing primitives"""
    pass


def get_window_pos() -> ImVec2:    # imgui.h:347
    """get current window position in screen space (useful if you want to do your own drawing via the DrawList API)"""
    pass


def get_window_size() -> ImVec2:    # imgui.h:348
    """get current window size"""
    pass


def get_window_width() -> float:    # imgui.h:349
    """get current window width (shortcut for GetWindowSize().x)"""
    pass


def get_window_height() -> float:    # imgui.h:350
    """get current window height (shortcut for GetWindowSize().y)"""
    pass


def set_next_window_pos(    # imgui.h:354
    pos: ImVec2,
    cond: ImGuiCond = 0,
    pivot: ImVec2 = ImVec2(0, 0)
    ) -> None:
    """set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc."""
    pass


def set_next_window_size(size: ImVec2, cond: ImGuiCond = 0) -> None:    # imgui.h:355
    """set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()"""
    pass


def set_next_window_size_constraints(    # imgui.h:356
    size_min: ImVec2,
    size_max: ImVec2,
    custom_callback: ImGuiSizeCallback = None,
    custom_callback_data: None = None
    ) -> None:
    """set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints."""
    pass


def set_next_window_content_size(size: ImVec2) -> None:    # imgui.h:357
    """set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()"""
    pass


def set_next_window_collapsed(collapsed: bool, cond: ImGuiCond = 0) -> None:    # imgui.h:358
    """set next window collapsed state. call before Begin()"""
    pass


def set_next_window_focus() -> None:    # imgui.h:359
    """set next window to be focused / top-most. call before Begin()"""
    pass


def set_next_window_bg_alpha(alpha: float) -> None:    # imgui.h:360
    """set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground."""
    pass


def set_window_pos(pos: ImVec2, cond: ImGuiCond = 0) -> None:    # imgui.h:361
    """(not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects."""
    pass


def set_window_size(size: ImVec2, cond: ImGuiCond = 0) -> None:    # imgui.h:362
    """(not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects."""
    pass


def set_window_collapsed(collapsed: bool, cond: ImGuiCond = 0) -> None:    # imgui.h:363
    """(not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed()."""
    pass


def set_window_focus() -> None:    # imgui.h:364
    """(not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus()."""
    pass


def set_window_font_scale(scale: float) -> None:    # imgui.h:365
    """[OBSOLETE] set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes()."""
    pass


def set_window_pos(name: str, pos: ImVec2, cond: ImGuiCond = 0) -> None:    # imgui.h:366
    """set named window position."""
    pass


def set_window_size(name: str, size: ImVec2, cond: ImGuiCond = 0) -> None:    # imgui.h:367
    """set named window size. set axis to 0.0f to force an auto-fit on this axis."""
    pass


def set_window_collapsed(    # imgui.h:368
    name: str,
    collapsed: bool,
    cond: ImGuiCond = 0
    ) -> None:
    """set named window collapsed state"""
    pass


def set_window_focus(name: str) -> None:    # imgui.h:369
    """set named window to be focused / top-most. use None to remove focus."""
    pass


def get_content_region_avail() -> ImVec2:    # imgui.h:374
    """== GetContentRegionMax() - GetCursorPos()"""
    pass


def get_content_region_max() -> ImVec2:    # imgui.h:375
    """current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates"""
    pass


def get_window_content_region_min() -> ImVec2:    # imgui.h:376
    """content boundaries min for the full window (roughly (0,0)-Scroll), in window coordinates"""
    pass


def get_window_content_region_max() -> ImVec2:    # imgui.h:377
    """content boundaries max for the full window (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates"""
    pass


def get_scroll_x() -> float:    # imgui.h:380
    """get scrolling amount [0 .. GetScrollMaxX()]"""
    pass


def get_scroll_y() -> float:    # imgui.h:381
    """get scrolling amount [0 .. GetScrollMaxY()]"""
    pass


def set_scroll_x(scroll_x: float) -> None:    # imgui.h:382
    """set scrolling amount [0 .. GetScrollMaxX()]"""
    pass


def set_scroll_y(scroll_y: float) -> None:    # imgui.h:383
    """set scrolling amount [0 .. GetScrollMaxY()]"""
    pass


def get_scroll_max_x() -> float:    # imgui.h:384
    """get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x"""
    pass


def get_scroll_max_y() -> float:    # imgui.h:385
    """get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y"""
    pass


def set_scroll_here_x(center_x_ratio: float = 0.5) -> None:    # imgui.h:386
    """adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead."""
    pass


def set_scroll_here_y(center_y_ratio: float = 0.5) -> None:    # imgui.h:387
    """adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead."""
    pass


def set_scroll_from_pos_x(local_x: float, center_x_ratio: float = 0.5) -> None:    # imgui.h:388
    """adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position."""
    pass


def set_scroll_from_pos_y(local_y: float, center_y_ratio: float = 0.5) -> None:    # imgui.h:389
    """adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position."""
    pass


def push_font(font: ImFont) -> None:    # imgui.h:392
    """use None as a shortcut to push default font"""
    pass


def pop_font() -> None:    # imgui.h:393
    pass


def push_style_color(idx: ImGuiCol, col: ImU32) -> None:    # imgui.h:394
    """modify a style color. always use this if you modify the style after NewFrame()."""
    pass


def push_style_color(idx: ImGuiCol, col: ImVec4) -> None:    # imgui.h:395
    pass


def pop_style_color(count: int = 1) -> None:    # imgui.h:396
    pass


def push_style_var(idx: ImGuiStyleVar, val: float) -> None:    # imgui.h:397
    """modify a style float variable. always use this if you modify the style after NewFrame()."""
    pass


def push_style_var(idx: ImGuiStyleVar, val: ImVec2) -> None:    # imgui.h:398
    """modify a style ImVec2 variable. always use this if you modify the style after NewFrame()."""
    pass


def pop_style_var(count: int = 1) -> None:    # imgui.h:399
    pass


def push_allow_keyboard_focus(allow_keyboard_focus: bool) -> None:    # imgui.h:400
    """== tab stop enable. Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets"""
    pass


def pop_allow_keyboard_focus() -> None:    # imgui.h:401
    pass


def push_button_repeat(repeat: bool) -> None:    # imgui.h:402
    """in 'repeat' mode, Button() functions return repeated True in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame."""
    pass


def pop_button_repeat() -> None:    # imgui.h:403
    pass


def push_item_width(item_width: float) -> None:    # imgui.h:406
    """push width of items for common large "item+label" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -sys.float_info.min always align width to the right side)."""
    pass


def pop_item_width() -> None:    # imgui.h:407
    pass


def set_next_item_width(item_width: float) -> None:    # imgui.h:408
    """set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -sys.float_info.min always align width to the right side)"""
    pass


def calc_item_width() -> float:    # imgui.h:409
    """width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions."""
    pass


def push_text_wrap_pos(wrap_local_pos_x: float = 0.0) -> None:    # imgui.h:410
    """push word-wrapping position for Text() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space"""
    pass


def pop_text_wrap_pos() -> None:    # imgui.h:411
    pass


def get_font() -> ImFont:    # imgui.h:415
    """get current font"""
    pass


def get_font_size() -> float:    # imgui.h:416
    """get current font size (= height in pixels) of current font with current scale applied"""
    pass


def get_font_tex_uv_white_pixel() -> ImVec2:    # imgui.h:417
    """get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API"""
    pass


def get_color_u32(idx: ImGuiCol, alpha_mul: float = 1.0) -> ImU32:    # imgui.h:418
    """retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList"""
    pass


def get_color_u32(col: ImVec4) -> ImU32:    # imgui.h:419
    """retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList"""
    pass


def get_color_u32(col: ImU32) -> ImU32:    # imgui.h:420
    """retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList"""
    pass


def get_style_color_vec4(idx: ImGuiCol) -> ImVec4:    # imgui.h:421
    """retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in."""
    pass


def separator() -> None:    # imgui.h:430
    """separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator."""
    pass


def same_line(offset_from_start_x: float = 0.0, spacing: float = -1.0) -> None:    # imgui.h:431
    """call between widgets or groups to layout them horizontally. X position given in window coordinates."""
    pass


def new_line() -> None:    # imgui.h:432
    """undo a SameLine() or force a new line when in an horizontal-layout context."""
    pass


def spacing() -> None:    # imgui.h:433
    """add vertical spacing."""
    pass


def dummy(size: ImVec2) -> None:    # imgui.h:434
    """add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into."""
    pass


def indent(indent_w: float = 0.0) -> None:    # imgui.h:435
    """move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0"""
    pass


def unindent(indent_w: float = 0.0) -> None:    # imgui.h:436
    """move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0"""
    pass


def begin_group() -> None:    # imgui.h:437
    """lock horizontal starting position"""
    pass


def end_group() -> None:    # imgui.h:438
    """unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)"""
    pass


def get_cursor_pos() -> ImVec2:    # imgui.h:439
    """cursor position in window coordinates (relative to window position)"""
    pass


def get_cursor_pos_x() -> float:    # imgui.h:440
    """  (some functions are using window-relative coordinates, such as: GetCursorPos, GetCursorStartPos, GetContentRegionMax, GetWindowContentRegion etc."""
    pass


def get_cursor_pos_y() -> float:    # imgui.h:441
    """   other functions such as GetCursorScreenPos or everything in ImDrawList::"""
    pass


def set_cursor_pos(local_pos: ImVec2) -> None:    # imgui.h:442
    """   are using the main, absolute coordinate system."""
    pass


def set_cursor_pos_x(local_x: float) -> None:    # imgui.h:443
    """   GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)"""
    pass


def set_cursor_pos_y(local_y: float) -> None:    # imgui.h:444
    pass


def get_cursor_start_pos() -> ImVec2:    # imgui.h:445
    """initial cursor position in window coordinates"""
    pass


def get_cursor_screen_pos() -> ImVec2:    # imgui.h:446
    """cursor position in absolute coordinates (useful to work with ImDrawList API). generally top-left == GetMainViewport()->Pos == (0,0) in single viewport mode, and bottom-right == GetMainViewport()->Pos+Size == io.DisplaySize in single-viewport mode."""
    pass


def set_cursor_screen_pos(pos: ImVec2) -> None:    # imgui.h:447
    """cursor position in absolute coordinates"""
    pass


def align_text_to_frame_padding() -> None:    # imgui.h:448
    """vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)"""
    pass


def get_text_line_height() -> float:    # imgui.h:449
    """~ FontSize"""
    pass


def get_text_line_height_with_spacing() -> float:    # imgui.h:450
    """~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)"""
    pass


def get_frame_height() -> float:    # imgui.h:451
    """~ FontSize + style.FramePadding.y  2"""
    pass


def get_frame_height_with_spacing() -> float:    # imgui.h:452
    """~ FontSize + style.FramePadding.y  2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)"""
    pass


def push_id(str_id: str) -> None:    # imgui.h:465
    """push string into the ID stack (will hash string)."""
    pass


def push_id(str_id_begin: str, str_id_end: str) -> None:    # imgui.h:466
    """push string into the ID stack (will hash string)."""
    pass


def push_id(ptr_id: None) -> None:    # imgui.h:467
    """push pointer into the ID stack (will hash pointer)."""
    pass


def push_id(int_id: int) -> None:    # imgui.h:468
    """push integer into the ID stack (will hash integer)."""
    pass


def pop_id() -> None:    # imgui.h:469
    """pop from the ID stack."""
    pass


def get_id(str_id: str) -> ImGuiID:    # imgui.h:470
    """calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself"""
    pass


def get_id(str_id_begin: str, str_id_end: str) -> ImGuiID:    # imgui.h:471
    pass


def get_id(ptr_id: None) -> ImGuiID:    # imgui.h:472
    pass


def text_unformatted(text: str, text_end: str = None) -> None:    # imgui.h:475
    """raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for int chunks of text."""
    pass


def text(fmt: str) -> None:    # imgui.h:476
    """formatted text"""
    pass


def text_colored(col: ImVec4, fmt: str) -> None:    # imgui.h:478
    """shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();"""
    pass


def text_disabled(fmt: str) -> None:    # imgui.h:480
    """shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();"""
    pass


def text_wrapped(fmt: str) -> None:    # imgui.h:482
    """shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize()."""
    pass


def label_text(label: str, fmt: str) -> None:    # imgui.h:484
    """display text+label aligned the same way as value+label widgets"""
    pass


def bullet_text(fmt: str) -> None:    # imgui.h:486
    """shortcut for Bullet()+Text()"""
    pass


def button(label: str, size: ImVec2 = ImVec2(0, 0)) -> bool:    # imgui.h:492
    """button"""
    pass


def small_button(label: str) -> bool:    # imgui.h:493
    """button with FramePadding=(0,0) to easily embed within text"""
    pass


def invisible_button(    # imgui.h:494
    str_id: str,
    size: ImVec2,
    flags: ImGuiButtonFlags = 0
    ) -> bool:
    """flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)"""
    pass


def arrow_button(str_id: str, dir: ImGuiDir) -> bool:    # imgui.h:495
    """square button with an arrow shape"""
    pass


def image(    # imgui.h:496
    user_texture_id: ImTextureID,
    size: ImVec2,
    uv0: ImVec2 = ImVec2(0, 0),
    uv1: ImVec2 = ImVec2(1,1),
    tint_col: ImVec4 = ImVec4(1,1,1,1),
    border_col: ImVec4 = ImVec4(0,0,0,0)
    ) -> None:
    pass


def image_button(    # imgui.h:497
    user_texture_id: ImTextureID,
    size: ImVec2,
    uv0: ImVec2 = ImVec2(0, 0),
    uv1: ImVec2 = ImVec2(1,1),
    frame_padding: int = -1,
    bg_col: ImVec4 = ImVec4(0,0,0,0),
    tint_col: ImVec4 = ImVec4(1,1,1,1)
    ) -> bool:
    """<0 frame_padding uses default frame padding settings. 0 for no padding"""
    pass


def checkbox(label: str, v: bool) -> bool:    # imgui.h:498
    pass


def checkbox_flags(label: str, flags: int, flags_value: int) -> bool:    # imgui.h:499
    pass


def checkbox_flags(label: str, flags: int, flags_value: int) -> bool:    # imgui.h:500
    pass


def radio_button(label: str, active: bool) -> bool:    # imgui.h:501
    """use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }"""
    pass


def radio_button(label: str, v: int, v_button: int) -> bool:    # imgui.h:502
    """shortcut to handle the above pattern when value is an integer"""
    pass


def progress_bar(    # imgui.h:503
    fraction: float,
    size_arg: ImVec2 = ImVec2(-sys.float_info.min, 0),
    overlay: str = None
    ) -> None:
    pass


def bullet() -> None:    # imgui.h:504
    """draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses"""
    pass


def begin_combo(    # imgui.h:509
    label: str,
    preview_value: str,
    flags: ImGuiComboFlags = 0
    ) -> bool:
    """Widgets: Combo Box
    - The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.
    - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose. This is analogous to how ListBox are created.
    """
    pass


def end_combo() -> None:    # imgui.h:510
    """only call EndCombo() if BeginCombo() returns True!"""
    pass


def combo(    # imgui.h:511
    label: str,
    current_item: int,
    items: List[str],
    popup_max_height_in_items: int = -1
    ) -> bool:
    pass


def combo(    # imgui.h:512
    label: str,
    current_item: int,
    items_separated_by_zeros: str,
    popup_max_height_in_items: int = -1
    ) -> bool:
    """Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0""""
    pass


def drag_float(    # imgui.h:527
    label: str,
    v: float,
    v_speed: float = 1.0,
    v_min: float = 0.0,
    v_max: float = 0.0,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    """If v_min >= v_max we have no bound"""
    pass


def drag_float2(    # imgui.h:528
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_speed: float = 1.0,
    v_min: float = 0.0,
    v_max: float = 0.0,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_float3(    # imgui.h:529
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    v_speed: float = 1.0,
    v_min: float = 0.0,
    v_max: float = 0.0,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_float4(    # imgui.h:530
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    v_3: BoxedFloat,
    v_speed: float = 1.0,
    v_min: float = 0.0,
    v_max: float = 0.0,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_float_range2(    # imgui.h:531
    label: str,
    v_current_min: float,
    v_current_max: float,
    v_speed: float = 1.0,
    v_min: float = 0.0,
    v_max: float = 0.0,
    format: str = "%.3f",
    format_max: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_int(    # imgui.h:532
    label: str,
    v: int,
    v_speed: float = 1.0,
    v_min: int = 0,
    v_max: int = 0,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    """If v_min >= v_max we have no bound"""
    pass


def drag_int2(    # imgui.h:533
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_speed: float = 1.0,
    v_min: int = 0,
    v_max: int = 0,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_int3(    # imgui.h:534
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    v_speed: float = 1.0,
    v_min: int = 0,
    v_max: int = 0,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_int4(    # imgui.h:535
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    v_3: BoxedInt,
    v_speed: float = 1.0,
    v_min: int = 0,
    v_max: int = 0,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_int_range2(    # imgui.h:536
    label: str,
    v_current_min: int,
    v_current_max: int,
    v_speed: float = 1.0,
    v_min: int = 0,
    v_max: int = 0,
    format: str = "%d",
    format_max: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_scalar(    # imgui.h:537
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    v_speed: float = 1.0,
    p_min: None = None,
    p_max: None = None,
    format: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def drag_scalar_n(    # imgui.h:538
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    components: int,
    v_speed: float = 1.0,
    p_min: None = None,
    p_max: None = None,
    format: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_float(    # imgui.h:546
    label: str,
    v: float,
    v_min: float,
    v_max: float,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    """adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display."""
    pass


def slider_float2(    # imgui.h:547
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_min: float,
    v_max: float,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_float3(    # imgui.h:548
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    v_min: float,
    v_max: float,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_float4(    # imgui.h:549
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    v_3: BoxedFloat,
    v_min: float,
    v_max: float,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_angle(    # imgui.h:550
    label: str,
    v_rad: float,
    v_degrees_min: float = -360.0,
    v_degrees_max: float = +360.0,
    format: str = "%.0f deg",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_int(    # imgui.h:551
    label: str,
    v: int,
    v_min: int,
    v_max: int,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_int2(    # imgui.h:552
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_min: int,
    v_max: int,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_int3(    # imgui.h:553
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    v_min: int,
    v_max: int,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_int4(    # imgui.h:554
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    v_3: BoxedInt,
    v_min: int,
    v_max: int,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_scalar(    # imgui.h:555
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    p_min: None,
    p_max: None,
    format: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def slider_scalar_n(    # imgui.h:556
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    components: int,
    p_min: None,
    p_max: None,
    format: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def v_slider_float(    # imgui.h:557
    label: str,
    size: ImVec2,
    v: float,
    v_min: float,
    v_max: float,
    format: str = "%.3f",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def v_slider_int(    # imgui.h:558
    label: str,
    size: ImVec2,
    v: int,
    v_min: int,
    v_max: int,
    format: str = "%d",
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def v_slider_scalar(    # imgui.h:559
    label: str,
    size: ImVec2,
    data_type: ImGuiDataType,
    p_data: None,
    p_min: None,
    p_max: None,
    format: str = None,
    flags: ImGuiSliderFlags = 0
    ) -> bool:
    pass


def input_text(    # imgui.h:564
    label: str,
    buf: char,
    buf_size: int,
    flags: ImGuiInputTextFlags = 0,
    callback: ImGuiInputTextCallback = None,
    user_data: None = None
    ) -> bool:
    """Widgets: Input with Keyboard
    - If you want to use InputText() with str or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.
    - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.
    """
    pass


def input_text_multiline(    # imgui.h:565
    label: str,
    buf: char,
    buf_size: int,
    size: ImVec2 = ImVec2(0, 0),
    flags: ImGuiInputTextFlags = 0,
    callback: ImGuiInputTextCallback = None,
    user_data: None = None
    ) -> bool:
    pass


def input_text_with_hint(    # imgui.h:566
    label: str,
    hint: str,
    buf: char,
    buf_size: int,
    flags: ImGuiInputTextFlags = 0,
    callback: ImGuiInputTextCallback = None,
    user_data: None = None
    ) -> bool:
    pass


def input_float(    # imgui.h:567
    label: str,
    v: float,
    step: float = 0.0,
    step_fast: float = 0.0,
    format: str = "%.3f",
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_float2(    # imgui.h:568
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    format: str = "%.3f",
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_float3(    # imgui.h:569
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    format: str = "%.3f",
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_float4(    # imgui.h:570
    label: str,
    v_0: BoxedFloat,
    v_1: BoxedFloat,
    v_2: BoxedFloat,
    v_3: BoxedFloat,
    format: str = "%.3f",
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_int(    # imgui.h:571
    label: str,
    v: int,
    step: int = 1,
    step_fast: int = 100,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_int2(    # imgui.h:572
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_int3(    # imgui.h:573
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_int4(    # imgui.h:574
    label: str,
    v_0: BoxedInt,
    v_1: BoxedInt,
    v_2: BoxedInt,
    v_3: BoxedInt,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_double(    # imgui.h:575
    label: str,
    v: float,
    step: float = 0.0,
    step_fast: float = 0.0,
    format: str = "%.6f",
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_scalar(    # imgui.h:576
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    p_step: None = None,
    p_step_fast: None = None,
    format: str = None,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def input_scalar_n(    # imgui.h:577
    label: str,
    data_type: ImGuiDataType,
    p_data: None,
    components: int,
    p_step: None = None,
    p_step_fast: None = None,
    format: str = None,
    flags: ImGuiInputTextFlags = 0
    ) -> bool:
    pass


def color_edit3(    # imgui.h:582
    label: str,
    col_0: BoxedFloat,
    col_1: BoxedFloat,
    col_2: BoxedFloat,
    flags: ImGuiColorEditFlags = 0
    ) -> bool:
    """Widgets: Color Editor/Picker (tip: the ColorEdit functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)
    - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float v', the array syntax is just a way to document the number of elements that are expected to be accessible.
    - You can pass the address of a first float element out of a contiguous structure, e.g. myvector.x
    """
    pass


def color_edit4(    # imgui.h:583
    label: str,
    col_0: BoxedFloat,
    col_1: BoxedFloat,
    col_2: BoxedFloat,
    col_3: BoxedFloat,
    flags: ImGuiColorEditFlags = 0
    ) -> bool:
    pass


def color_picker3(    # imgui.h:584
    label: str,
    col_0: BoxedFloat,
    col_1: BoxedFloat,
    col_2: BoxedFloat,
    flags: ImGuiColorEditFlags = 0
    ) -> bool:
    pass


def color_picker4(    # imgui.h:585
    label: str,
    col_0: BoxedFloat,
    col_1: BoxedFloat,
    col_2: BoxedFloat,
    col_3: BoxedFloat,
    flags: ImGuiColorEditFlags = 0,
    ref_col: float = None
    ) -> bool:
    pass


def color_button(    # imgui.h:586
    desc_id: str,
    col: ImVec4,
    flags: ImGuiColorEditFlags = 0,
    size: ImVec2 = ImVec2(0, 0)
    ) -> bool:
    """display a color square/button, hover for details, return True when pressed."""
    pass


def set_color_edit_options(flags: ImGuiColorEditFlags) -> None:    # imgui.h:587
    """initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls."""
    pass


def tree_node(label: str) -> bool:    # imgui.h:591
    """Widgets: Trees
    - TreeNode functions return True when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents.
    """
    pass


def tree_node(str_id: str, fmt: str) -> bool:    # imgui.h:592
    """helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet()."""
    pass


def tree_node(ptr_id: None, fmt: str) -> bool:    # imgui.h:593
    """""""
    pass


def tree_node_ex(label: str, flags: ImGuiTreeNodeFlags = 0) -> bool:    # imgui.h:596
    pass


def tree_node_ex(str_id: str, flags: ImGuiTreeNodeFlags, fmt: str) -> bool:    # imgui.h:597
    pass


def tree_node_ex(ptr_id: None, flags: ImGuiTreeNodeFlags, fmt: str) -> bool:    # imgui.h:598
    pass


def tree_push(str_id: str) -> None:    # imgui.h:601
    """~ Indent()+PushId(). Already called by TreeNode() when returning True, but you can call TreePush/TreePop yourself if desired."""
    pass


def tree_push(ptr_id: None = None) -> None:    # imgui.h:602
    """""""
    pass


def tree_pop() -> None:    # imgui.h:603
    """~ Unindent()+PopId()"""
    pass


def get_tree_node_to_label_spacing() -> float:    # imgui.h:604
    """horizontal distance preceding label when using TreeNode() or Bullet() == (g.FontSize + style.FramePadding.x2) for a regular unframed TreeNode"""
    pass


def collapsing_header(label: str, flags: ImGuiTreeNodeFlags = 0) -> bool:    # imgui.h:605
    """if returning 'True' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop()."""
    pass


def collapsing_header(    # imgui.h:606
    label: str,
    p_visible: bool,
    flags: ImGuiTreeNodeFlags = 0
    ) -> bool:
    """when 'p_visible != None': if 'p_visible==True' display an additional small close button on upper right of the header which will set the bool to False when clicked, if 'p_visible==False' don't display the header."""
    pass


def set_next_item_open(is_open: bool, cond: ImGuiCond = 0) -> None:    # imgui.h:607
    """set next TreeNode/CollapsingHeader open state."""
    pass


def selectable(    # imgui.h:612
    label: str,
    selected: bool = False,
    flags: ImGuiSelectableFlags = 0,
    size: ImVec2 = ImVec2(0, 0)
    ) -> bool:
    """"bool selected" carry the selection state (read-only). Selectable() is clicked is returns True so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height"""
    pass


def selectable(    # imgui.h:613
    label: str,
    p_selected: bool,
    flags: ImGuiSelectableFlags = 0,
    size: ImVec2 = ImVec2(0, 0)
    ) -> bool:
    """"bool p_selected" point to the selection state (read-write), as a convenient helper."""
    pass


def begin_list_box(label: str, size: ImVec2 = ImVec2(0, 0)) -> bool:    # imgui.h:621
    """open a framed scrolling region"""
    pass


def end_list_box() -> None:    # imgui.h:622
    """only call EndListBox() if BeginListBox() returned True!"""
    pass


def list_box(    # imgui.h:623
    label: str,
    current_item: int,
    items: List[str],
    height_in_items: int = -1
    ) -> bool:
    pass


def plot_lines(    # imgui.h:628
    label: str,
    values: numpy.ndarray,
    values_offset: int = 0,
    overlay_text: str = None,
    scale_min: float = sys.float_info.max,
    scale_max: float = sys.float_info.max,
    graph_size: ImVec2 = ImVec2(0, 0),
    stride: int = -1
    ) -> None:
    """Widgets: Data Plotting
    - Consider using ImPlot (https://github.com/epezent/implot) which is much better!
    """
    pass


def plot_histogram(    # imgui.h:630
    label: str,
    values: numpy.ndarray,
    values_offset: int = 0,
    overlay_text: str = None,
    scale_min: float = sys.float_info.max,
    scale_max: float = sys.float_info.max,
    graph_size: ImVec2 = ImVec2(0, 0),
    stride: int = -1
    ) -> None:
    pass


def value(prefix: str, b: bool) -> None:    # imgui.h:635
    """Widgets: Value() Helpers.
    - Those are merely shortcut to calling Text() with a format string. Output single value in "name: value" format (tip: freely declare more in your code to handle your types. you can add functions to the ImGui namespace)
    """
    pass


def value(prefix: str, v: int) -> None:    # imgui.h:636
    pass


def value(prefix: str, v: int) -> None:    # imgui.h:637
    pass


def value(prefix: str, v: float, float_format: str = None) -> None:    # imgui.h:638
    pass


def begin_menu_bar() -> bool:    # imgui.h:645
    """append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window)."""
    pass


def end_menu_bar() -> None:    # imgui.h:646
    """only call EndMenuBar() if BeginMenuBar() returns True!"""
    pass


def begin_main_menu_bar() -> bool:    # imgui.h:647
    """create and append to a full screen menu-bar."""
    pass


def end_main_menu_bar() -> None:    # imgui.h:648
    """only call EndMainMenuBar() if BeginMainMenuBar() returns True!"""
    pass


def begin_menu(label: str, enabled: bool = True) -> bool:    # imgui.h:649
    """create a sub-menu entry. only call EndMenu() if this returns True!"""
    pass


def end_menu() -> None:    # imgui.h:650
    """only call EndMenu() if BeginMenu() returns True!"""
    pass


def menu_item(    # imgui.h:651
    label: str,
    shortcut: str = None,
    selected: bool = False,
    enabled: bool = True
    ) -> bool:
    """return True when activated."""
    pass


def menu_item(    # imgui.h:652
    label: str,
    shortcut: str,
    p_selected: bool,
    enabled: bool = True
    ) -> bool:
    """return True when activated + toggle (p_selected) if p_selected != None"""
    pass


def begin_tooltip() -> None:    # imgui.h:656
    """begin/append a tooltip window. to create full-featured tooltip (with any kind of items)."""
    pass


def end_tooltip() -> None:    # imgui.h:657
    pass


def set_tooltip(fmt: str) -> None:    # imgui.h:658
    """set a text-only tooltip, typically use with ImGui::IsItemHovered(). override any previous call to SetTooltip()."""
    pass


def begin_popup(str_id: str, flags: ImGuiWindowFlags = 0) -> bool:    # imgui.h:673
    """return True if the popup is open, and you can start outputting to it."""
    pass


def begin_popup_modal(    # imgui.h:674
    name: str,
    p_open: bool = None,
    flags: ImGuiWindowFlags = 0
    ) -> bool:
    """return True if the modal is open, and you can start outputting to it."""
    pass


def end_popup() -> None:    # imgui.h:675
    """only call EndPopup() if BeginPopupXXX() returns True!"""
    pass


def open_popup(str_id: str, popup_flags: ImGuiPopupFlags = 0) -> None:    # imgui.h:685
    """call to mark popup as open (don't call every frame!)."""
    pass


def open_popup(id: ImGuiID, popup_flags: ImGuiPopupFlags = 0) -> None:    # imgui.h:686
    """id overload to facilitate calling from nested stacks"""
    pass


def open_popup_on_item_click(    # imgui.h:687
    str_id: str = None,
    popup_flags: ImGuiPopupFlags = 1
    ) -> None:
    """helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)"""
    pass


def close_current_popup() -> None:    # imgui.h:688
    """manually close the popup we have begin-ed into."""
    pass


def begin_popup_context_item(    # imgui.h:695
    str_id: str = None,
    popup_flags: ImGuiPopupFlags = 1
    ) -> bool:
    """open+begin popup when clicked on last item. Use str_id==None to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!"""
    pass


def begin_popup_context_window(    # imgui.h:696
    str_id: str = None,
    popup_flags: ImGuiPopupFlags = 1
    ) -> bool:
    """open+begin popup when clicked on current window."""
    pass


def begin_popup_context_void(    # imgui.h:697
    str_id: str = None,
    popup_flags: ImGuiPopupFlags = 1
    ) -> bool:
    """open+begin popup when clicked in None (where there are no windows)."""
    pass


def is_popup_open(str_id: str, flags: ImGuiPopupFlags = 0) -> bool:    # imgui.h:703
    """return True if the popup is open."""
    pass


def begin_table(    # imgui.h:728
    str_id: str,
    column: int,
    flags: ImGuiTableFlags = 0,
    outer_size: ImVec2 = ImVec2(0.0f, 0.0f),
    inner_width: float = 0.0
    ) -> bool:
    """Tables
    - Full-featured replacement for old Columns API.
    - See Demo->Tables for demo code. See top of imgui_tables.cpp for general commentary.
    - See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.
    The typical call flow is:
    - 1. Call BeginTable(), early out if returning False.
    - 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.
    - 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.
    - 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.
    - 5. Populate contents:
    - In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.
    - If you are using tables as a sort of grid, where every columns is holding the same type of contents,
    you may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().
    TableNextColumn() will automatically wrap-around into the next row if needed.
    - IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!
    - Summary of possible call flow:
    --------------------------------------------------------------------------------------------------------
    TableNextRow() -> TableSetColumnIndex(0) -> Text("Hello 0") -> TableSetColumnIndex(1) -> Text("Hello 1")  // OK
    TableNextRow() -> TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK
    TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK: TableNextColumn() automatically gets to next row!
    TableNextRow()                           -> Text("Hello 0")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!
    --------------------------------------------------------------------------------------------------------
    - 5. Call EndTable()
    """
    pass


def end_table() -> None:    # imgui.h:729
    """only call EndTable() if BeginTable() returns True!"""
    pass


def table_next_row(    # imgui.h:730
    row_flags: ImGuiTableRowFlags = 0,
    min_row_height: float = 0.0
    ) -> None:
    """append into the first cell of a new row."""
    pass


def table_next_column() -> bool:    # imgui.h:731
    """append into the next column (or first column of next row if currently in last column). Return True when column is visible."""
    pass


def table_set_column_index(column_n: int) -> bool:    # imgui.h:732
    """append into the specified column. Return True when column is visible."""
    pass


def table_setup_column(    # imgui.h:742
    label: str,
    flags: ImGuiTableColumnFlags = 0,
    init_width_or_weight: float = 0.0,
    user_id: ImGuiID = 0
    ) -> None:
    """Tables: Headers  Columns declaration
    - Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.
    - Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.
    Headers are required to perform: reordering, sorting, and opening the context menu.
    The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.
    - You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in
    some advanced use cases (e.g. adding custom widgets in header row).
    - Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled.
    """
    pass


def table_setup_scroll_freeze(cols: int, rows: int) -> None:    # imgui.h:743
    """lock columns/rows so they stay visible when scrolled."""
    pass


def table_headers_row() -> None:    # imgui.h:744
    """submit all headers cells based on data provided to TableSetupColumn() + submit context menu"""
    pass


def table_header(label: str) -> None:    # imgui.h:745
    """submit one header cell manually (rarely used)"""
    pass


def table_get_sort_specs() -> ImGuiTableSortSpecs:    # imgui.h:753
    """get latest sort specs for the table (None if not sorting).  Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable()."""
    pass


def table_get_column_count() -> int:    # imgui.h:754
    """return number of columns (value passed to BeginTable)"""
    pass


def table_get_column_index() -> int:    # imgui.h:755
    """return current column index."""
    pass


def table_get_row_index() -> int:    # imgui.h:756
    """return current row index."""
    pass


def table_get_column_name(column_n: int = -1) -> str:    # imgui.h:757
    """return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column."""
    pass


def table_get_column_flags(column_n: int = -1) -> ImGuiTableColumnFlags:    # imgui.h:758
    """return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column."""
    pass


def table_set_column_enabled(column_n: int, v: bool) -> None:    # imgui.h:759
    """change user accessible enabled/disabled state of a column. Set to False to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)"""
    pass


def table_set_bg_color(    # imgui.h:760
    target: ImGuiTableBgTarget,
    color: ImU32,
    column_n: int = -1
    ) -> None:
    """change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details."""
    pass


def columns(count: int = 1, id: str = None, border: bool = True) -> None:    # imgui.h:764
    """Legacy Columns API (prefer using Tables!)
    - You can also use SameLine(pos_x) to mimic simplified columns.
    """
    pass


def next_column() -> None:    # imgui.h:765
    """next column, defaults to current row or next row if the current row is finished"""
    pass


def get_column_index() -> int:    # imgui.h:766
    """get current column index"""
    pass


def get_column_width(column_index: int = -1) -> float:    # imgui.h:767
    """get column width (in pixels). pass -1 to use current column"""
    pass


def set_column_width(column_index: int, width: float) -> None:    # imgui.h:768
    """set column width (in pixels). pass -1 to use current column"""
    pass


def get_column_offset(column_index: int = -1) -> float:    # imgui.h:769
    """get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f"""
    pass


def set_column_offset(column_index: int, offset_x: float) -> None:    # imgui.h:770
    """set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column"""
    pass


def get_columns_count() -> int:    # imgui.h:771
    pass


def begin_tab_bar(str_id: str, flags: ImGuiTabBarFlags = 0) -> bool:    # imgui.h:774
    """create and append into a TabBar"""
    pass


def end_tab_bar() -> None:    # imgui.h:775
    """only call EndTabBar() if BeginTabBar() returns True!"""
    pass


def begin_tab_item(    # imgui.h:776
    label: str,
    p_open: bool = None,
    flags: ImGuiTabItemFlags = 0
    ) -> bool:
    """create a Tab. Returns True if the Tab is selected."""
    pass


def end_tab_item() -> None:    # imgui.h:777
    """only call EndTabItem() if BeginTabItem() returns True!"""
    pass


def tab_item_button(label: str, flags: ImGuiTabItemFlags = 0) -> bool:    # imgui.h:778
    """create a Tab behaving like a button. return True when clicked. cannot be selected in the tab bar."""
    pass


def set_tab_item_closed(tab_or_docked_window_label: str) -> None:    # imgui.h:779
    """notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name."""
    pass


def log_to_tty(auto_open_depth: int = -1) -> None:    # imgui.h:783
    """start logging to tty (stdout)"""
    pass


def log_to_file(auto_open_depth: int = -1, filename: str = None) -> None:    # imgui.h:784
    """start logging to file"""
    pass


def log_to_clipboard(auto_open_depth: int = -1) -> None:    # imgui.h:785
    """start logging to OS clipboard"""
    pass


def log_finish() -> None:    # imgui.h:786
    """stop logging (close file, etc.)"""
    pass


def log_buttons() -> None:    # imgui.h:787
    """helper to display buttons for logging to tty/file/clipboard"""
    pass


def log_text(fmt: str) -> None:    # imgui.h:788
    """pass text data straight to log (without being displayed)"""
    pass


def begin_drag_drop_source(flags: ImGuiDragDropFlags = 0) -> bool:    # imgui.h:796
    """call after submitting an item which may be dragged. when this return True, you can call SetDragDropPayload() + EndDragDropSource()"""
    pass


def set_drag_drop_payload(    # imgui.h:797
    type: str,
    data: None,
    sz: int,
    cond: ImGuiCond = 0
    ) -> bool:
    """type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui. Return True when payload has been accepted."""
    pass


def end_drag_drop_source() -> None:    # imgui.h:798
    """only call EndDragDropSource() if BeginDragDropSource() returns True!"""
    pass


def begin_drag_drop_target() -> bool:    # imgui.h:799
    """call after submitting an item that may receive a payload. If this returns True, you can call AcceptDragDropPayload() + EndDragDropTarget()"""
    pass


def accept_drag_drop_payload(    # imgui.h:800
    type: str,
    flags: ImGuiDragDropFlags = 0
    ) -> ImGuiPayload:
    """accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released."""
    pass


def end_drag_drop_target() -> None:    # imgui.h:801
    """only call EndDragDropTarget() if BeginDragDropTarget() returns True!"""
    pass


def get_drag_drop_payload() -> ImGuiPayload:    # imgui.h:802
    """peek directly into the current payload from anywhere. may return None. use ImGuiPayload::IsDataType() to test for the payload type."""
    pass


def begin_disabled(disabled: bool = True) -> None:    # imgui.h:808
    """Disabling [BETA API]
    - Disable all user interactions and dim items visuals (applying style.DisabledAlpha over current colors)
    - Those can be nested but it cannot be used to enable an already disabled section (a single BeginDisabled(True) in the stack is enough to keep everything disabled)
    - BeginDisabled(False) essentially does nothing useful but is provided to facilitate use of boolean expressions. If you can avoid calling BeginDisabled(False)/EndDisabled() best to avoid it.
    """
    pass


def end_disabled() -> None:    # imgui.h:809
    pass


def push_clip_rect(    # imgui.h:813
    clip_rect_min: ImVec2,
    clip_rect_max: ImVec2,
    intersect_with_current_clip_rect: bool
    ) -> None:
    """Clipping
    - Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only.
    """
    pass


def pop_clip_rect() -> None:    # imgui.h:814
    pass


def set_item_default_focus() -> None:    # imgui.h:818
    """make last item the default focused item of a window."""
    pass


def set_keyboard_focus_here(offset: int = 0) -> None:    # imgui.h:819
    """focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget."""
    pass


def is_item_hovered(flags: ImGuiHoveredFlags = 0) -> bool:    # imgui.h:824
    """is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options."""
    pass


def is_item_active() -> bool:    # imgui.h:825
    """is the last item active? (e.g. button being held, text field being edited. This will continuously return True while holding mouse button on an item. Items that don't interact will always return False)"""
    pass


def is_item_focused() -> bool:    # imgui.h:826
    """is the last item focused for keyboard/gamepad navigation?"""
    pass


def is_item_clicked(mouse_button: ImGuiMouseButton = 0) -> bool:    # imgui.h:827
    """is the last item hovered and mouse clicked on? ()  == IsMouseClicked(mouse_button)  IsItemHovered()Important. () this it NOT equivalent to the behavior of e.g. Button(). Read comments in function definition."""
    pass


def is_item_visible() -> bool:    # imgui.h:828
    """is the last item visible? (items may be out of sight because of clipping/scrolling)"""
    pass


def is_item_edited() -> bool:    # imgui.h:829
    """did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets."""
    pass


def is_item_activated() -> bool:    # imgui.h:830
    """was the last item just made active (item was previously inactive)."""
    pass


def is_item_deactivated() -> bool:    # imgui.h:831
    """was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing."""
    pass


def is_item_deactivated_after_edit() -> bool:    # imgui.h:832
    """was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get False positives (some widgets such as Combo()/ListBox()/Selectable() will return True even when clicking an already selected item)."""
    pass


def is_item_toggled_open() -> bool:    # imgui.h:833
    """was the last item open state toggled? set by TreeNode()."""
    pass


def is_any_item_hovered() -> bool:    # imgui.h:834
    """is any item hovered?"""
    pass


def is_any_item_active() -> bool:    # imgui.h:835
    """is any item active?"""
    pass


def is_any_item_focused() -> bool:    # imgui.h:836
    """is any item focused?"""
    pass


def get_item_rect_min() -> ImVec2:    # imgui.h:837
    """get upper-left bounding rectangle of the last item (screen space)"""
    pass


def get_item_rect_max() -> ImVec2:    # imgui.h:838
    """get lower-right bounding rectangle of the last item (screen space)"""
    pass


def get_item_rect_size() -> ImVec2:    # imgui.h:839
    """get size of last item"""
    pass


def set_item_allow_overlap() -> None:    # imgui.h:840
    """allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area."""
    pass


def get_main_viewport() -> ImGuiViewport:    # imgui.h:846
    """return primary/default viewport. This can never be None."""
    pass


def get_background_draw_list() -> ImDrawList:    # imgui.h:849
    """this draw list will be the first rendered one. Useful to quickly draw shapes/text behind dear imgui contents."""
    pass


def get_foreground_draw_list() -> ImDrawList:    # imgui.h:850
    """this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents."""
    pass


def is_rect_visible(size: ImVec2) -> bool:    # imgui.h:853
    """test if rectangle (of given size, starting from cursor position) is visible / not clipped."""
    pass


def is_rect_visible(rect_min: ImVec2, rect_max: ImVec2) -> bool:    # imgui.h:854
    """test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side."""
    pass


def get_time() -> float:    # imgui.h:855
    """get global imgui time. incremented by io.DeltaTime every frame."""
    pass


def get_frame_count() -> int:    # imgui.h:856
    """get global imgui frame count. incremented by 1 every frame."""
    pass


def get_draw_list_shared_data() -> ImDrawListSharedData:    # imgui.h:857
    """you may use this when creating your own ImDrawList instances."""
    pass


def get_style_color_name(idx: ImGuiCol) -> str:    # imgui.h:858
    """get a string corresponding to the enum value (for display, saving, etc.)."""
    pass


def set_state_storage(storage: ImGuiStorage) -> None:    # imgui.h:859
    """replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)"""
    pass


def get_state_storage() -> ImGuiStorage:    # imgui.h:860
    pass


def begin_child_frame(    # imgui.h:861
    id: ImGuiID,
    size: ImVec2,
    flags: ImGuiWindowFlags = 0
    ) -> bool:
    """helper to create a child window / scrolling region that looks like a normal widget frame"""
    pass


def end_child_frame() -> None:    # imgui.h:862
    """always call EndChildFrame() regardless of BeginChildFrame() return values (which indicates a collapsed/clipped window)"""
    pass


def calc_text_size(    # imgui.h:865
    text: str,
    text_end: str = None,
    hide_text_after_double_hash: bool = False,
    wrap_width: float = -1.0
    ) -> ImVec2:
    """Text Utilities"""
    pass


def color_convert_u32_to_float4(in: ImU32) -> ImVec4:    # imgui.h:868
    """Color Utilities"""
    pass


def color_convert_float4_to_u32(in: ImVec4) -> ImU32:    # imgui.h:869
    pass


def color_convert_hs_vto_rgb(    # imgui.h:871
    h: float,
    s: float,
    v: float,
    out_r: float,
    out_g: float,
    out_b: float
    ) -> None:
    pass


def is_key_down(key: ImGuiKey) -> bool:    # imgui.h:879
    """is key being held."""
    pass


def is_key_pressed(key: ImGuiKey, repeat: bool = True) -> bool:    # imgui.h:880
    """was key pressed (went from !Down to Down)? if repeat=True, uses io.KeyRepeatDelay / KeyRepeatRate"""
    pass


def is_key_released(key: ImGuiKey) -> bool:    # imgui.h:881
    """was key released (went from Down to !Down)?"""
    pass


def get_key_pressed_amount(    # imgui.h:882
    key: ImGuiKey,
    repeat_delay: float,
    rate: float
    ) -> int:
    """uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate"""
    pass


def get_key_name(key: ImGuiKey) -> str:    # imgui.h:883
    """[DEBUG] returns English name of the key. Those names a provided for debugging purpose and are not meant to be saved persistently not compared."""
    pass


def set_next_frame_want_capture_keyboard(want_capture_keyboard: bool) -> None:    # imgui.h:884
    """Override io.WantCaptureKeyboard flag next frame (said flag is left for your application to handle, typically when True it instructs your app to ignore inputs). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard"; after the next NewFrame() call."""
    pass


def is_mouse_down(button: ImGuiMouseButton) -> bool:    # imgui.h:890
    """is mouse button held?"""
    pass


def is_mouse_clicked(button: ImGuiMouseButton, repeat: bool = False) -> bool:    # imgui.h:891
    """did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1."""
    pass


def is_mouse_released(button: ImGuiMouseButton) -> bool:    # imgui.h:892
    """did mouse button released? (went from Down to !Down)"""
    pass


def is_mouse_double_clicked(button: ImGuiMouseButton) -> bool:    # imgui.h:893
    """did mouse button float-clicked? Same as GetMouseClickedCount() == 2. (note that a float-click will also report IsMouseClicked() == True)"""
    pass


def get_mouse_clicked_count(button: ImGuiMouseButton) -> int:    # imgui.h:894
    """return the number of successive mouse-clicks at the time where a click happen (otherwise 0)."""
    pass


def is_mouse_hovering_rect(    # imgui.h:895
    r_min: ImVec2,
    r_max: ImVec2,
    clip: bool = True
    ) -> bool:
    """is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block."""
    pass


def is_mouse_pos_valid(mouse_pos: ImVec2 = None) -> bool:    # imgui.h:896
    """by convention we use (-sys.float_info.max,-sys.float_info.max) to denote that there is no mouse available"""
    pass


def is_any_mouse_down() -> bool:    # imgui.h:897
    """[WILL OBSOLETE] is any mouse button held? This was designed for backends, but prefer having backend maintain a mask of held mouse buttons, because upcoming input queue system will make this invalid."""
    pass


def get_mouse_pos() -> ImVec2:    # imgui.h:898
    """shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls"""
    pass


def get_mouse_pos_on_opening_current_popup() -> ImVec2:    # imgui.h:899
    """retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)"""
    pass


def is_mouse_dragging(    # imgui.h:900
    button: ImGuiMouseButton,
    lock_threshold: float = -1.0
    ) -> bool:
    """is mouse dragging? (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)"""
    pass


def get_mouse_drag_delta(    # imgui.h:901
    button: ImGuiMouseButton = 0,
    lock_threshold: float = -1.0
    ) -> ImVec2:
    """return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)"""
    pass


def reset_mouse_drag_delta(button: ImGuiMouseButton = 0) -> None:    # imgui.h:902
    pass


def get_mouse_cursor() -> ImGuiMouseCursor:    # imgui.h:903
    """get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you"""
    pass


def set_mouse_cursor(cursor_type: ImGuiMouseCursor) -> None:    # imgui.h:904
    """set desired cursor type"""
    pass


def set_next_frame_want_capture_mouse(want_capture_mouse: bool) -> None:    # imgui.h:905
    """Override io.WantCaptureMouse flag next frame (said flag is left for your application to handle, typical when True it instucts your app to ignore inputs). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse;" after the next NewFrame() call."""
    pass


def get_clipboard_text() -> str:    # imgui.h:909
    """Clipboard Utilities
    - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard.
    """
    pass


def set_clipboard_text(text: str) -> None:    # imgui.h:910
    pass


def load_ini_settings_from_disk(ini_filename: str) -> None:    # imgui.h:916
    """call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename)."""
    pass


def load_ini_settings_from_memory(ini_data: str, ini_size: int = 0) -> None:    # imgui.h:917
    """call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source."""
    pass


def save_ini_settings_to_disk(ini_filename: str) -> None:    # imgui.h:918
    """this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext)."""
    pass


def save_ini_settings_to_memory(out_ini_size: int = None) -> str:    # imgui.h:919
    """return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings."""
    pass


def debug_text_encoding(text: str) -> None:    # imgui.h:922
    """Debug Utilities"""
    pass


def debug_check_version_and_data_layout(    # imgui.h:923
    version_str: str,
    sz_io: int,
    sz_style: int,
    sz_vec2: int,
    sz_vec4: int,
    sz_drawvert: int,
    sz_drawidx: int
    ) -> bool:
    """This is called by IMGUI_CHECKVERSION() macro."""
    pass

# </namespace ImGui>


# <namespace ImGui>    # imgui.h:2957
# </namespace ImGui>

# </autogen:pyi>
