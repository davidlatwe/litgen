* Emacs tips

** General
M = Alt
C = Ctrl
M-x = select / search command

C-g : quit current command

** Org mode tips
*** Basics

[[https://orgmode.org/orgguide.html#Introduction][Org mode quick guide]]
Link to org [[https://orgmode.org/][mode homepage]] (M-x org-insert-link)
[[https://orgmode.org/worg/org-tutorials/org4beginners.html][org4beginners]]


*** Tab or Shift-Tab on * to collapse locally or globally
Ctrl-Enter to enter a new title of same level below sub-hierarchy
Alt-Enter to enter a new title directly under
Alt-Up/Down to move sections

Format text: Here is *some* content, and some //italic//

*** diagrams and drawings


(local-unset-key "M-a")
(define-prefix-command 'pascal-map)
(define-key pascal-map (kbd "s") 'org-babel-execute-src-block)
(local-set-key (kbd "M-a") 'pascal-map)
(setq org-confirm-babel-evaluate nil)

*** With mermaid

Installed https://github.com/arnm/ob-mermaid

See doc of mermaid, run mermaid via C-c C-c
Display images via `org-display-inline-images` (M-x to select action)
Also toggle display via C-c C-x C-v (wtf is that shortcut!)


#+begin_src mermaid :file doc/diagrams/test.png
sequenceDiagram
 A-->B: Works!
 B-->C: Again!q
#+end_src

#+RESULTS:
[[file:doc/diagrams/test.png]]

*** With Plantuml


#+begin_src plantuml :file doc/diagrams/test_puml.png
title Authentication Sequence

Alice->Bob: Authentication Request
note right of Bob: Bob thinks about it
Bob->Alice: Authentication Response
#+end_src

#+RESULTS:
[[file:doc/diagrams/test_puml.png]]



*** Tables: start adding | then use Tab key for magic
| Name  | Age | Sex |
|-------+-----+-----|
| David |  37 | M   |
|       |     |     |



*** Lists: use Alt-Enter / use Alt-Shift-Enter (i.e M-S-RET) to  add checkboxes

- [ ] First item
- [ ]
- Second Item
- Third

Example:



*** Code blocks : #+begin_src lang / #+end_src (C-C ' to edit the code block in separate buffer)

#+NAME example (optional name)
#+begin_src cpp
  int main()
  {
    return 0;

  }
#+end_src


*** TODOs List (C-c C-t )

*** Item 1
*** DONE Item

CLOSED: [2022-09-18 Sun 10:54]



**** Sub Heading
**** A
   int a = 0



* immvision

** demo mandelbrot emscripten multithread:

Test multithread qui semble marcher:
    voir /Users/pascal/dvp/OpenSource/ImGuiWork/hello_imgui/build_emscripten
    et /Users/pascal/dvp/OpenSource/ImGuiWork/hello_imgui/src/hello_imgui_demos/thread_ems/thread_ems.main.cpp

    En gros, ca marche avec Firefox et Chrome.
    plein de modifs:
       1. Server web qui Envoie des headers necessaires pour rendre multithread accept√©
          /Users/pascal/dvp/OpenSource/ImGuiWork/hello_imgui/src/hello_imgui_demos/thread_ems/simple-cors-http-server.py
       2. Pas de sleep ni de join sur thread principal!
       3. options de compil : faire choix dans
          - supprimer -s ALLOW_MEMORY_GROWTH=1 ?
          - add_compile_options("-pthread")
            add_link_options("-pthread")
          + add_compile_options("-sPTHREAD_POOL_SIZE=100")
          + add_compile_options("-sINITIAL_MEMORY=167772160")



* Dyndoc
Voir note sur telephone


* Web Version Python + ImGui Bundle?
** With REPL
See https://pyodide.org/en/stable/index.html
It has opencv + lots of doc!!!

Later !!!!

* Litgen doc
Revoir https://www.youtube.com/watch?v=8Ab3ArE8W3s&t=270s ("Stop Writing Dead Programs" by Jack Rusher (Strange Loop 2022))
** Sources de stubs connues: $
Voir https://github.com/python/typeshed and https://github.com/microsoft/python-type-stubs

** Alternatives a litgen:
        https://pybind11.readthedocs.io/en/stable/compiling.html#generating-binding-code-automatically
        AutoWIG:
            https://www.youtube.com/watch?v=N4q_Vud77Hw


** Diagram srcmlcpp and litgen adapted classes

Failed attempt to remove confirmation for C-c C-c
(setq org-confirm-babel-evaluate f)

#+begin_src plantuml :file packages/srcmlcpp/doc/srcml_cpp_diagram.png
  class ET.Element
  package srcmlcpp {
          class SrcmlOptions {
                  + encoding
                  +preserve_empty_lines
                  ...
          }

          class SrcmlXmlWrapper {
                  + options: SrcmlOptions
                  + srcml_xml: ET.Element
                  + parent: opt[SrcmlXmlWrapper]

                  + str_code_verbatim()
                  + str_xml()
                  ...
          }

          SrcmlXmlWrapper <|... SrcmlXmlWrapper: opt(parent)
          SrcmlXmlWrapper *-- ET.Element
          SrcmlXmlWrapper o-- SrcmlOptions

          class CppElement {
                  + str_code()
                  + visit...()
          }

          class CppElementComments {
                  comment_on_previous_lines: str
                  comment_end_of_line: str
          }

          CppElement --|> SrcmlXmlWrapper

          class CppElementAndComment {
                  cpp_element_comments
          }
          CppElementAndComment --|> CppElement
          CppElementAndComment *-- CppElementComments


          /'
          CppEmptyLine --|> CppElementAndComment
          CppUnprocessed--|> CppElementAndComment
          '/

          class CppBlock {
                  block_children: List[CppElementAndComment]
          }

          CppBlock *-- CppElementAndComment : List

          class CppUnit {
                  "Represent a full file"
          }
          CppUnit --|> CppBlock

          class CppBlockContent {
                  "used by function and anonymous blocks"
          }

          CppBlockContent --|> CppBlock


          class CppPublicProtectedPrivate {
                  + access_type
                  + default_or_explicit
          }
          CppPublicProtectedPrivate --|> CppBlock

          class CppType {
                  typenames: List[str]
                  specifiers: List[str]
                  modifiers: List[str]
          }

          CppType --|> CppElement

          class  CppDecl {
                  cpp_type: CppType
                  decl_name: str
                  c_array_code: str
                  initial_value_code: str
          }

          CppDecl *-- CppType
          CppDecl --|> CppElementAndComment

          class CppDeclStatement {
                  cpp_decls: List[CppDecl]
          }

          CppDeclStatement --|> CppElementAndComment
          CppDeclStatement *-- CppDecl : List

          class CppParameter {
                  decl: CppDecl
                  template_type: CppType
                  template_name: str = ""
          }
          CppParameter --|> CppElementAndComment
          CppParameter *-- CppDecl


          class CppParameterList {
                  List of parameters of a function
                  parameters: List[CppParameter]
          }

          CppParameterList *-- "many" CppParameter

          class CppTemplate {
                  "Template parameters"
                  + parameter_list: CppParameterList
          }
          CppTemplate *-- CppParameterList
          CppTemplate --|> CppElement


          class CppFunctionDecl {
                  "function or method"
                  specifiers: List[str]
                  return_type: CppType
                  parameter_list: CppParameterList
                  template: CppTemplate
                  is_auto_decl: bool
                  function_name: str
          }

          CppFunctionDecl --|> CppElementAndComment
          /' CppFunctionDecl *-- CppType: return_type '/
          CppFunctionDecl *-- CppParameterList
          CppFunctionDecl *-- CppTemplate : optional


          class CppFunction {
                  block
          }
          CppFunction --|> CppFunctionDecl
          CppFunction *-- CppBlockContent

          CppConstructorDecl --|> CppFunctionDecl
          CppContructor --|> CppFunction

          /'
          class CppSuper {
                  specifier
                  superclass_name
          }
          '/

          class CppSuperList {
                  super_list: List[CppSuper]
          }
          /'CppSuperList *-- "many" CppSuper'/
          CppSuperList --|> CppElement


          class CppStruct {
                  class_name: str
                  super_list: CppSuperList
                  block: CppBlock
                  template: CppTemplate

                  +get_public_blocks()
                  +get_public_elements()
                  ...
          }
          CppStruct *-- CppBlock
          CppStruct *-- CppTemplate
          CppStruct *-- CppSuperList

          CppClass --|> CppStruct


          /'CppComment --|> CppElementAndComment'/

          class CppNamespace {
                  ns_name: str
                  block: CppBlock
          }
          CppNamespace --|> CppElementAndComment
          CppNamespace *-- CppBlock

          class CppEnum {
                  block: CppBlock
                  enum_type
                  enum_name
          }

          CppEnum --|> CppElementAndComment
          CppEnum *-- CppBlock
  }


  package litgen {

          class LitgenOptions {
          }

          class AdaptedElement {
                  _cpp_element: CppElementAndComment
                  options: LitgenOptions
                  +str_stub()
                  +str_pydef()
          }
          AdaptedElement *-- CppElementAndComment
          AdaptedElement o-- LitgenOptions

          class AdaptedBlock
          AdaptedBlock --|> AdaptedElement
          AdaptedBlock ... CppBlock

          class AdaptedNamespace
          AdaptedNamespace --|> AdaptedElement
          AdaptedNamespace ... CppNamespace

          class AdaptedDecl
          AdaptedDecl --|> AdaptedElement
          AdaptedDecl ... CppDecl

          AdaptedClassMember --|> AdaptedDecl

          class AdaptedClass {
                  adapted_public_children
          }
          AdaptedClass ... CppClass
          AdaptedClass --|> AdaptedElement
          AdaptedClass *-- AdaptedClassMember: members
          AdaptedClass *-- AdaptedFunction: methods

          AdaptedParameter --|> AdaptedElement
          AdaptedParameter ... CppParameter

          class AdaptedFunction {
                  return_value_policy
                  ...
          }
          AdaptedFunction --|> AdaptedElement
          AdaptedFunction o... CppFunctionDecl

  }

#+end_src

#+RESULTS:
[[file:packages/srcmlcpp/doc/srcml_cpp_diagram.png]]


insert diagram via mermaid (see integration with emacs)



* Hello ImGui Bundle TOOO

** Pub

Inform third parties maintainers
Reddit
ImGui gallery
Python forums

** Small issues
Soucis sur gitmodules:
  imspinner absent et implot present deux fois

** Post Issue https://github.com/andyborrell/imgui_tex_inspect
Poster Issue shader MacOS




** Faq Fullscreens
       Sdl/FullScreenDesktopResolution:
         click issue (need click higher !) on monitor 0
         ok on monitor 1
       Glfw/FullScreenDesktopResolution: OK on monitor 0 and 1

       Sdl/FullScreen:
         Ok monitor 0 and 1 (change resolution, update windowSize info)
       Glfw/FullScreen
         Monitor 0: does not change resolution
         Monitor 1: does change resolution...

       FullMonitorWorkArea: OK




Remove SimpleRunnerParams
Make docking mode simpler

** Online emscripten ImGuiBundle Demos
(mandel, fn comp, image editing, etc)


** Videos by subject
    Code generation / fidelity & doc
    For research and devel portability
      compare c++ and python
    For Learners (comp)
    For fast devel (immap)
    Implot
    Notebook
    For computer vision
      imdebug!
    Theme editor



** Licence in all file (refers to main license file)

** Contact authors one by one
** Demos cpp close too python
   Group
   Code
   ...

   Doc markdow by lib with code
     => MdWrapper: handle code with TextEdit! (resizable? see https://github.com/ocornut/imgui/issues/319)

  Integrer ImGuiManual


** App Icon???

voir cx-freeze

On Mac, need to create an app bundle: see https://py2app.readthedocs.io/en/latest/
  Bundle example : See /Users/pascal/dvp/OpenSource/ImGuiWork/litgen/icons_test
On Windows, see py2exe
https://py2app.readthedocs.io/en/latest/examples.html#cross-platform

bool RunnerGlfwOpenGl3::Impl_SetAppIcon(const std::string& iconAssetPath)
    {
        auto assetData = LoadAssetFileData(iconAssetPath.c_str());
        if (assetData.data != nullptr)
        {
            int image_width, image_height;
            unsigned char*image_data = stbi_load_from_memory(
                (unsigned char *)assetData.data, (int)assetData.dataSize,
                &image_width, &image_height, NULL, 4);
            GLFWimage images[1];
            images[0].pixels = image_data;
            images[0].width = image_width;
            images[0].height = image_height;
            glfwSetWindowIcon((GLFWwindow *)mWindow, 1, images);
            stbi_image_free(image_data);
            return true;
        }
        else
            return false;
    }

** Inspector Exe
=> Envoi a Vincent
=> Avec outils de manip / node?


** test platforms
    linux:
       si opencv pip: pb / opencv-imgcodecs
** EasyRunner:
     Remove Simplerunnerparams?
     GetRunnerParams() always available
       => No: provide easy setup callback
     Easy docking config (review enum)

** Add immapp (ImmediateApp) !!!!
    run et compagnie


** Wheels / Fight Week-End summary / Liste des emmerdes relev√©es:

*** Conan:
**** marche un jour puis plus, suite update jasper
**** Jasper cass√© => OpenCV conan cass√©
*** Mon mac compile en ARM, et Github en x64
*** Github workflows:
**** Pas possible de lancer unzip sur ssh en remote access windows CI
*** OpenCV
**** OpenCV qui refuse de fonctionner avec cmake-3.25 => besoin de compiler cmake 3.25.1
**** OpenCV n'offre pas de choix pour s√©lectionner ARM64 et choisit x64 dans une compil ARM64
     ==> besoin de hacker CMAKE_PLATFORM
*** Msvc:
**** Lance son debug dans un repertoire diff√©rent de l'exe => besoin de le forcer
**** Pas de message clair quand une dll n'est pas trouv√©e
*** Parallels
**** Desactive le mode 'no limit' de la VM et me passe en ultra lent
*** Windows ARM64
**** Tres lent, Visual studio code hangs
**** numpy pas dispo sur python ARM64 windows
*** VsCode
**** Decide de mettre des Tabs partout
**** Extensions qui hang (ident helper, et autres conneries)
*** Shells microsoft: bataille de standard, entre MSDos, Powershell et Gitbash
    ==> faire une commande multiligne est different partout
*** Compilation tent√©e sur Microsoft  Azure:
**** 1 image sur 2 n'est plus dispo mais on ne le sait qu'a la fin
**** Compil lente
**** De toute fa√ßon, pas possible de lancer une application OpenGL sur ces p.. de machines
**** Pour avoir une machine avec GPU, il faut faire une demande au support...
*** Je mets √† jour le Mac Mini pour m'apercevoir qu'il ne peut pas aller au dela de MacOS High Sierra.
**** Impossible de mettre √† jour Parallels dessus
**** De toute fa√ßon, on pourrait pas reproduire les bugs de High DPI windows dessus => abandon
*** Et je m'en sors quand m√™me en fin de week-end avec une compil qui marche sur Win en CI et un package OpenCV precompil√©




** Wheels

Wheels Ubuntu:
  Use opencv package
  read https://cibuildwheel.readthedocs.io/en/stable/faq/
    => installer via yum, apk, etc (voir pyproject)
    => essayer cibuildwheel en local


Ajouter un CI windows qui compile avec OpenCV et s'assure que immvision est present
Tenter de compiler des wheels ubuntu avec OpenCV from apt?
Compiler les wheels @home, avec pyenv: see https://towardsdatascience.com/how-to-use-manage-multiple-python-versions-on-an-apple-silicon-m1-mac-d69ee6ed0250
    pyenv install --list | grep '\[x86\]'


Utiliser dll de opencv-python?
  Sous windows, il suffit de copier opencv_world
  Sous linux, on demandera probablement d'installer le package opencv et il sera a la meme position que lors du build CI.


  Bug / my VM Windows:
     Build cpp amd KC
     Build cpp arm OK
     pip arm OK mais opencv-python pas dispo
     pip amd ok, mais lent...


  cibuildwheeel:
    "est ce que OpenCV sera link√©"?
      sous linux: peut etre mais peut etre faudra-t-il copier les .so .et .dylib
      sous mac et windows: rien d'√©crit dans le script...
          voir CIBW_ENVIRONMENT_MACOS & CIBW_ENVIRONMENT_WINDOWS ici: https://cibuildwheel.readthedocs.io/en/stable/options/#environment
    => installer cibuildwheel en local et essayer / debugger


* srcml_cpp
  Test libclang: see https://shaharmike.com/cpp/libclang/ & https://libclang.readthedocs.io/en/latest/
     https://bastian.rieck.me/blog/posts/2015/baby_steps_libclang_ast/

** Finish binding lg_srcML (see folder srcML at root)
** Easy
** srcmlcpp hard and later
*** CppElement: composition, not derivation from SrcmlWrapper!
     en profiter pour renommer has_xml_name/change_name_child_text
*** Later: options / suppress warning
*** Later: parallel execution?
    ouch because context
** srcmlcpp utilities


*** Add named parameters to functions
*** Cerealize / cerealize
*** _repr_my_code

*** PimpMyCI:
    check for doc
    check for snake_case
    hunt_fake_classes
       "a class with a constructor and only one public function is not a class. Use a namespace!"
       Example / Mailer
       prefix class members

*** PimplMyClass

review code => simplify and review srcmlcpp

command line
  integration tests


online service
  layout on one page:
     Big Form / Implementation Code
     Render[ImplCode]       Render[GlueCode]
                            Render[PublishedApi]


render code block api (-> codemanip)
  render as collapsible
  copy button

*** Triage
Online:
  store ran codes
  short link service?
  example page

mettre un decorateur @pimplmyclass

const_my_code: look for decl and expr => const if set only once, const param if not modified (and ref if heavy)
   ne devrait faire que des warning en CI

*** WriteMyHeader
can reuse lots of parts of PimplMyClass

*** Template instantiator:
    Template in cpp file
    => generated Overloads in headers (different name?)

*** Decorators:

#+begin_src
    // @logtime
    void MyFunction_undec()
    {
      ...
    }

    // <autogen:decorator>
    void MyFunction_undec()
    {
      start_time = ...
      ...
      end_time = ...
      std::cout << ...
    }
    // </autogen:decorator>

#+end_src



    log fn time
    log inputs
    etc

** parse no except
   See branch parse_no_except
   when parsing: stop throwing, only emit warnings and store as unprocessed
   when message, write the name of the calling function in the message

* Litgen TODO
** Wish list / hard and later
*** mypy: no_implicit_reexport
*** issue with mypy compatibility with generated modules
Problem 2: dans lg_skbuild_template, tout est accpt√© dans example_lib...
Problem 3: dans lg_test_runner (integration tests), tout est refus√© (trouve pas les d√©finitions)
*** auto __repr__ for structs?
*** Bind srcml?
*** N: keep pointer and references layout inside CppType (int *x vs int *x vs int * x)
*** Review code replacemnts
option code_replacements => types_replacements
mettre des @staticmethod
{ // <namespace N>  => // { <namespace N>


        namespace N
        {
            struct S {}; => pas d'__init__ genere? (voir litgen_Generator_test)
           }
*** Interactive demo
Export notebook:
https://mljar.com/blog/jupyter-notebook-html/

https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions/toc2/README.html

   Issue with toc:
     See https://github.com/ipython-contrib/jupyter_contrib_nbextensions/issues/1533
       (jinja2.exceptions.TemplateNotFound: toc2)
** Wish List / Easy
