* Emacs tips

M = Alt
C = Ctrl

C-g : quit current command

* Org mode tips
** Basics
[[https://orgmode.org/orgguide.html#Introduction][Org mode quick guide]]
Link to org [[https://orgmode.org/][mode homepage]] (M-x org-insert-link)


Tab or Shift-Tab on * to collapse locally or globally
Ctrl-Enter to enter a new title of same level below sub-hierarchy
Alt-Enter to enter a new title directly under
Alt-Up/Down to move sections

Format text: Here is *some* content, and some //italic//



Tables: start adding | then use Tab key for magic
| Name  | Age | Sex |
|-------+-----+-----|
| David |  37 | M   |
|       |     |     |

** Lists: use Alt-Enter / use Alt-Shift-Enter (i.e M-S-RET) to  add checkboxes

- [ ] First item
- [ ]
- Second Item
- Third

Example:



** Code blocks : #+begin_src lang / #+end_src (C-C ' to edit the code block in separate buffer)

#+NAME example (optional name)
#+begin_src cpp
  int main()
  {
    return 0;

  }
#+end_src


** TODOs List (C-c C-t )

*** Item 1
*** DONE Item

CLOSED: [2022-09-18 Sun 10:54]



**** Sub Heading
**** A
   int a = 0


* litgen task list

** Global

*** [ ] Add pylint or flake8 to precommit (cf  https://stackoverflow.com/questions/73765587/how-to-get-a-warning-about-a-list-being-global-when-used-as-a-default-argument))

** Handle namespaces

*** First handle subclasses

***** Example code
****** Header

#+begin_src c++
    struct A
    {
        int a;
        struct B
        {
            int b;
        };
    };
#+end_src

****** Pydef
#+begin_src c++
    auto pyClassA = py::class_<A>
        (m, "A", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("a", &A::a, "")
        ;

    // To add
    auto pyClassB_inner_pyClassA = py::class_<A::B>
        (pyClassA, "B", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("b", &A::B::b, "")
        ;

#+end_src

****** Stub
#+begin_src python
class A:
    a:int

    class B:
        b: int
#+end_src

****** [ ] Remember current scope (namespace /class)

See AdaptedFunction => replace parent_struct_name by scope
    def __init__(
        self, options: LitgenOptions, function_infos: CppFunctionDecl,
        parent_struct_name: str, is_overloaded: bool
    ) -> None:

scope can be root, list of sub-scopes (with type=class or submodule)

AdaptedElement
  added scope:
    need to be empty for class, and filled only if subclass or namespace (later)
  should we add parent?

  scope needed for:
    functions or methods (in lambda)
    class and inner class (in pydef creation)




***** [ ] Define name of class / take into account scope


**** Sample code / namespace
#+NAME code to test
#+begin_src cpp
namespace A
{
    namespace B
    {
        enum class ItemType{ One, Two, Three};
        void FooB(ItemType itemType);
    }

    void FooA(B::ItemType v);
}
#+end_src

*** Strategy
soit https://www.reddit.com/r/learnpython/comments/dek8fy/how_to_create_a_stub_file_for_a_submodule_in_a_c/
soit fake class with staticmethods

**** Définir un  ou des root Namespace
            pour lequel on ne cree pas de submodule
            que faire des fonctions hors namespace: les ignorer?

     côté pybind:
          module_ newsubmodule = m.def_submodule(const char *name, const char *doc = nullptr)
