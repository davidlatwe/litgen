* Emacs tips

** General
M = Alt
C = Ctrl
M-x = select / search command

C-g : quit current command

** Org mode tips
** Basics
[[https://orgmode.org/orgguide.html#Introduction][Org mode quick guide]]
Link to org [[https://orgmode.org/][mode homepage]] (M-x org-insert-link)


Tab or Shift-Tab on * to collapse locally or globally
Ctrl-Enter to enter a new title of same level below sub-hierarchy
Alt-Enter to enter a new title directly under
Alt-Up/Down to move sections

Format text: Here is *some* content, and some //italic//

** diagrams and drawings

*** With mermaid

Installed https://github.com/arnm/ob-mermaid

See doc of mermaid, run mermaid via C-c C-c
Display images via `org-display-inline-images` (M-x to select action)
Also toggle display via C-c C-x C-v (wtf is that shortcut!)


#+begin_src mermaid :file doc/diagrams/test.png
sequenceDiagram
 A-->B: Works!
 B-->C: Again!q
#+end_src

#+RESULTS:
[[file:doc/diagrams/test.png]]

*** With Plantuml


#+begin_src plantuml :file doc/diagrams/test_puml.png
title Authentication Sequence

Alice->Bob: Authentication Request
note right of Bob: Bob thinks about it
Bob->Alice: Authentication Response
#+end_src

#+RESULTS:
[[file:doc/diagrams/test_puml.png]]



** Tables: start adding | then use Tab key for magic
| Name  | Age | Sex |
|-------+-----+-----|
| David |  37 | M   |
|       |     |     |



** Lists: use Alt-Enter / use Alt-Shift-Enter (i.e M-S-RET) to  add checkboxes

- [ ] First item
- [ ]
- Second Item
- Third

Example:



** Code blocks : #+begin_src lang / #+end_src (C-C ' to edit the code block in separate buffer)

#+NAME example (optional name)
#+begin_src cpp
  int main()
  {
    return 0;

  }
#+end_src


** TODOs List (C-c C-t )

*** Item 1
*** DONE Item

CLOSED: [2022-09-18 Sun 10:54]



**** Sub Heading
**** A
   int a = 0



* immvision

** demo mandelbrot emscripten multithread:

Test multithread qui semble marcher:
    voir /Users/pascal/dvp/OpenSource/ImGuiWork/hello_imgui/build_emscripten
    et /Users/pascal/dvp/OpenSource/ImGuiWork/hello_imgui/src/hello_imgui_demos/thread_ems/thread_ems.main.cpp

    En gros, ca marche avec Firefox et Chrome.
    plein de modifs:
       1. Server web qui Envoie des headers necessaires pour rendre multithread accepté
          /Users/pascal/dvp/OpenSource/ImGuiWork/hello_imgui/src/hello_imgui_demos/thread_ems/simple-cors-http-server.py
       2. Pas de sleep ni de join sur thread principal!
       3. options de compil : faire choix dans
          - supprimer -s ALLOW_MEMORY_GROWTH=1 ?
          - add_compile_options("-pthread")
            add_link_options("-pthread")
          + add_compile_options("-sPTHREAD_POOL_SIZE=100")
          + add_compile_options("-sINITIAL_MEMORY=167772160")



* srcml_cpp

** srcml_cpp as main project
...
** ideas / further development
*** pimpl_my_class
*** add named parameters to functions


* Litgen doc

** Diagram srcmlcpp and litgen adapted classes

Failed attempt to remove confirmation for C-c C-c
(setq org-confirm-babel-evaluate f)

#+begin_src plantuml :file packages/srcmlcpp/doc/srcml_cpp_diagram.png
  class ET.Element
  package srcmlcpp {
          class SrcmlOptions {
                  + encoding
                  +preserve_empty_lines
                  ...
          }

          class SrcmlXmlWrapper {
                  + options: SrcmlOptions
                  + srcml_xml: ET.Element
                  + parent: opt[SrcmlXmlWrapper]

                  + str_code_verbatim()
                  + str_xml()
                  ...
          }

          SrcmlXmlWrapper <|... SrcmlXmlWrapper: opt(parent)
          SrcmlXmlWrapper *-- ET.Element
          SrcmlXmlWrapper o-- SrcmlOptions

          class CppElement {
                  + str_code()
                  + visit...()
          }

          class CppElementComments {
                  comment_on_previous_lines: str
                  comment_end_of_line: str
          }

          CppElement --|> SrcmlXmlWrapper

          class CppElementAndComment {
                  cpp_element_comments
          }
          CppElementAndComment --|> CppElement
          CppElementAndComment *-- CppElementComments


          /'
          CppEmptyLine --|> CppElementAndComment
          CppUnprocessed--|> CppElementAndComment
          '/

          class CppBlock {
                  block_children: List[CppElementAndComment]
          }

          CppBlock *-- CppElementAndComment : List

          class CppUnit {
                  "Represent a full file"
          }
          CppUnit --|> CppBlock

          class CppBlockContent {
                  "used by function and anonymous blocks"
          }

          CppBlockContent --|> CppBlock


          class CppPublicProtectedPrivate {
                  + access_type
                  + default_or_explicit
          }
          CppPublicProtectedPrivate --|> CppBlock

          class CppType {
                  typenames: List[str]
                  specifiers: List[str]
                  modifiers: List[str]
          }

          CppType --|> CppElement

          class  CppDecl {
                  cpp_type: CppType
                  decl_name: str
                  c_array_code: str
                  initial_value_code: str
          }

          CppDecl *-- CppType
          CppDecl --|> CppElementAndComment

          class CppDeclStatement {
                  cpp_decls: List[CppDecl]
          }

          CppDeclStatement --|> CppElementAndComment
          CppDeclStatement *-- CppDecl : List

          class CppParameter {
                  decl: CppDecl
                  template_type: CppType
                  template_name: str = ""
          }
          CppParameter --|> CppElementAndComment
          CppParameter *-- CppDecl


          class CppParameterList {
                  List of parameters of a function
                  parameters: List[CppParameter]
          }

          CppParameterList *-- "many" CppParameter

          class CppTemplate {
                  "Template parameters"
                  + parameter_list: CppParameterList
          }
          CppTemplate *-- CppParameterList
          CppTemplate --|> CppElement


          class CppFunctionDecl {
                  "function or method"
                  specifiers: List[str]
                  return_type: CppType
                  parameter_list: CppParameterList
                  template: CppTemplate
                  is_auto_decl: bool
                  function_name: str
          }

          CppFunctionDecl --|> CppElementAndComment
          /' CppFunctionDecl *-- CppType: return_type '/
          CppFunctionDecl *-- CppParameterList
          CppFunctionDecl *-- CppTemplate : optional


          class CppFunction {
                  block
          }
          CppFunction --|> CppFunctionDecl
          CppFunction *-- CppBlockContent

          CppConstructorDecl --|> CppFunctionDecl
          CppContructor --|> CppFunction

          /'
          class CppSuper {
                  specifier
                  superclass_name
          }
          '/

          class CppSuperList {
                  super_list: List[CppSuper]
          }
          /'CppSuperList *-- "many" CppSuper'/
          CppSuperList --|> CppElement


          class CppStruct {
                  class_name: str
                  super_list: CppSuperList
                  block: CppBlock
                  template: CppTemplate

                  +get_public_blocks()
                  +get_public_elements()
                  ...
          }
          CppStruct *-- CppBlock
          CppStruct *-- CppTemplate
          CppStruct *-- CppSuperList

          CppClass --|> CppStruct


          /'CppComment --|> CppElementAndComment'/

          class CppNamespace {
                  ns_name: str
                  block: CppBlock
          }
          CppNamespace --|> CppElementAndComment
          CppNamespace *-- CppBlock

          class CppEnum {
                  block: CppBlock
                  enum_type
                  enum_name
          }

          CppEnum --|> CppElementAndComment
          CppEnum *-- CppBlock
  }


  package litgen {

          class LitgenOptions {
          }

          class AdaptedElement {
                  _cpp_element: CppElementAndComment
                  options: LitgenOptions
                  +str_stub()
                  +str_pydef()
          }
          AdaptedElement *-- CppElementAndComment
          AdaptedElement o-- LitgenOptions

          class AdaptedBlock
          AdaptedBlock --|> AdaptedElement
          AdaptedBlock ... CppBlock

          class AdaptedNamespace
          AdaptedNamespace --|> AdaptedElement
          AdaptedNamespace ... CppNamespace

          class AdaptedDecl
          AdaptedDecl --|> AdaptedElement
          AdaptedDecl ... CppDecl

          AdaptedClassMember --|> AdaptedDecl

          class AdaptedClass {
                  adapted_public_children
          }
          AdaptedClass ... CppClass
          AdaptedClass --|> AdaptedElement
          AdaptedClass *-- AdaptedClassMember: members
          AdaptedClass *-- AdaptedFunction: methods

          AdaptedParameter --|> AdaptedElement
          AdaptedParameter ... CppParameter

          class AdaptedFunction {
                  return_value_policy
                  ...
          }
          AdaptedFunction --|> AdaptedElement
          AdaptedFunction o... CppFunctionDecl

  }

#+end_src

#+RESULTS:
[[file:packages/srcmlcpp/doc/srcml_cpp_diagram.png]]


insert diagram via mermaid (see integration with emacs)



* Litgen TODO

** Wish list / hard

*** issue with mypy compatibility with generated modules

Problem 1: syntax issues dans hello_imgui (py with :: :    load_additional_fonts:VoidFunction = ImGuiDefaultSettings::LoadDefaultFont_WithFontAwesomeIcons)
Problem 2: dans lg_skbuild_template, tout est accpté dans example_lib...
Problem 3: dans lg_test_runner (integration tests), tout est refusé (trouve pas les définitions)

*** faire un generator / lg_skbuild_template
Argh...

** Wish List / Easy

Test STL
Group tests / separate headers & py tests
*** integration test
  rename lg_testrunner to integration tests
  finish separation
  add test / struct, enum, etc
  add doc


** Handle scope

*** First handle subclasses & sub enums

Remaining todo:

Fix Case with lambdas:
  qualified name
  then remove using namespace ImGui in pybind_imgui.cpp


Add enums


*** Handle Namespace
Add options:

    ################################################################################
    #    <main namespace>
    ################################################################################

    # Namespace that match those regexes are concerned as root, and will not
    # be outputted as submodules
    # class_exclude_by_name__regexes: List[str] = []
    main_namespace_regexes: List[str] = []


**** Sample code / namespace
#+NAME code to test
#+begin_src cpp
namespace A
{
    namespace B
    {
        enum class ItemType{ One, Two, Three};
        void FooB(ItemType itemType);
    }

    void FooA(B::ItemType v);
}
#+end_src

**** Strategy

soit https://www.reddit.com/r/learnpython/comments/dek8fy/how_to_create_a_stub_file_for_a_submodule_in_a_c/

soit fake class with staticmethods
  dans ce cas, pas forcement besoin de decorer avec @staticmethod: https://stackoverflow.com/questions/43587044/do-we-really-need-staticmethod-decorator-in-python-to-declare-static-method
  attention, dans le code client python, il faudra faire un import quand même!

**** Définir un  ou des root Namespace
            pour lequel on ne cree pas de submodule
            que faire des fonctions hors namespace: les ignorer?

     côté pybind:
          module_ newsubmodule = m.def_submodule(const char *name, const char *doc = nullptr)
